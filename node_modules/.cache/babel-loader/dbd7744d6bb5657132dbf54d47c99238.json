{"ast":null,"code":"import { useContext, useMemo, useEffect } from 'react';\nimport { MapContext } from './map';\nexport default function useControl(onCreate, onRemove, opts) {\n  const context = useContext(MapContext);\n  const ctrl = useMemo(() => onCreate(context), []);\n  useEffect(() => {\n    const {\n      map\n    } = context;\n\n    if (!map.hasControl(ctrl)) {\n      map.addControl(ctrl, (opts || onRemove)?.position);\n    }\n\n    return () => {\n      if (typeof onRemove === 'function') {\n        onRemove(context);\n      } // Map might have been removed (parent effects are destroyed before child ones)\n\n\n      if (map.hasControl(ctrl)) {\n        map.removeControl(ctrl);\n      }\n    };\n  }, []);\n  return ctrl;\n}","map":{"version":3,"mappings":"AAAA,SAAQA,UAAR,EAAoBC,OAApB,EAA6BC,SAA7B,QAA6C,OAA7C;AAEA,SAAQC,UAAR,QAAyB,OAAzB;AAOA,eAAc,SAAUC,UAAV,CACZC,QADY,EAEZC,QAFY,EAGZC,IAHY,EAGS;AAErB,QAAMC,OAAO,GAAGR,UAAU,CAACG,UAAD,CAA1B;AACA,QAAMM,IAAI,GAAGR,OAAO,CAAC,MAAMI,QAAQ,CAACG,OAAD,CAAf,EAA0B,EAA1B,CAApB;AAEAN,WAAS,CAAC,MAAK;AACb,UAAM;AAACQ;AAAD,QAAQF,OAAd;;AACA,QAAI,CAACE,GAAG,CAACC,UAAJ,CAAeF,IAAf,CAAL,EAA2B;AACzBC,SAAG,CAACE,UAAJ,CAAeH,IAAf,EAAqB,CAACF,IAAI,IAAKD,QAAV,GAAwCO,QAA7D;AACD;;AAED,WAAO,MAAK;AACV,UAAI,OAAOP,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,gBAAQ,CAACE,OAAD,CAAR;AACD,OAHS,CAIV;;;AACA,UAAIE,GAAG,CAACC,UAAJ,CAAeF,IAAf,CAAJ,EAA0B;AACxBC,WAAG,CAACI,aAAJ,CAAkBL,IAAlB;AACD;AACF,KARD;AASD,GAfQ,EAeN,EAfM,CAAT;AAiBA,SAAOA,IAAP;AACD","names":["useContext","useMemo","useEffect","MapContext","useControl","onCreate","onRemove","opts","context","ctrl","map","hasControl","addControl","position","removeControl"],"sources":["C:\\Users\\bhupe\\Downloads\\Term 4\\COMP4537\\MilestoneFinal\\ISAproject\\node_modules\\react-map-gl\\src\\components\\use-control.ts"],"sourcesContent":["import {useContext, useMemo, useEffect} from 'react';\nimport type {IControl, ControlPosition} from '../types';\nimport {MapContext} from './map';\nimport type {MapContextValue} from './map';\n\ntype ControlOptions = {\n  position?: ControlPosition;\n};\n\nexport default function useControl<T extends IControl>(\n  onCreate: (context: MapContextValue) => T,\n  onRemove?: ((context: MapContextValue) => void) | ControlOptions,\n  opts?: ControlOptions\n) {\n  const context = useContext(MapContext);\n  const ctrl = useMemo(() => onCreate(context), []);\n\n  useEffect(() => {\n    const {map} = context;\n    if (!map.hasControl(ctrl)) {\n      map.addControl(ctrl, (opts || (onRemove as ControlOptions))?.position);\n    }\n\n    return () => {\n      if (typeof onRemove === 'function') {\n        onRemove(context);\n      }\n      // Map might have been removed (parent effects are destroyed before child ones)\n      if (map.hasControl(ctrl)) {\n        map.removeControl(ctrl);\n      }\n    };\n  }, []);\n\n  return ctrl;\n}\n"]},"metadata":{},"sourceType":"module"}