{"ast":null,"code":"'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n/**\r\n * Add a new interceptor to the stack\r\n *\r\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\r\n * @param {Function} rejected The function to handle `reject` for a `Promise`\r\n *\r\n * @return {Number} An ID used to remove interceptor later\r\n */\n\n\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n/**\r\n * Remove an interceptor from the stack\r\n *\r\n * @param {Number} id The ID that was returned by `use`\r\n */\n\n\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n/**\r\n * Iterate over all the registered interceptors\r\n *\r\n * This method is particularly useful for skipping over any\r\n * interceptors that may have become `null` calling `eject`.\r\n *\r\n * @param {Function} fn The function to call for each interceptor\r\n */\n\n\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/axios/lib/core/InterceptorManager.js"],"names":["utils","require","InterceptorManager","handlers","prototype","use","fulfilled","rejected","options","push","synchronous","runWhen","length","eject","id","forEach","fn","forEachHandler","h","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,OAAKC,QAAL,GAAgB,EAAhB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAD,kBAAkB,CAACE,SAAnB,CAA6BC,GAA7B,GAAmC,SAASA,GAAT,CAAaC,SAAb,EAAwBC,QAAxB,EAAkCC,OAAlC,EAA2C;AAC5E,OAAKL,QAAL,CAAcM,IAAd,CAAmB;AACjBH,IAAAA,SAAS,EAAEA,SADM;AAEjBC,IAAAA,QAAQ,EAAEA,QAFO;AAGjBG,IAAAA,WAAW,EAAEF,OAAO,GAAGA,OAAO,CAACE,WAAX,GAAyB,KAH5B;AAIjBC,IAAAA,OAAO,EAAEH,OAAO,GAAGA,OAAO,CAACG,OAAX,GAAqB;AAJpB,GAAnB;AAMA,SAAO,KAAKR,QAAL,CAAcS,MAAd,GAAuB,CAA9B;AACD,CARD;AAUA;AACA;AACA;AACA;AACA;;;AACAV,kBAAkB,CAACE,SAAnB,CAA6BS,KAA7B,GAAqC,SAASA,KAAT,CAAeC,EAAf,EAAmB;AACtD,MAAI,KAAKX,QAAL,CAAcW,EAAd,CAAJ,EAAuB;AACrB,SAAKX,QAAL,CAAcW,EAAd,IAAoB,IAApB;AACD;AACF,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,kBAAkB,CAACE,SAAnB,CAA6BW,OAA7B,GAAuC,SAASA,OAAT,CAAiBC,EAAjB,EAAqB;AAC1DhB,EAAAA,KAAK,CAACe,OAAN,CAAc,KAAKZ,QAAnB,EAA6B,SAASc,cAAT,CAAwBC,CAAxB,EAA2B;AACtD,QAAIA,CAAC,KAAK,IAAV,EAAgB;AACdF,MAAAA,EAAE,CAACE,CAAD,CAAF;AACD;AACF,GAJD;AAKD,CAND;;AAQAC,MAAM,CAACC,OAAP,GAAiBlB,kBAAjB","sourcesContent":["'use strict';\r\n\r\nvar utils = require('./../utils');\r\n\r\nfunction InterceptorManager() {\r\n  this.handlers = [];\r\n}\r\n\r\n/**\r\n * Add a new interceptor to the stack\r\n *\r\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\r\n * @param {Function} rejected The function to handle `reject` for a `Promise`\r\n *\r\n * @return {Number} An ID used to remove interceptor later\r\n */\r\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\r\n  this.handlers.push({\r\n    fulfilled: fulfilled,\r\n    rejected: rejected,\r\n    synchronous: options ? options.synchronous : false,\r\n    runWhen: options ? options.runWhen : null\r\n  });\r\n  return this.handlers.length - 1;\r\n};\r\n\r\n/**\r\n * Remove an interceptor from the stack\r\n *\r\n * @param {Number} id The ID that was returned by `use`\r\n */\r\nInterceptorManager.prototype.eject = function eject(id) {\r\n  if (this.handlers[id]) {\r\n    this.handlers[id] = null;\r\n  }\r\n};\r\n\r\n/**\r\n * Iterate over all the registered interceptors\r\n *\r\n * This method is particularly useful for skipping over any\r\n * interceptors that may have become `null` calling `eject`.\r\n *\r\n * @param {Function} fn The function to call for each interceptor\r\n */\r\nInterceptorManager.prototype.forEach = function forEach(fn) {\r\n  utils.forEach(this.handlers, function forEachHandler(h) {\r\n    if (h !== null) {\r\n      fn(h);\r\n    }\r\n  });\r\n};\r\n\r\nmodule.exports = InterceptorManager;\r\n"]},"metadata":{},"sourceType":"script"}