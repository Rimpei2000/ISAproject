{"ast":null,"code":"import { ao as _isIOS7Or8, ap as debugAssert, aq as _isIOS, ar as _isAndroid, as as _fail, at as _getRedirectUrl, au as _getProjectConfig, av as _createError, aw as _assert, ax as _getInstance, b as browserLocalPersistence, ay as _persistenceKeyName, az as AuthEventManager, a as browserSessionPersistence, aA as _getRedirectResult, aB as _clearRedirectOutcomes, aC as _castAuth } from './index-585b6059.js';\nexport { A as ActionCodeOperation, ac as ActionCodeURL, G as AuthCredential, C as AuthErrorCodes, aE as AuthImpl, aH as AuthPopup, H as EmailAuthCredential, L as EmailAuthProvider, M as FacebookAuthProvider, F as FactorId, aI as FetchProvider, Q as GithubAuthProvider, N as GoogleAuthProvider, I as OAuthCredential, T as OAuthProvider, O as OperationType, J as PhoneAuthCredential, P as PhoneAuthProvider, m as PhoneMultiFactorGenerator, o as ProviderId, R as RecaptchaVerifier, aJ as SAMLAuthCredential, U as SAMLAuthProvider, S as SignInMethod, V as TwitterAuthProvider, aD as UserImpl, aw as _assert, aC as _castAuth, as as _fail, aG as _generateEventId, aF as _getClientVersion, ax as _getInstance, aA as _getRedirectResult, ay as _persistenceKeyName, a1 as applyActionCode, b as browserLocalPersistence, k as browserPopupRedirectResolver, a as browserSessionPersistence, a2 as checkActionCode, a0 as confirmPasswordReset, E as connectAuthEmulator, a4 as createUserWithEmailAndPassword, z as debugErrorMap, y as deleteUser, a9 as fetchSignInMethodsForEmail, ak as getAdditionalUserInfo, n as getAuth, ah as getIdToken, ai as getIdTokenResult, am as getMultiFactorResolver, j as getRedirectResult, K as inMemoryPersistence, i as indexedDBLocalPersistence, D as initializeAuth, a7 as isSignInWithEmailLink, Y as linkWithCredential, l as linkWithPhoneNumber, d as linkWithPopup, g as linkWithRedirect, an as multiFactor, t as onAuthStateChanged, q as onIdTokenChanged, ad as parseActionCodeURL, B as prodErrorMap, Z as reauthenticateWithCredential, r as reauthenticateWithPhoneNumber, e as reauthenticateWithPopup, h as reauthenticateWithRedirect, al as reload, aa as sendEmailVerification, $ as sendPasswordResetEmail, a6 as sendSignInLinkToEmail, p as setPersistence, W as signInAnonymously, X as signInWithCredential, _ as signInWithCustomToken, a5 as signInWithEmailAndPassword, a8 as signInWithEmailLink, s as signInWithPhoneNumber, c as signInWithPopup, f as signInWithRedirect, x as signOut, aj as unlink, w as updateCurrentUser, af as updateEmail, ag as updatePassword, u as updatePhoneNumber, ae as updateProfile, v as useDeviceLanguage, ab as verifyBeforeUpdateEmail, a3 as verifyPasswordResetCode } from './index-585b6059.js';\nimport { querystringDecode } from '@firebase/util';\nimport '@firebase/app';\nimport 'tslib';\nimport '@firebase/logger';\nimport '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction _cordovaWindow() {\n  return window;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * How long to wait after the app comes back into focus before concluding that\r\n * the user closed the sign in tab.\r\n */\n\n\nconst REDIRECT_TIMEOUT_MS = 2000;\n/**\r\n * Generates the URL for the OAuth handler.\r\n */\n\nasync function _generateHandlerUrl(auth, event, provider) {\n  var _a; // Get the cordova plugins\n\n\n  const {\n    BuildInfo\n  } = _cordovaWindow();\n\n  debugAssert(event.sessionId, 'AuthEvent did not contain a session ID');\n  const sessionDigest = await computeSha256(event.sessionId);\n  const additionalParams = {};\n\n  if (_isIOS()) {\n    // iOS app identifier\n    additionalParams['ibi'] = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    // Android app identifier\n    additionalParams['apn'] = BuildInfo.packageName;\n  } else {\n    _fail(auth, \"operation-not-supported-in-this-environment\"\n    /* OPERATION_NOT_SUPPORTED */\n    );\n  } // Add the display name if available\n\n\n  if (BuildInfo.displayName) {\n    additionalParams['appDisplayName'] = BuildInfo.displayName;\n  } // Attached the hashed session ID\n\n\n  additionalParams['sessionId'] = sessionDigest;\n  return _getRedirectUrl(auth, provider, event.type, undefined, (_a = event.eventId) !== null && _a !== void 0 ? _a : undefined, additionalParams);\n}\n/**\r\n * Validates that this app is valid for this project configuration\r\n */\n\n\nasync function _validateOrigin(auth) {\n  const {\n    BuildInfo\n  } = _cordovaWindow();\n\n  const request = {};\n\n  if (_isIOS()) {\n    request.iosBundleId = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    request.androidPackageName = BuildInfo.packageName;\n  } else {\n    _fail(auth, \"operation-not-supported-in-this-environment\"\n    /* OPERATION_NOT_SUPPORTED */\n    );\n  } // Will fail automatically if package name is not authorized\n\n\n  await _getProjectConfig(auth, request);\n}\n\nfunction _performRedirect(handlerUrl) {\n  // Get the cordova plugins\n  const {\n    cordova\n  } = _cordovaWindow();\n\n  return new Promise(resolve => {\n    cordova.plugins.browsertab.isAvailable(browserTabIsAvailable => {\n      let iabRef = null;\n\n      if (browserTabIsAvailable) {\n        cordova.plugins.browsertab.openUrl(handlerUrl);\n      } else {\n        // TODO: Return the inappbrowser ref that's returned from the open call\n        iabRef = cordova.InAppBrowser.open(handlerUrl, _isIOS7Or8() ? '_blank' : '_system', 'location=yes');\n      }\n\n      resolve(iabRef);\n    });\n  });\n}\n/**\r\n * This function waits for app activity to be seen before resolving. It does\r\n * this by attaching listeners to various dom events. Once the app is determined\r\n * to be visible, this promise resolves. AFTER that resolution, the listeners\r\n * are detached and any browser tabs left open will be closed.\r\n */\n\n\nasync function _waitForAppResume(auth, eventListener, iabRef) {\n  // Get the cordova plugins\n  const {\n    cordova\n  } = _cordovaWindow();\n\n  let cleanup = () => {};\n\n  try {\n    await new Promise((resolve, reject) => {\n      let onCloseTimer = null; // DEFINE ALL THE CALLBACKS =====\n\n      function authEventSeen() {\n        var _a; // Auth event was detected. Resolve this promise and close the extra\n        // window if it's still open.\n\n\n        resolve();\n        const closeBrowserTab = (_a = cordova.plugins.browsertab) === null || _a === void 0 ? void 0 : _a.close;\n\n        if (typeof closeBrowserTab === 'function') {\n          closeBrowserTab();\n        } // Close inappbrowser emebedded webview in iOS7 and 8 case if still\n        // open.\n\n\n        if (typeof (iabRef === null || iabRef === void 0 ? void 0 : iabRef.close) === 'function') {\n          iabRef.close();\n        }\n      }\n\n      function resumed() {\n        if (onCloseTimer) {\n          // This code already ran; do not rerun.\n          return;\n        }\n\n        onCloseTimer = window.setTimeout(() => {\n          // Wait two seeconds after resume then reject.\n          reject(_createError(auth, \"redirect-cancelled-by-user\"\n          /* REDIRECT_CANCELLED_BY_USER */\n          ));\n        }, REDIRECT_TIMEOUT_MS);\n      }\n\n      function visibilityChanged() {\n        if ((document === null || document === void 0 ? void 0 : document.visibilityState) === 'visible') {\n          resumed();\n        }\n      } // ATTACH ALL THE LISTENERS =====\n      // Listen for the auth event\n\n\n      eventListener.addPassiveListener(authEventSeen); // Listen for resume and visibility events\n\n      document.addEventListener('resume', resumed, false);\n\n      if (_isAndroid()) {\n        document.addEventListener('visibilitychange', visibilityChanged, false);\n      } // SETUP THE CLEANUP FUNCTION =====\n\n\n      cleanup = () => {\n        eventListener.removePassiveListener(authEventSeen);\n        document.removeEventListener('resume', resumed, false);\n        document.removeEventListener('visibilitychange', visibilityChanged, false);\n\n        if (onCloseTimer) {\n          window.clearTimeout(onCloseTimer);\n        }\n      };\n    });\n  } finally {\n    cleanup();\n  }\n}\n/**\r\n * Checks the configuration of the Cordova environment. This has no side effect\r\n * if the configuration is correct; otherwise it throws an error with the\r\n * missing plugin.\r\n */\n\n\nfunction _checkCordovaConfiguration(auth) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n  const win = _cordovaWindow(); // Check all dependencies installed.\n  // https://github.com/nordnet/cordova-universal-links-plugin\n  // Note that cordova-universal-links-plugin has been abandoned.\n  // A fork with latest fixes is available at:\n  // https://www.npmjs.com/package/cordova-universal-links-plugin-fix\n\n\n  _assert(typeof ((_a = win === null || win === void 0 ? void 0 : win.universalLinks) === null || _a === void 0 ? void 0 : _a.subscribe) === 'function', auth, \"invalid-cordova-configuration\"\n  /* INVALID_CORDOVA_CONFIGURATION */\n  , {\n    missingPlugin: 'cordova-universal-links-plugin-fix'\n  }); // https://www.npmjs.com/package/cordova-plugin-buildinfo\n\n\n  _assert(typeof ((_b = win === null || win === void 0 ? void 0 : win.BuildInfo) === null || _b === void 0 ? void 0 : _b.packageName) !== 'undefined', auth, \"invalid-cordova-configuration\"\n  /* INVALID_CORDOVA_CONFIGURATION */\n  , {\n    missingPlugin: 'cordova-plugin-buildInfo'\n  }); // https://github.com/google/cordova-plugin-browsertab\n\n\n  _assert(typeof ((_e = (_d = (_c = win === null || win === void 0 ? void 0 : win.cordova) === null || _c === void 0 ? void 0 : _c.plugins) === null || _d === void 0 ? void 0 : _d.browsertab) === null || _e === void 0 ? void 0 : _e.openUrl) === 'function', auth, \"invalid-cordova-configuration\"\n  /* INVALID_CORDOVA_CONFIGURATION */\n  , {\n    missingPlugin: 'cordova-plugin-browsertab'\n  });\n\n  _assert(typeof ((_h = (_g = (_f = win === null || win === void 0 ? void 0 : win.cordova) === null || _f === void 0 ? void 0 : _f.plugins) === null || _g === void 0 ? void 0 : _g.browsertab) === null || _h === void 0 ? void 0 : _h.isAvailable) === 'function', auth, \"invalid-cordova-configuration\"\n  /* INVALID_CORDOVA_CONFIGURATION */\n  , {\n    missingPlugin: 'cordova-plugin-browsertab'\n  }); // https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/\n\n\n  _assert(typeof ((_k = (_j = win === null || win === void 0 ? void 0 : win.cordova) === null || _j === void 0 ? void 0 : _j.InAppBrowser) === null || _k === void 0 ? void 0 : _k.open) === 'function', auth, \"invalid-cordova-configuration\"\n  /* INVALID_CORDOVA_CONFIGURATION */\n  , {\n    missingPlugin: 'cordova-plugin-inappbrowser'\n  });\n}\n/**\r\n * Computes the SHA-256 of a session ID. The SubtleCrypto interface is only\r\n * available in \"secure\" contexts, which covers Cordova (which is served on a file\r\n * protocol).\r\n */\n\n\nasync function computeSha256(sessionId) {\n  const bytes = stringToArrayBuffer(sessionId); // TODO: For IE11 crypto has a different name and this operation comes back\n  //       as an object, not a promise. This is the old proposed standard that\n  //       is used by IE11:\n  // https://www.w3.org/TR/2013/WD-WebCryptoAPI-20130108/#cryptooperation-interface\n\n  const buf = await crypto.subtle.digest('SHA-256', bytes);\n  const arr = Array.from(new Uint8Array(buf));\n  return arr.map(num => num.toString(16).padStart(2, '0')).join('');\n}\n\nfunction stringToArrayBuffer(str) {\n  // This function is only meant to deal with an ASCII charset and makes\n  // certain simplifying assumptions.\n  debugAssert(/[0-9a-zA-Z]+/.test(str), 'Can only convert alpha-numeric strings');\n\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder().encode(str);\n  }\n\n  const buff = new ArrayBuffer(str.length);\n  const view = new Uint8Array(buff);\n\n  for (let i = 0; i < str.length; i++) {\n    view[i] = str.charCodeAt(i);\n  }\n\n  return view;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst SESSION_ID_LENGTH = 20;\n/** Custom AuthEventManager that adds passive listeners to events */\n\nclass CordovaAuthEventManager extends AuthEventManager {\n  constructor() {\n    super(...arguments);\n    this.passiveListeners = new Set();\n    this.initPromise = new Promise(resolve => {\n      this.resolveInialized = resolve;\n    });\n  }\n\n  addPassiveListener(cb) {\n    this.passiveListeners.add(cb);\n  }\n\n  removePassiveListener(cb) {\n    this.passiveListeners.delete(cb);\n  } // In a Cordova environment, this manager can live through multiple redirect\n  // operations\n\n\n  resetRedirect() {\n    this.queuedRedirectEvent = null;\n    this.hasHandledPotentialRedirect = false;\n  }\n  /** Override the onEvent method */\n\n\n  onEvent(event) {\n    this.resolveInialized();\n    this.passiveListeners.forEach(cb => cb(event));\n    return super.onEvent(event);\n  }\n\n  async initialized() {\n    await this.initPromise;\n  }\n\n}\n/**\r\n * Generates a (partial) {@link AuthEvent}.\r\n */\n\n\nfunction _generateNewEvent(auth, type) {\n  let eventId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return {\n    type,\n    eventId,\n    urlResponse: null,\n    sessionId: generateSessionId(),\n    postBody: null,\n    tenantId: auth.tenantId,\n    error: _createError(auth, \"no-auth-event\"\n    /* NO_AUTH_EVENT */\n    )\n  };\n}\n\nfunction _savePartialEvent(auth, event) {\n  return storage()._set(persistenceKey(auth), event);\n}\n\nasync function _getAndRemoveEvent(auth) {\n  const event = await storage()._get(persistenceKey(auth));\n\n  if (event) {\n    await storage()._remove(persistenceKey(auth));\n  }\n\n  return event;\n}\n\nfunction _eventFromPartialAndUrl(partialEvent, url) {\n  var _a, _b; // Parse the deep link within the dynamic link URL.\n\n\n  const callbackUrl = _getDeepLinkFromCallback(url); // Confirm it is actually a callback URL.\n  // Currently the universal link will be of this format:\n  // https://<AUTH_DOMAIN>/__/auth/callback<OAUTH_RESPONSE>\n  // This is a fake URL but is not intended to take the user anywhere\n  // and just redirect to the app.\n\n\n  if (callbackUrl.includes('/__/auth/callback')) {\n    // Check if there is an error in the URL.\n    // This mechanism is also used to pass errors back to the app:\n    // https://<AUTH_DOMAIN>/__/auth/callback?firebaseError=<STRINGIFIED_ERROR>\n    const params = searchParamsOrEmpty(callbackUrl); // Get the error object corresponding to the stringified error if found.\n\n    const errorObject = params['firebaseError'] ? parseJsonOrNull(decodeURIComponent(params['firebaseError'])) : null;\n    const code = (_b = (_a = errorObject === null || errorObject === void 0 ? void 0 : errorObject['code']) === null || _a === void 0 ? void 0 : _a.split('auth/')) === null || _b === void 0 ? void 0 : _b[1];\n    const error = code ? _createError(code) : null;\n\n    if (error) {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        error,\n        urlResponse: null,\n        sessionId: null,\n        postBody: null\n      };\n    } else {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        sessionId: partialEvent.sessionId,\n        urlResponse: callbackUrl,\n        postBody: null\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction generateSessionId() {\n  const chars = [];\n  const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  for (let i = 0; i < SESSION_ID_LENGTH; i++) {\n    const idx = Math.floor(Math.random() * allowedChars.length);\n    chars.push(allowedChars.charAt(idx));\n  }\n\n  return chars.join('');\n}\n\nfunction storage() {\n  return _getInstance(browserLocalPersistence);\n}\n\nfunction persistenceKey(auth) {\n  return _persistenceKeyName(\"authEvent\"\n  /* AUTH_EVENT */\n  , auth.config.apiKey, auth.name);\n}\n\nfunction parseJsonOrNull(json) {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n} // Exported for testing\n\n\nfunction _getDeepLinkFromCallback(url) {\n  const params = searchParamsOrEmpty(url);\n  const link = params['link'] ? decodeURIComponent(params['link']) : undefined; // Double link case (automatic redirect)\n\n  const doubleDeepLink = searchParamsOrEmpty(link)['link']; // iOS custom scheme links.\n\n  const iOSDeepLink = params['deep_link_id'] ? decodeURIComponent(params['deep_link_id']) : undefined;\n  const iOSDoubleDeepLink = searchParamsOrEmpty(iOSDeepLink)['link'];\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n/**\r\n * Optimistically tries to get search params from a string, or else returns an\r\n * empty search params object.\r\n */\n\n\nfunction searchParamsOrEmpty(url) {\n  if (!(url === null || url === void 0 ? void 0 : url.includes('?'))) {\n    return {};\n  }\n\n  const [_, ...rest] = url.split('?');\n  return querystringDecode(rest.join('?'));\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * How long to wait for the initial auth event before concluding no\r\n * redirect pending\r\n */\n\n\nconst INITIAL_EVENT_TIMEOUT_MS = 500;\n\nclass CordovaPopupRedirectResolver {\n  constructor() {\n    this._redirectPersistence = browserSessionPersistence;\n    this._shouldInitProactively = true; // This is lightweight for Cordova\n\n    this.eventManagers = new Map();\n    this.originValidationPromises = {};\n    this._completeRedirectFn = _getRedirectResult;\n  }\n\n  async _initialize(auth) {\n    const key = auth._key();\n\n    let manager = this.eventManagers.get(key);\n\n    if (!manager) {\n      manager = new CordovaAuthEventManager(auth);\n      this.eventManagers.set(key, manager);\n      this.attachCallbackListeners(auth, manager);\n    }\n\n    return manager;\n  }\n\n  _openPopup(auth) {\n    _fail(auth, \"operation-not-supported-in-this-environment\"\n    /* OPERATION_NOT_SUPPORTED */\n    );\n  }\n\n  async _openRedirect(auth, provider, authType, eventId) {\n    _checkCordovaConfiguration(auth);\n\n    const manager = await this._initialize(auth);\n    await manager.initialized(); // Reset the persisted redirect states. This does not matter on Web where\n    // the redirect always blows away application state entirely. On Cordova,\n    // the app maintains control flow through the redirect.\n\n    manager.resetRedirect();\n\n    _clearRedirectOutcomes();\n\n    await this._originValidation(auth);\n\n    const event = _generateNewEvent(auth, authType, eventId);\n\n    await _savePartialEvent(auth, event);\n    const url = await _generateHandlerUrl(auth, event, provider);\n    const iabRef = await _performRedirect(url);\n    return _waitForAppResume(auth, manager, iabRef);\n  }\n\n  _isIframeWebStorageSupported(_auth, _cb) {\n    throw new Error('Method not implemented.');\n  }\n\n  _originValidation(auth) {\n    const key = auth._key();\n\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n\n    return this.originValidationPromises[key];\n  }\n\n  attachCallbackListeners(auth, manager) {\n    // Get the global plugins\n    const {\n      universalLinks,\n      handleOpenURL,\n      BuildInfo\n    } = _cordovaWindow();\n\n    const noEventTimeout = setTimeout(async () => {\n      // We didn't see that initial event. Clear any pending object and\n      // dispatch no event\n      await _getAndRemoveEvent(auth);\n      manager.onEvent(generateNoEvent());\n    }, INITIAL_EVENT_TIMEOUT_MS);\n\n    const universalLinksCb = async eventData => {\n      // We have an event so we can clear the no event timeout\n      clearTimeout(noEventTimeout);\n      const partialEvent = await _getAndRemoveEvent(auth);\n      let finalEvent = null;\n\n      if (partialEvent && (eventData === null || eventData === void 0 ? void 0 : eventData['url'])) {\n        finalEvent = _eventFromPartialAndUrl(partialEvent, eventData['url']);\n      } // If finalEvent is never filled, trigger with no event\n\n\n      manager.onEvent(finalEvent || generateNoEvent());\n    }; // Universal links subscriber doesn't exist for iOS, so we need to check\n\n\n    if (typeof universalLinks !== 'undefined' && typeof universalLinks.subscribe === 'function') {\n      universalLinks.subscribe(null, universalLinksCb);\n    } // iOS 7 or 8 custom URL schemes.\n    // This is also the current default behavior for iOS 9+.\n    // For this to work, cordova-plugin-customurlscheme needs to be installed.\n    // https://github.com/EddyVerbruggen/Custom-URL-scheme\n    // Do not overwrite the existing developer's URL handler.\n\n\n    const existingHandleOpenURL = handleOpenURL;\n    const packagePrefix = `${BuildInfo.packageName.toLowerCase()}://`;\n\n    _cordovaWindow().handleOpenURL = async url => {\n      if (url.toLowerCase().startsWith(packagePrefix)) {\n        // We want this intentionally to float\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        universalLinksCb({\n          url\n        });\n      } // Call the developer's handler if it is present.\n\n\n      if (typeof existingHandleOpenURL === 'function') {\n        try {\n          existingHandleOpenURL(url);\n        } catch (e) {\n          // This is a developer error. Don't stop the flow of the SDK.\n          console.error(e);\n        }\n      }\n    };\n  }\n\n}\n/**\r\n * An implementation of {@link PopupRedirectResolver} suitable for Cordova\r\n * based applications.\r\n *\r\n * @public\r\n */\n\n\nconst cordovaPopupRedirectResolver = CordovaPopupRedirectResolver;\n\nfunction generateNoEvent() {\n  return {\n    type: \"unknown\"\n    /* UNKNOWN */\n    ,\n    eventId: null,\n    sessionId: null,\n    urlResponse: null,\n    postBody: null,\n    tenantId: null,\n    error: _createError(\"no-auth-event\"\n    /* NO_AUTH_EVENT */\n    )\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n// It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it out\n// of autogenerated documentation pages to reduce accidental misuse.\n\n\nfunction addFrameworkForLogging(auth, framework) {\n  _castAuth(auth)._logFramework(framework);\n}\n\nexport { addFrameworkForLogging, cordovaPopupRedirectResolver };","map":{"version":3,"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;SAmDgBA,iBAAc;AAC5B,SAAQC,MAAR;AACF;ACrDA;;;;;;;;;;;;;;;;;AAmCA;;;;;;AAIA,MAAMC,mBAAmB,GAAG,IAA5B;AAEA;;;;AAGO,eAAeC,mBAAf,CACLC,IADK,EAELC,KAFK,EAGLC,QAHK,EAGiB;SAAA;;;AAGtB,QAAM;AAAEC;AAAF,MAAgBP,cAAc,EAApC;;AACAQ,aAAW,CAACH,KAAK,CAACI,SAAP,EAAkB,wCAAlB,CAAX;AACA,QAAMC,aAAa,GAAG,MAAMC,aAAa,CAACN,KAAK,CAACI,SAAP,CAAzC;AAEA,QAAMG,gBAAgB,GAA2B,EAAjD;;AACA,MAAIC,MAAM,EAAV,EAAc;;AAEZD,oBAAgB,CAAC,KAAD,CAAhB,GAA0BL,SAAS,CAACO,WAApC;AACD,GAHD,MAGO,IAAIC,UAAU,EAAd,EAAkB;;AAEvBH,oBAAgB,CAAC,KAAD,CAAhB,GAA0BL,SAAS,CAACO,WAApC;AACD,GAHM,MAGA;AACLE,SAAK,CAACZ,IAAD,EAAK;AAAA;AAAL,KAAL;AACD,GAhBqB;;;AAmBtB,MAAIG,SAAS,CAACU,WAAd,EAA2B;AACzBL,oBAAgB,CAAC,gBAAD,CAAhB,GAAqCL,SAAS,CAACU,WAA/C;AACD,GArBqB;;;AAwBtBL,kBAAgB,CAAC,WAAD,CAAhB,GAAgCF,aAAhC;AACA,SAAOQ,eAAe,CACpBd,IADoB,EAEpBE,QAFoB,EAGpBD,KAAK,CAACc,IAHc,EAIpBC,SAJoB,EAKpB,WAAK,CAACC,OAAN,MAAa,IAAb,IAAaC,aAAb,GAAaA,EAAb,GAAiBF,SALG,EAMpBR,gBANoB,CAAtB;AAQD;AAED;;;;;AAGO,eAAeW,eAAf,CAA+BnB,IAA/B,EAAiD;AACtD,QAAM;AAAEG;AAAF,MAAgBP,cAAc,EAApC;;AACA,QAAMwB,OAAO,GAA4B,EAAzC;;AACA,MAAIX,MAAM,EAAV,EAAc;AACZW,WAAO,CAACC,WAAR,GAAsBlB,SAAS,CAACO,WAAhC;AACD,GAFD,MAEO,IAAIC,UAAU,EAAd,EAAkB;AACvBS,WAAO,CAACE,kBAAR,GAA6BnB,SAAS,CAACO,WAAvC;AACD,GAFM,MAEA;AACLE,SAAK,CAACZ,IAAD,EAAK;AAAA;AAAL,KAAL;AACD,GATqD;;;AAYtD,QAAMuB,iBAAiB,CAACvB,IAAD,EAAOoB,OAAP,CAAvB;AACD;;SAEeI,iBACdC,YAAkB;;AAGlB,QAAM;AAAEC;AAAF,MAAc9B,cAAc,EAAlC;;AAEA,SAAO,IAAI+B,OAAJ,CAAYC,OAAO;AACxBF,WAAO,CAACG,OAAR,CAAgBC,UAAhB,CAA2BC,WAA3B,CAAuCC,qBAAqB;AAC1D,UAAIC,MAAM,GAA2B,IAArC;;AACA,UAAID,qBAAJ,EAA2B;AACzBN,eAAO,CAACG,OAAR,CAAgBC,UAAhB,CAA2BI,OAA3B,CAAmCT,UAAnC;AACD,OAFD,MAEO;;AAELQ,cAAM,GAAGP,OAAO,CAACS,YAAR,CAAqBC,IAArB,CACPX,UADO,EAEPY,UAAU,KAAK,QAAL,GAAgB,SAFnB,EAGP,cAHO,CAAT;AAKD;;AACDT,aAAO,CAACK,MAAD,CAAP;AACD,KAbD;AAcD,GAfM,CAAP;AAgBD;AAQD;;;;;;;;AAMO,eAAeK,iBAAf,CACLtC,IADK,EAELuC,aAFK,EAGLN,MAHK,EAGyB;;AAG9B,QAAM;AAAEP;AAAF,MAAc9B,cAAc,EAAlC;;AAEA,MAAI4C,OAAO,GAAG,OAAc,CAA5B;;AACA,MAAI;AACF,UAAM,IAAIb,OAAJ,CAAkB,CAACC,OAAD,EAAUa,MAAV,KAAgB;AACtC,UAAIC,YAAY,GAAkB,IAAlC,CADsC;;AAItC,eAASC,aAAT,GAAsB;eAAA;;;;AAGpBf,eAAO;AACP,cAAMgB,eAAe,GAAG,aAAO,CAACf,OAAR,CAAgBC,UAAhB,MAA0B,IAA1B,IAA0BZ,aAA1B,GAA0B,MAA1B,GAA0BA,GAAE2B,KAApD;;AACA,YAAI,OAAOD,eAAP,KAA2B,UAA/B,EAA2C;AACzCA,yBAAe;AAChB,SAPmB;;;;AAUpB,YAAI,QAAOX,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEY,KAAf,MAAyB,UAA7B,EAAyC;AACvCZ,gBAAM,CAACY,KAAP;AACD;AACF;;AAED,eAASC,OAAT,GAAgB;AACd,YAAIJ,YAAJ,EAAkB;;AAEhB;AACD;;AAEDA,oBAAY,GAAG7C,MAAM,CAACkD,UAAP,CAAkB;;AAE/BN,gBAAM,CAACO,YAAY,CAAChD,IAAD,EAAK;AAAA;AAAL,WAAb,CAAN;AACD,SAHc,EAGZF,mBAHY,CAAf;AAID;;AAED,eAASmD,iBAAT,GAA0B;AACxB,YAAI,SAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEC,eAAV,MAA8B,SAAlC,EAA6C;AAC3CJ,iBAAO;AACR;AACF,OAnCqC;;;;AAuCtCP,mBAAa,CAACY,kBAAd,CAAiCR,aAAjC,EAvCsC;;AA0CtCS,cAAQ,CAACC,gBAAT,CAA0B,QAA1B,EAAoCP,OAApC,EAA6C,KAA7C;;AACA,UAAInC,UAAU,EAAd,EAAkB;AAChByC,gBAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8CJ,iBAA9C,EAAiE,KAAjE;AACD,OA7CqC;;;AAgDtCT,aAAO,GAAG;AACRD,qBAAa,CAACe,qBAAd,CAAoCX,aAApC;AACAS,gBAAQ,CAACG,mBAAT,CAA6B,QAA7B,EAAuCT,OAAvC,EAAgD,KAAhD;AACAM,gBAAQ,CAACG,mBAAT,CACE,kBADF,EAEEN,iBAFF,EAGE,KAHF;;AAKA,YAAIP,YAAJ,EAAkB;AAChB7C,gBAAM,CAAC2D,YAAP,CAAoBd,YAApB;AACD;AACF,OAXD;AAYD,KA5DK,CAAN;AA6DD,GA9DD,SA8DU;AACRF,WAAO;AACR;AACF;AAED;;;;;;;SAKgBiB,2BAA2BzD,MAAkB;;;AAC3D,QAAM0D,GAAG,GAAG9D,cAAc,EAA1B,CAD2D;;;;;;;AAO3D+D,SAAO,CACL,QAAO,SAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAEC,cAAL,MAAmB,IAAnB,IAAmB1C,aAAnB,GAAmB,MAAnB,GAAmBA,GAAE2C,SAA5B,MAA0C,UADrC,EAEL7D,IAFK,EAED;AAAA;AAFC,IAIL;AACE8D,iBAAa,EAAE;AADjB,GAJK,CAAP,CAP2D;;;AAiB3DH,SAAO,CACL,QAAO,SAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAExD,SAAL,MAAc,IAAd,IAAc4D,aAAd,GAAc,MAAd,GAAcA,GAAErD,WAAvB,MAAuC,WADlC,EAELV,IAFK,EAED;AAAA;AAFC,IAIL;AACE8D,iBAAa,EAAE;AADjB,GAJK,CAAP,CAjB2D;;;AA2B3DH,SAAO,CACL,QAAO,qBAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAEjC,OAAL,MAAY,IAAZ,IAAYsC,aAAZ,GAAY,MAAZ,GAAYA,GAAEnC,OAAd,MAAqB,IAArB,IAAqBoC,aAArB,GAAqB,MAArB,GAAqBA,GAAEnC,UAAvB,MAAiC,IAAjC,IAAiCoC,aAAjC,GAAiC,MAAjC,GAAiCA,GAAEhC,OAA1C,MAAsD,UADjD,EAELlC,IAFK,EAED;AAAA;AAFC,IAIL;AACE8D,iBAAa,EAAE;AADjB,GAJK,CAAP;;AAQAH,SAAO,CACL,QAAO,qBAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAEjC,OAAL,MAAY,IAAZ,IAAYyC,aAAZ,GAAY,MAAZ,GAAYA,GAAEtC,OAAd,MAAqB,IAArB,IAAqBuC,aAArB,GAAqB,MAArB,GAAqBA,GAAEtC,UAAvB,MAAiC,IAAjC,IAAiCuC,aAAjC,GAAiC,MAAjC,GAAiCA,GAAEtC,WAA1C,MAA0D,UADrD,EAEL/B,IAFK,EAED;AAAA;AAFC,IAIL;AACE8D,iBAAa,EAAE;AADjB,GAJK,CAAP,CAnC2D;;;AA6C3DH,SAAO,CACL,QAAO,eAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAEjC,OAAL,MAAY,IAAZ,IAAY4C,aAAZ,GAAY,MAAZ,GAAYA,GAAEnC,YAAd,MAA0B,IAA1B,IAA0BoC,aAA1B,GAA0B,MAA1B,GAA0BA,GAAEnC,IAAnC,MAA4C,UADvC,EAELpC,IAFK,EAED;AAAA;AAFC,IAIL;AACE8D,iBAAa,EAAE;AADjB,GAJK,CAAP;AAQD;AAED;;;;;;;AAKA,eAAevD,aAAf,CAA6BF,SAA7B,EAA8C;AAC5C,QAAMmE,KAAK,GAAGC,mBAAmB,CAACpE,SAAD,CAAjC,CAD4C;;;;;AAO5C,QAAMqE,GAAG,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqB,SAArB,EAAgCL,KAAhC,CAAlB;AACA,QAAMM,GAAG,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAIC,UAAJ,CAAeP,GAAf,CAAX,CAAZ;AACA,SAAOI,GAAG,CAACI,GAAJ,CAAQC,GAAG,IAAIA,GAAG,CAACC,QAAJ,CAAa,EAAb,EAAiBC,QAAjB,CAA0B,CAA1B,EAA6B,GAA7B,CAAf,EAAkDC,IAAlD,CAAuD,EAAvD,CAAP;AACD;;AAED,SAASb,mBAAT,CAA6Bc,GAA7B,EAAwC;;;AAGtCnF,aAAW,CACT,eAAeoF,IAAf,CAAoBD,GAApB,CADS,EAET,wCAFS,CAAX;;AAIA,MAAI,OAAOE,WAAP,KAAuB,WAA3B,EAAwC;AACtC,WAAO,IAAIA,WAAJ,GAAkBC,MAAlB,CAAyBH,GAAzB,CAAP;AACD;;AAED,QAAMI,IAAI,GAAG,IAAIC,WAAJ,CAAgBL,GAAG,CAACM,MAApB,CAAb;AACA,QAAMC,IAAI,GAAG,IAAIb,UAAJ,CAAeU,IAAf,CAAb;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,GAAG,CAACM,MAAxB,EAAgCE,CAAC,EAAjC,EAAqC;AACnCD,QAAI,CAACC,CAAD,CAAJ,GAAUR,GAAG,CAACS,UAAJ,CAAeD,CAAf,CAAV;AACD;;AACD,SAAOD,IAAP;AACF;AClTA;;;;;;;;;;;;;;;;;;AA+BA,MAAMG,iBAAiB,GAAG,EAA1B;AAEA;;MACaC,gCAAgCC,iBAAgB;AAA7DC;;AACmB,4BAAmB,IAAIC,GAAJ,EAAnB;AAET,uBAAc,IAAI1E,OAAJ,CAAkBC,OAAO;AAC7C,WAAK0E,gBAAL,GAAwB1E,OAAxB;AACD,KAFqB,CAAd;AA6BT;;AAzBCuB,oBAAkB,CAACoD,EAAD,EAA2B;AAC3C,SAAKC,gBAAL,CAAsBC,GAAtB,CAA0BF,EAA1B;AACD;;AAEDjD,uBAAqB,CAACiD,EAAD,EAA2B;AAC9C,SAAKC,gBAAL,CAAsBE,MAAtB,CAA6BH,EAA7B;AACD,GAb0D;;;;AAiB3DI,eAAa;AACX,SAAKC,mBAAL,GAA2B,IAA3B;AACA,SAAKC,2BAAL,GAAmC,KAAnC;AACD;;;;AAGDC,SAAO,CAAC7G,KAAD,EAAiB;AACtB,SAAKqG,gBAAL;AACA,SAAKE,gBAAL,CAAsBO,OAAtB,CAA8BR,EAAE,IAAIA,EAAE,CAACtG,KAAD,CAAtC;AACA,WAAO,MAAM6G,OAAN,CAAc7G,KAAd,CAAP;AACD;;AAEgB,QAAX+G,WAAW;AACf,UAAM,KAAKC,WAAX;AACD;;AA/B0D;AAkC7D;;;;;SAGgBC,kBACdlH,MACAe,MAC6B;AAAA,MAA7BE,OAA6B,uEAAJ,IAAI;AAE7B,SAAO;AACLF,QADK;AAELE,WAFK;AAGLkG,eAAW,EAAE,IAHR;AAIL9G,aAAS,EAAE+G,iBAAiB,EAJvB;AAKLC,YAAQ,EAAE,IALL;AAMLC,YAAQ,EAAEtH,IAAI,CAACsH,QANV;AAOLC,SAAK,EAAEvE,YAAY,CAAChD,IAAD,EAAK;AAAA;AAAL;AAPd,GAAP;AASD;;SAEewH,kBACdxH,MACAC,OAAgB;AAEhB,SAAOwH,OAAO,GAAGC,IAAV,CACLC,cAAc,CAAC3H,IAAD,CADT,EAEJC,KAFI,CAAP;AAID;;AAEM,eAAe2H,kBAAf,CACL5H,IADK,EACa;AAElB,QAAMC,KAAK,GAAI,MAAMwH,OAAO,GAAGI,IAAV,CACnBF,cAAc,CAAC3H,IAAD,CADK,CAArB;;AAGA,MAAIC,KAAJ,EAAW;AACT,UAAMwH,OAAO,GAAGK,OAAV,CAAkBH,cAAc,CAAC3H,IAAD,CAAhC,CAAN;AACD;;AACD,SAAOC,KAAP;AACD;;SAEe8H,wBACdC,cACAC,KAAW;aAAA;;;AAGX,QAAMC,WAAW,GAAGC,wBAAwB,CAACF,GAAD,CAA5C,CAHW;;;;;;;AASX,MAAIC,WAAW,CAACE,QAAZ,CAAqB,mBAArB,CAAJ,EAA+C;;;;AAI7C,UAAMC,MAAM,GAAGC,mBAAmB,CAACJ,WAAD,CAAlC,CAJ6C;;AAM7C,UAAMK,WAAW,GAAGF,MAAM,CAAC,eAAD,CAAN,GAChBG,eAAe,CAACC,kBAAkB,CAACJ,MAAM,CAAC,eAAD,CAAP,CAAnB,CADC,GAEhB,IAFJ;AAGA,UAAMK,IAAI,GAAG,uBAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAG,MAAH,CAAX,MAAqB,IAArB,IAAqBxH,aAArB,GAAqB,MAArB,GAAqBA,GAAEyH,KAAF,CAAQ,OAAR,CAArB,MAAqC,IAArC,IAAqC5E,aAArC,GAAqC,MAArC,GAAqCA,GAAG,CAAH,CAAlD;AACA,UAAMwD,KAAK,GAAGmB,IAAI,GAAG1F,YAAY,CAAC0F,IAAD,CAAf,GAAwB,IAA1C;;AACA,QAAInB,KAAJ,EAAW;AACT,aAAO;AACLxG,YAAI,EAAEiH,YAAY,CAACjH,IADd;AAELE,eAAO,EAAE+G,YAAY,CAAC/G,OAFjB;AAGLqG,gBAAQ,EAAEU,YAAY,CAACV,QAHlB;AAILC,aAJK;AAKLJ,mBAAW,EAAE,IALR;AAML9G,iBAAS,EAAE,IANN;AAOLgH,gBAAQ,EAAE;AAPL,OAAP;AASD,KAVD,MAUO;AACL,aAAO;AACLtG,YAAI,EAAEiH,YAAY,CAACjH,IADd;AAELE,eAAO,EAAE+G,YAAY,CAAC/G,OAFjB;AAGLqG,gBAAQ,EAAEU,YAAY,CAACV,QAHlB;AAILjH,iBAAS,EAAE2H,YAAY,CAAC3H,SAJnB;AAKL8G,mBAAW,EAAEe,WALR;AAMLb,gBAAQ,EAAE;AANL,OAAP;AAQD;AACF;;AAED,SAAO,IAAP;AACD;;AAED,SAASD,iBAAT,GAA0B;AACxB,QAAMwB,KAAK,GAAG,EAAd;AACA,QAAMC,YAAY,GAChB,gEADF;;AAEA,OAAK,IAAI9C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,iBAApB,EAAuCF,CAAC,EAAxC,EAA4C;AAC1C,UAAM+C,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,YAAY,CAAChD,MAAxC,CAAZ;AACA+C,SAAK,CAACM,IAAN,CAAWL,YAAY,CAACM,MAAb,CAAoBL,GAApB,CAAX;AACD;;AACD,SAAOF,KAAK,CAACtD,IAAN,CAAW,EAAX,CAAP;AACD;;AAED,SAASmC,OAAT,GAAgB;AACd,SAAO2B,YAAY,CAACC,uBAAD,CAAnB;AACD;;AAED,SAAS1B,cAAT,CAAwB3H,IAAxB,EAA0C;AACxC,SAAOsJ,mBAAmB;AAAA;AAAA,IAAqBtJ,IAAI,CAACuJ,MAAL,CAAYC,MAAjC,EAAyCxJ,IAAI,CAACyJ,IAA9C,CAA1B;AACD;;AAED,SAASjB,eAAT,CAAyBkB,IAAzB,EAAqC;AACnC,MAAI;AACF,WAAOC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;AACD,GAFD,CAEE,OAAOG,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF,C,CAED;;;SACgB1B,yBAAyBF,KAAW;AAClD,QAAMI,MAAM,GAAGC,mBAAmB,CAACL,GAAD,CAAlC;AACA,QAAM6B,IAAI,GAAGzB,MAAM,CAAC,MAAD,CAAN,GAAiBI,kBAAkB,CAACJ,MAAM,CAAC,MAAD,CAAP,CAAnC,GAAsDrH,SAAnE,CAFkD;;AAIlD,QAAM+I,cAAc,GAAGzB,mBAAmB,CAACwB,IAAD,CAAnB,CAA0B,MAA1B,CAAvB,CAJkD;;AAMlD,QAAME,WAAW,GAAG3B,MAAM,CAAC,cAAD,CAAN,GAChBI,kBAAkB,CAACJ,MAAM,CAAC,cAAD,CAAP,CADF,GAEhBrH,SAFJ;AAGA,QAAMiJ,iBAAiB,GAAG3B,mBAAmB,CAAC0B,WAAD,CAAnB,CAAiC,MAAjC,CAA1B;AACA,SAAOC,iBAAiB,IAAID,WAArB,IAAoCD,cAApC,IAAsDD,IAAtD,IAA8D7B,GAArE;AACD;AAED;;;;;;AAIA,SAASK,mBAAT,CAA6BL,GAA7B,EAAoD;AAClD,MAAI,EAACA,GAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAEG,QAAL,CAAc,GAAd,CAAD,CAAJ,EAAyB;AACvB,WAAO,EAAP;AACD;;AAED,QAAM,CAAC8B,CAAD,EAAI,GAAGC,IAAP,IAAelC,GAAG,CAACU,KAAJ,CAAU,GAAV,CAArB;AACA,SAAOyB,iBAAiB,CAACD,IAAI,CAAC7E,IAAL,CAAU,GAAV,CAAD,CAAxB;AACF;AChNA;;;;;;;;;;;;;;;;;AA+CA;;;;;;AAIA,MAAM+E,wBAAwB,GAAG,GAAjC;;AAEA,MAAMC,4BAAN,CAAkC;AAAlClE;AACW,gCAAuBmE,yBAAvB;AACA,kCAAyB,IAAzB,CAFX,CAEyC;;AACtB,yBAAgB,IAAIC,GAAJ,EAAhB;AACA,oCAA0D,EAA1D;AAEjB,+BAAsBC,kBAAtB;AAwHD;;AAtHkB,QAAXC,WAAW,CAAC1K,IAAD,EAAmB;AAClC,UAAM2K,GAAG,GAAG3K,IAAI,CAAC4K,IAAL,EAAZ;;AACA,QAAIC,OAAO,GAAG,KAAKC,aAAL,CAAmBC,GAAnB,CAAuBJ,GAAvB,CAAd;;AACA,QAAI,CAACE,OAAL,EAAc;AACZA,aAAO,GAAG,IAAI3E,uBAAJ,CAA4BlG,IAA5B,CAAV;AACA,WAAK8K,aAAL,CAAmBE,GAAnB,CAAuBL,GAAvB,EAA4BE,OAA5B;AACA,WAAKI,uBAAL,CAA6BjL,IAA7B,EAAmC6K,OAAnC;AACD;;AACD,WAAOA,OAAP;AACD;;AAEDK,YAAU,CAAClL,IAAD,EAAmB;AAC3BY,SAAK,CAACZ,IAAD,EAAK;AAAA;AAAL,KAAL;AACD;;AAEkB,QAAbmL,aAAa,CACjBnL,IADiB,EAEjBE,QAFiB,EAGjBkL,QAHiB,EAIjBnK,OAJiB,EAID;AAEhBwC,8BAA0B,CAACzD,IAAD,CAA1B;;AACA,UAAM6K,OAAO,GAAG,MAAM,KAAKH,WAAL,CAAiB1K,IAAjB,CAAtB;AACA,UAAM6K,OAAO,CAAC7D,WAAR,EAAN,CAJgB;;;;AAShB6D,WAAO,CAAClE,aAAR;;AACA0E,0BAAsB;;AAEtB,UAAM,KAAKC,iBAAL,CAAuBtL,IAAvB,CAAN;;AAEA,UAAMC,KAAK,GAAGiH,iBAAiB,CAAClH,IAAD,EAAOoL,QAAP,EAAiBnK,OAAjB,CAA/B;;AACA,UAAMuG,iBAAiB,CAACxH,IAAD,EAAOC,KAAP,CAAvB;AACA,UAAMgI,GAAG,GAAG,MAAMlI,mBAAmB,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,CAArC;AACA,UAAM+B,MAAM,GAAG,MAAMT,gBAAgB,CAACyG,GAAD,CAArC;AACA,WAAO3F,iBAAiB,CAACtC,IAAD,EAAO6K,OAAP,EAAgB5I,MAAhB,CAAxB;AACD;;AAEDsJ,8BAA4B,CAC1BC,KAD0B,EAE1BC,GAF0B,EAEQ;AAElC,UAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAEDJ,mBAAiB,CAACtL,IAAD,EAAmB;AAClC,UAAM2K,GAAG,GAAG3K,IAAI,CAAC4K,IAAL,EAAZ;;AACA,QAAI,CAAC,KAAKe,wBAAL,CAA8BhB,GAA9B,CAAL,EAAyC;AACvC,WAAKgB,wBAAL,CAA8BhB,GAA9B,IAAqCxJ,eAAe,CAACnB,IAAD,CAApD;AACD;;AAED,WAAO,KAAK2L,wBAAL,CAA8BhB,GAA9B,CAAP;AACD;;AAEOM,yBAAuB,CAC7BjL,IAD6B,EAE7B6K,OAF6B,EAEJ;;AAGzB,UAAM;AAAEjH,oBAAF;AAAkBgI,mBAAlB;AAAiCzL;AAAjC,QAA+CP,cAAc,EAAnE;;AAEA,UAAMiM,cAAc,GAAG9I,UAAU,CAAC;;;AAGhC,YAAM6E,kBAAkB,CAAC5H,IAAD,CAAxB;AACA6K,aAAO,CAAC/D,OAAR,CAAgBgF,eAAe,EAA/B;AACD,KALgC,EAK9BzB,wBAL8B,CAAjC;;AAOA,UAAM0B,gBAAgB,GAAG,MACvBC,SADuB,IACiB;;AAGxCxI,kBAAY,CAACqI,cAAD,CAAZ;AAEA,YAAM7D,YAAY,GAAG,MAAMJ,kBAAkB,CAAC5H,IAAD,CAA7C;AACA,UAAIiM,UAAU,GAAqB,IAAnC;;AACA,UAAIjE,YAAY,KAAIgE,SAAS,SAAT,aAAS,WAAT,GAAS,MAAT,YAAS,CAAG,KAAH,CAAb,CAAhB,EAAwC;AACtCC,kBAAU,GAAGlE,uBAAuB,CAACC,YAAD,EAAegE,SAAS,CAAC,KAAD,CAAxB,CAApC;AACD,OATuC;;;AAYxCnB,aAAO,CAAC/D,OAAR,CAAgBmF,UAAU,IAAIH,eAAe,EAA7C;AACD,KAdD,CAZyB;;;AA6BzB,QACE,OAAOlI,cAAP,KAA0B,WAA1B,IACA,OAAOA,cAAc,CAACC,SAAtB,KAAoC,UAFtC,EAGE;AACAD,oBAAc,CAACC,SAAf,CAAyB,IAAzB,EAA+BkI,gBAA/B;AACD,KAlCwB;;;;;;;AAyCzB,UAAMG,qBAAqB,GAAGN,aAA9B;AACA,UAAMO,aAAa,GAAG,GAAGhM,SAAS,CAACO,WAAV,CAAsB0L,WAAtB,EAAmC,KAA5D;;AACAxM,kBAAc,GAAGgM,aAAjB,GAAiC,MAAM3D,GAAN,IAAS;AACxC,UAAIA,GAAG,CAACmE,WAAJ,GAAkBC,UAAlB,CAA6BF,aAA7B,CAAJ,EAAiD;;;AAG/CJ,wBAAgB,CAAC;AAAE9D;AAAF,SAAD,CAAhB;AACD,OALuC;;;AAOxC,UAAI,OAAOiE,qBAAP,KAAiC,UAArC,EAAiD;AAC/C,YAAI;AACFA,+BAAqB,CAACjE,GAAD,CAArB;AACD,SAFD,CAEE,OAAO4B,CAAP,EAAU;;AAEVyC,iBAAO,CAAC/E,KAAR,CAAcsC,CAAd;AACD;AACF;AACF,KAfD;AAgBD;;AA7H+B;AAgIlC;;;;;;;;MAMa0C,4BAA4B,GACvCjC;;AAEF,SAASwB,eAAT,GAAwB;AACtB,SAAO;AACL/K,QAAI;AAAA;AADC;AAELE,WAAO,EAAE,IAFJ;AAGLZ,aAAS,EAAE,IAHN;AAIL8G,eAAW,EAAE,IAJR;AAKLE,YAAQ,EAAE,IALL;AAMLC,YAAQ,EAAE,IANL;AAOLC,SAAK,EAAEvE,YAAY;AAAA;AAAA;AAPd,GAAP;AASF;ACxMA;;;;;;;;;;;;;;;;AAmDA;AACA;AACA;;;SACgBwJ,uBAAuBxM,MAAYyM,WAAiB;AAClEC,WAAS,CAAC1M,IAAD,CAAT,CAAgB2M,aAAhB,CAA8BF,SAA9B;AACF","names":["_cordovaWindow","window","REDIRECT_TIMEOUT_MS","_generateHandlerUrl","auth","event","provider","BuildInfo","debugAssert","sessionId","sessionDigest","computeSha256","additionalParams","_isIOS","packageName","_isAndroid","_fail","displayName","_getRedirectUrl","type","undefined","eventId","_a","_validateOrigin","request","iosBundleId","androidPackageName","_getProjectConfig","_performRedirect","handlerUrl","cordova","Promise","resolve","plugins","browsertab","isAvailable","browserTabIsAvailable","iabRef","openUrl","InAppBrowser","open","_isIOS7Or8","_waitForAppResume","eventListener","cleanup","reject","onCloseTimer","authEventSeen","closeBrowserTab","close","resumed","setTimeout","_createError","visibilityChanged","visibilityState","addPassiveListener","document","addEventListener","removePassiveListener","removeEventListener","clearTimeout","_checkCordovaConfiguration","win","_assert","universalLinks","subscribe","missingPlugin","_b","_c","_d","_e","_f","_g","_h","_j","_k","bytes","stringToArrayBuffer","buf","crypto","subtle","digest","arr","Array","from","Uint8Array","map","num","toString","padStart","join","str","test","TextEncoder","encode","buff","ArrayBuffer","length","view","i","charCodeAt","SESSION_ID_LENGTH","CordovaAuthEventManager","AuthEventManager","constructor","Set","resolveInialized","cb","passiveListeners","add","delete","resetRedirect","queuedRedirectEvent","hasHandledPotentialRedirect","onEvent","forEach","initialized","initPromise","_generateNewEvent","urlResponse","generateSessionId","postBody","tenantId","error","_savePartialEvent","storage","_set","persistenceKey","_getAndRemoveEvent","_get","_remove","_eventFromPartialAndUrl","partialEvent","url","callbackUrl","_getDeepLinkFromCallback","includes","params","searchParamsOrEmpty","errorObject","parseJsonOrNull","decodeURIComponent","code","split","chars","allowedChars","idx","Math","floor","random","push","charAt","_getInstance","browserLocalPersistence","_persistenceKeyName","config","apiKey","name","json","JSON","parse","e","link","doubleDeepLink","iOSDeepLink","iOSDoubleDeepLink","_","rest","querystringDecode","INITIAL_EVENT_TIMEOUT_MS","CordovaPopupRedirectResolver","browserSessionPersistence","Map","_getRedirectResult","_initialize","key","_key","manager","eventManagers","get","set","attachCallbackListeners","_openPopup","_openRedirect","authType","_clearRedirectOutcomes","_originValidation","_isIframeWebStorageSupported","_auth","_cb","Error","originValidationPromises","handleOpenURL","noEventTimeout","generateNoEvent","universalLinksCb","eventData","finalEvent","existingHandleOpenURL","packagePrefix","toLowerCase","startsWith","console","cordovaPopupRedirectResolver","addFrameworkForLogging","framework","_castAuth","_logFramework"],"sources":["/Users/rim.sh/Desktop/term4/4537ISA/project/ISAproject/node_modules/@firebase/auth/src/platform_cordova/plugins.ts","/Users/rim.sh/Desktop/term4/4537ISA/project/ISAproject/node_modules/@firebase/auth/src/platform_cordova/popup_redirect/utils.ts","/Users/rim.sh/Desktop/term4/4537ISA/project/ISAproject/node_modules/@firebase/auth/src/platform_cordova/popup_redirect/events.ts","/Users/rim.sh/Desktop/term4/4537ISA/project/ISAproject/node_modules/@firebase/auth/src/platform_cordova/popup_redirect/popup_redirect.ts","/Users/rim.sh/Desktop/term4/4537ISA/project/ISAproject/node_modules/@firebase/auth/internal/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface CordovaWindow extends Window {\n  cordova: {\n    plugins: {\n      browsertab: {\n        isAvailable(cb: (available: boolean) => void): void;\n        openUrl(url: string): void;\n        close(): void;\n      };\n    };\n\n    InAppBrowser: {\n      open(url: string, target: string, options: string): InAppBrowserRef;\n    };\n  };\n\n  universalLinks: {\n    subscribe(\n      n: null,\n      cb: (event: Record<string, string> | null) => void\n    ): void;\n  };\n\n  BuildInfo: {\n    readonly packageName: string;\n    readonly displayName: string;\n  };\n\n  handleOpenURL(url: string): void;\n}\n\nexport interface InAppBrowserRef {\n  close?: () => void;\n}\n\nexport function _cordovaWindow(): CordovaWindow {\n  return (window as unknown) as CordovaWindow;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider } from '../../model/public_types';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  debugAssert,\n  _assert,\n  _createError,\n  _fail\n} from '../../core/util/assert';\nimport { _isAndroid, _isIOS, _isIOS7Or8 } from '../../core/util/browser';\nimport { _getRedirectUrl } from '../../core/util/handler';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthEvent } from '../../model/popup_redirect';\nimport { InAppBrowserRef, _cordovaWindow } from '../plugins';\nimport {\n  GetProjectConfigRequest,\n  _getProjectConfig\n} from '../../api/project_config/get_project_config';\n\n/**\n * How long to wait after the app comes back into focus before concluding that\n * the user closed the sign in tab.\n */\nconst REDIRECT_TIMEOUT_MS = 2000;\n\n/**\n * Generates the URL for the OAuth handler.\n */\nexport async function _generateHandlerUrl(\n  auth: AuthInternal,\n  event: AuthEvent,\n  provider: AuthProvider\n): Promise<string> {\n  // Get the cordova plugins\n  const { BuildInfo } = _cordovaWindow();\n  debugAssert(event.sessionId, 'AuthEvent did not contain a session ID');\n  const sessionDigest = await computeSha256(event.sessionId);\n\n  const additionalParams: Record<string, string> = {};\n  if (_isIOS()) {\n    // iOS app identifier\n    additionalParams['ibi'] = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    // Android app identifier\n    additionalParams['apn'] = BuildInfo.packageName;\n  } else {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  // Add the display name if available\n  if (BuildInfo.displayName) {\n    additionalParams['appDisplayName'] = BuildInfo.displayName;\n  }\n\n  // Attached the hashed session ID\n  additionalParams['sessionId'] = sessionDigest;\n  return _getRedirectUrl(\n    auth,\n    provider,\n    event.type,\n    undefined,\n    event.eventId ?? undefined,\n    additionalParams\n  );\n}\n\n/**\n * Validates that this app is valid for this project configuration\n */\nexport async function _validateOrigin(auth: AuthInternal): Promise<void> {\n  const { BuildInfo } = _cordovaWindow();\n  const request: GetProjectConfigRequest = {};\n  if (_isIOS()) {\n    request.iosBundleId = BuildInfo.packageName;\n  } else if (_isAndroid()) {\n    request.androidPackageName = BuildInfo.packageName;\n  } else {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  // Will fail automatically if package name is not authorized\n  await _getProjectConfig(auth, request);\n}\n\nexport function _performRedirect(\n  handlerUrl: string\n): Promise<InAppBrowserRef | null> {\n  // Get the cordova plugins\n  const { cordova } = _cordovaWindow();\n\n  return new Promise(resolve => {\n    cordova.plugins.browsertab.isAvailable(browserTabIsAvailable => {\n      let iabRef: InAppBrowserRef | null = null;\n      if (browserTabIsAvailable) {\n        cordova.plugins.browsertab.openUrl(handlerUrl);\n      } else {\n        // TODO: Return the inappbrowser ref that's returned from the open call\n        iabRef = cordova.InAppBrowser.open(\n          handlerUrl,\n          _isIOS7Or8() ? '_blank' : '_system',\n          'location=yes'\n        );\n      }\n      resolve(iabRef);\n    });\n  });\n}\n\n// Thin interface wrapper to avoid circular dependency with ./events module\ninterface PassiveAuthEventListener {\n  addPassiveListener(cb: () => void): void;\n  removePassiveListener(cb: () => void): void;\n}\n\n/**\n * This function waits for app activity to be seen before resolving. It does\n * this by attaching listeners to various dom events. Once the app is determined\n * to be visible, this promise resolves. AFTER that resolution, the listeners\n * are detached and any browser tabs left open will be closed.\n */\nexport async function _waitForAppResume(\n  auth: AuthInternal,\n  eventListener: PassiveAuthEventListener,\n  iabRef: InAppBrowserRef | null\n): Promise<void> {\n  // Get the cordova plugins\n  const { cordova } = _cordovaWindow();\n\n  let cleanup = (): void => {};\n  try {\n    await new Promise<void>((resolve, reject) => {\n      let onCloseTimer: number | null = null;\n\n      // DEFINE ALL THE CALLBACKS =====\n      function authEventSeen(): void {\n        // Auth event was detected. Resolve this promise and close the extra\n        // window if it's still open.\n        resolve();\n        const closeBrowserTab = cordova.plugins.browsertab?.close;\n        if (typeof closeBrowserTab === 'function') {\n          closeBrowserTab();\n        }\n        // Close inappbrowser emebedded webview in iOS7 and 8 case if still\n        // open.\n        if (typeof iabRef?.close === 'function') {\n          iabRef.close();\n        }\n      }\n\n      function resumed(): void {\n        if (onCloseTimer) {\n          // This code already ran; do not rerun.\n          return;\n        }\n\n        onCloseTimer = window.setTimeout(() => {\n          // Wait two seeconds after resume then reject.\n          reject(_createError(auth, AuthErrorCode.REDIRECT_CANCELLED_BY_USER));\n        }, REDIRECT_TIMEOUT_MS);\n      }\n\n      function visibilityChanged(): void {\n        if (document?.visibilityState === 'visible') {\n          resumed();\n        }\n      }\n\n      // ATTACH ALL THE LISTENERS =====\n      // Listen for the auth event\n      eventListener.addPassiveListener(authEventSeen);\n\n      // Listen for resume and visibility events\n      document.addEventListener('resume', resumed, false);\n      if (_isAndroid()) {\n        document.addEventListener('visibilitychange', visibilityChanged, false);\n      }\n\n      // SETUP THE CLEANUP FUNCTION =====\n      cleanup = () => {\n        eventListener.removePassiveListener(authEventSeen);\n        document.removeEventListener('resume', resumed, false);\n        document.removeEventListener(\n          'visibilitychange',\n          visibilityChanged,\n          false\n        );\n        if (onCloseTimer) {\n          window.clearTimeout(onCloseTimer);\n        }\n      };\n    });\n  } finally {\n    cleanup();\n  }\n}\n\n/**\n * Checks the configuration of the Cordova environment. This has no side effect\n * if the configuration is correct; otherwise it throws an error with the\n * missing plugin.\n */\nexport function _checkCordovaConfiguration(auth: AuthInternal): void {\n  const win = _cordovaWindow();\n  // Check all dependencies installed.\n  // https://github.com/nordnet/cordova-universal-links-plugin\n  // Note that cordova-universal-links-plugin has been abandoned.\n  // A fork with latest fixes is available at:\n  // https://www.npmjs.com/package/cordova-universal-links-plugin-fix\n  _assert(\n    typeof win?.universalLinks?.subscribe === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-universal-links-plugin-fix'\n    }\n  );\n\n  // https://www.npmjs.com/package/cordova-plugin-buildinfo\n  _assert(\n    typeof win?.BuildInfo?.packageName !== 'undefined',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-buildInfo'\n    }\n  );\n\n  // https://github.com/google/cordova-plugin-browsertab\n  _assert(\n    typeof win?.cordova?.plugins?.browsertab?.openUrl === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-browsertab'\n    }\n  );\n  _assert(\n    typeof win?.cordova?.plugins?.browsertab?.isAvailable === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-browsertab'\n    }\n  );\n\n  // https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/\n  _assert(\n    typeof win?.cordova?.InAppBrowser?.open === 'function',\n    auth,\n    AuthErrorCode.INVALID_CORDOVA_CONFIGURATION,\n    {\n      missingPlugin: 'cordova-plugin-inappbrowser'\n    }\n  );\n}\n\n/**\n * Computes the SHA-256 of a session ID. The SubtleCrypto interface is only\n * available in \"secure\" contexts, which covers Cordova (which is served on a file\n * protocol).\n */\nasync function computeSha256(sessionId: string): Promise<string> {\n  const bytes = stringToArrayBuffer(sessionId);\n\n  // TODO: For IE11 crypto has a different name and this operation comes back\n  //       as an object, not a promise. This is the old proposed standard that\n  //       is used by IE11:\n  // https://www.w3.org/TR/2013/WD-WebCryptoAPI-20130108/#cryptooperation-interface\n  const buf = await crypto.subtle.digest('SHA-256', bytes);\n  const arr = Array.from(new Uint8Array(buf));\n  return arr.map(num => num.toString(16).padStart(2, '0')).join('');\n}\n\nfunction stringToArrayBuffer(str: string): Uint8Array {\n  // This function is only meant to deal with an ASCII charset and makes\n  // certain simplifying assumptions.\n  debugAssert(\n    /[0-9a-zA-Z]+/.test(str),\n    'Can only convert alpha-numeric strings'\n  );\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder().encode(str);\n  }\n\n  const buff = new ArrayBuffer(str.length);\n  const view = new Uint8Array(buff);\n  for (let i = 0; i < str.length; i++) {\n    view[i] = str.charCodeAt(i);\n  }\n  return view;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystringDecode } from '@firebase/util';\nimport { AuthEventManager } from '../../core/auth/auth_event_manager';\nimport { AuthErrorCode } from '../../core/errors';\nimport { PersistedBlob, PersistenceInternal } from '../../core/persistence';\nimport {\n  KeyName,\n  _persistenceKeyName\n} from '../../core/persistence/persistence_user_manager';\nimport { _createError } from '../../core/util/assert';\nimport { _getInstance } from '../../core/util/instantiator';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthEvent, AuthEventType } from '../../model/popup_redirect';\nimport { browserLocalPersistence } from '../../platform_browser/persistence/local_storage';\n\nconst SESSION_ID_LENGTH = 20;\n\n/** Custom AuthEventManager that adds passive listeners to events */\nexport class CordovaAuthEventManager extends AuthEventManager {\n  private readonly passiveListeners = new Set<(e: AuthEvent) => void>();\n  private resolveInialized!: () => void;\n  private initPromise = new Promise<void>(resolve => {\n    this.resolveInialized = resolve;\n  });\n\n  addPassiveListener(cb: (e: AuthEvent) => void): void {\n    this.passiveListeners.add(cb);\n  }\n\n  removePassiveListener(cb: (e: AuthEvent) => void): void {\n    this.passiveListeners.delete(cb);\n  }\n\n  // In a Cordova environment, this manager can live through multiple redirect\n  // operations\n  resetRedirect(): void {\n    this.queuedRedirectEvent = null;\n    this.hasHandledPotentialRedirect = false;\n  }\n\n  /** Override the onEvent method */\n  onEvent(event: AuthEvent): boolean {\n    this.resolveInialized();\n    this.passiveListeners.forEach(cb => cb(event));\n    return super.onEvent(event);\n  }\n\n  async initialized(): Promise<void> {\n    await this.initPromise;\n  }\n}\n\n/**\n * Generates a (partial) {@link AuthEvent}.\n */\nexport function _generateNewEvent(\n  auth: AuthInternal,\n  type: AuthEventType,\n  eventId: string | null = null\n): AuthEvent {\n  return {\n    type,\n    eventId,\n    urlResponse: null,\n    sessionId: generateSessionId(),\n    postBody: null,\n    tenantId: auth.tenantId,\n    error: _createError(auth, AuthErrorCode.NO_AUTH_EVENT)\n  };\n}\n\nexport function _savePartialEvent(\n  auth: AuthInternal,\n  event: AuthEvent\n): Promise<void> {\n  return storage()._set(\n    persistenceKey(auth),\n    (event as object) as PersistedBlob\n  );\n}\n\nexport async function _getAndRemoveEvent(\n  auth: AuthInternal\n): Promise<AuthEvent | null> {\n  const event = (await storage()._get(\n    persistenceKey(auth)\n  )) as AuthEvent | null;\n  if (event) {\n    await storage()._remove(persistenceKey(auth));\n  }\n  return event;\n}\n\nexport function _eventFromPartialAndUrl(\n  partialEvent: AuthEvent,\n  url: string\n): AuthEvent | null {\n  // Parse the deep link within the dynamic link URL.\n  const callbackUrl = _getDeepLinkFromCallback(url);\n  // Confirm it is actually a callback URL.\n  // Currently the universal link will be of this format:\n  // https://<AUTH_DOMAIN>/__/auth/callback<OAUTH_RESPONSE>\n  // This is a fake URL but is not intended to take the user anywhere\n  // and just redirect to the app.\n  if (callbackUrl.includes('/__/auth/callback')) {\n    // Check if there is an error in the URL.\n    // This mechanism is also used to pass errors back to the app:\n    // https://<AUTH_DOMAIN>/__/auth/callback?firebaseError=<STRINGIFIED_ERROR>\n    const params = searchParamsOrEmpty(callbackUrl);\n    // Get the error object corresponding to the stringified error if found.\n    const errorObject = params['firebaseError']\n      ? parseJsonOrNull(decodeURIComponent(params['firebaseError']))\n      : null;\n    const code = errorObject?.['code']?.split('auth/')?.[1];\n    const error = code ? _createError(code) : null;\n    if (error) {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        error,\n        urlResponse: null,\n        sessionId: null,\n        postBody: null\n      };\n    } else {\n      return {\n        type: partialEvent.type,\n        eventId: partialEvent.eventId,\n        tenantId: partialEvent.tenantId,\n        sessionId: partialEvent.sessionId,\n        urlResponse: callbackUrl,\n        postBody: null\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction generateSessionId(): string {\n  const chars = [];\n  const allowedChars =\n    '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for (let i = 0; i < SESSION_ID_LENGTH; i++) {\n    const idx = Math.floor(Math.random() * allowedChars.length);\n    chars.push(allowedChars.charAt(idx));\n  }\n  return chars.join('');\n}\n\nfunction storage(): PersistenceInternal {\n  return _getInstance(browserLocalPersistence);\n}\n\nfunction persistenceKey(auth: AuthInternal): string {\n  return _persistenceKeyName(KeyName.AUTH_EVENT, auth.config.apiKey, auth.name);\n}\n\nfunction parseJsonOrNull(json: string): ReturnType<typeof JSON.parse> | null {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n}\n\n// Exported for testing\nexport function _getDeepLinkFromCallback(url: string): string {\n  const params = searchParamsOrEmpty(url);\n  const link = params['link'] ? decodeURIComponent(params['link']) : undefined;\n  // Double link case (automatic redirect)\n  const doubleDeepLink = searchParamsOrEmpty(link)['link'];\n  // iOS custom scheme links.\n  const iOSDeepLink = params['deep_link_id']\n    ? decodeURIComponent(params['deep_link_id'])\n    : undefined;\n  const iOSDoubleDeepLink = searchParamsOrEmpty(iOSDeepLink)['link'];\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n\n/**\n * Optimistically tries to get search params from a string, or else returns an\n * empty search params object.\n */\nfunction searchParamsOrEmpty(url: string | undefined): Record<string, string> {\n  if (!url?.includes('?')) {\n    return {};\n  }\n\n  const [_, ...rest] = url.split('?');\n  return querystringDecode(rest.join('?')) as Record<string, string>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, PopupRedirectResolver } from '../../model/public_types';\nimport { browserSessionPersistence } from '../../platform_browser/persistence/session_storage';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEvent,\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { AuthPopup } from '../../platform_browser/util/popup';\nimport { _createError, _fail } from '../../core/util/assert';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  _checkCordovaConfiguration,\n  _generateHandlerUrl,\n  _performRedirect,\n  _validateOrigin,\n  _waitForAppResume\n} from './utils';\nimport {\n  CordovaAuthEventManager,\n  _eventFromPartialAndUrl,\n  _generateNewEvent,\n  _getAndRemoveEvent,\n  _savePartialEvent\n} from './events';\nimport { AuthEventManager } from '../../core/auth/auth_event_manager';\nimport { _getRedirectResult } from '../../platform_browser/strategies/redirect';\nimport { _clearRedirectOutcomes } from '../../core/strategies/redirect';\nimport { _cordovaWindow } from '../plugins';\n\n/**\n * How long to wait for the initial auth event before concluding no\n * redirect pending\n */\nconst INITIAL_EVENT_TIMEOUT_MS = 500;\n\nclass CordovaPopupRedirectResolver implements PopupRedirectResolverInternal {\n  readonly _redirectPersistence = browserSessionPersistence;\n  readonly _shouldInitProactively = true; // This is lightweight for Cordova\n  private readonly eventManagers = new Map<string, CordovaAuthEventManager>();\n  private readonly originValidationPromises: Record<string, Promise<void>> = {};\n\n  _completeRedirectFn = _getRedirectResult;\n\n  async _initialize(auth: AuthInternal): Promise<CordovaAuthEventManager> {\n    const key = auth._key();\n    let manager = this.eventManagers.get(key);\n    if (!manager) {\n      manager = new CordovaAuthEventManager(auth);\n      this.eventManagers.set(key, manager);\n      this.attachCallbackListeners(auth, manager);\n    }\n    return manager;\n  }\n\n  _openPopup(auth: AuthInternal): Promise<AuthPopup> {\n    _fail(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED);\n  }\n\n  async _openRedirect(\n    auth: AuthInternal,\n    provider: AuthProvider,\n    authType: AuthEventType,\n    eventId?: string\n  ): Promise<void> {\n    _checkCordovaConfiguration(auth);\n    const manager = await this._initialize(auth);\n    await manager.initialized();\n\n    // Reset the persisted redirect states. This does not matter on Web where\n    // the redirect always blows away application state entirely. On Cordova,\n    // the app maintains control flow through the redirect.\n    manager.resetRedirect();\n    _clearRedirectOutcomes();\n\n    await this._originValidation(auth);\n\n    const event = _generateNewEvent(auth, authType, eventId);\n    await _savePartialEvent(auth, event);\n    const url = await _generateHandlerUrl(auth, event, provider);\n    const iabRef = await _performRedirect(url);\n    return _waitForAppResume(auth, manager, iabRef);\n  }\n\n  _isIframeWebStorageSupported(\n    _auth: AuthInternal,\n    _cb: (support: boolean) => unknown\n  ): void {\n    throw new Error('Method not implemented.');\n  }\n\n  _originValidation(auth: AuthInternal): Promise<void> {\n    const key = auth._key();\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n\n    return this.originValidationPromises[key];\n  }\n\n  private attachCallbackListeners(\n    auth: AuthInternal,\n    manager: AuthEventManager\n  ): void {\n    // Get the global plugins\n    const { universalLinks, handleOpenURL, BuildInfo } = _cordovaWindow();\n\n    const noEventTimeout = setTimeout(async () => {\n      // We didn't see that initial event. Clear any pending object and\n      // dispatch no event\n      await _getAndRemoveEvent(auth);\n      manager.onEvent(generateNoEvent());\n    }, INITIAL_EVENT_TIMEOUT_MS);\n\n    const universalLinksCb = async (\n      eventData: Record<string, string> | null\n    ): Promise<void> => {\n      // We have an event so we can clear the no event timeout\n      clearTimeout(noEventTimeout);\n\n      const partialEvent = await _getAndRemoveEvent(auth);\n      let finalEvent: AuthEvent | null = null;\n      if (partialEvent && eventData?.['url']) {\n        finalEvent = _eventFromPartialAndUrl(partialEvent, eventData['url']);\n      }\n\n      // If finalEvent is never filled, trigger with no event\n      manager.onEvent(finalEvent || generateNoEvent());\n    };\n\n    // Universal links subscriber doesn't exist for iOS, so we need to check\n    if (\n      typeof universalLinks !== 'undefined' &&\n      typeof universalLinks.subscribe === 'function'\n    ) {\n      universalLinks.subscribe(null, universalLinksCb);\n    }\n\n    // iOS 7 or 8 custom URL schemes.\n    // This is also the current default behavior for iOS 9+.\n    // For this to work, cordova-plugin-customurlscheme needs to be installed.\n    // https://github.com/EddyVerbruggen/Custom-URL-scheme\n    // Do not overwrite the existing developer's URL handler.\n    const existingHandleOpenURL = handleOpenURL;\n    const packagePrefix = `${BuildInfo.packageName.toLowerCase()}://`;\n    _cordovaWindow().handleOpenURL = async url => {\n      if (url.toLowerCase().startsWith(packagePrefix)) {\n        // We want this intentionally to float\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        universalLinksCb({ url });\n      }\n      // Call the developer's handler if it is present.\n      if (typeof existingHandleOpenURL === 'function') {\n        try {\n          existingHandleOpenURL(url);\n        } catch (e) {\n          // This is a developer error. Don't stop the flow of the SDK.\n          console.error(e);\n        }\n      }\n    };\n  }\n}\n\n/**\n * An implementation of {@link PopupRedirectResolver} suitable for Cordova\n * based applications.\n *\n * @public\n */\nexport const cordovaPopupRedirectResolver: PopupRedirectResolver =\n  CordovaPopupRedirectResolver;\n\nfunction generateNoEvent(): AuthEvent {\n  return {\n    type: AuthEventType.UNKNOWN,\n    eventId: null,\n    sessionId: null,\n    urlResponse: null,\n    postBody: null,\n    tenantId: null,\n    error: _createError(AuthErrorCode.NO_AUTH_EVENT)\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _castAuth } from '../src/core/auth/auth_impl';\nimport { Auth } from '../src/model/public_types';\n\n/**\n * This interface is intended only for use by @firebase/auth-compat, do not use directly\n */\nexport * from '../index';\n\nexport { SignInWithIdpResponse } from '../src/api/authentication/idp';\nexport { AuthErrorCode } from '../src/core/errors';\nexport { PersistenceInternal } from '../src/core/persistence';\nexport { _persistenceKeyName } from '../src/core/persistence/persistence_user_manager';\nexport { UserImpl } from '../src/core/user/user_impl';\nexport { _getInstance } from '../src/core/util/instantiator';\nexport {\n  PopupRedirectResolverInternal,\n  EventManager,\n  AuthEventType\n} from '../src/model/popup_redirect';\nexport { UserCredentialInternal, UserParameters } from '../src/model/user';\nexport { AuthInternal, ConfigInternal } from '../src/model/auth';\nexport { DefaultConfig, AuthImpl, _castAuth } from '../src/core/auth/auth_impl';\n\nexport { ClientPlatform, _getClientVersion } from '../src/core/util/version';\n\nexport { _generateEventId } from '../src/core/util/event_id';\nexport { TaggedWithTokenResponse } from '../src/model/id_token';\nexport { _fail, _assert } from '../src/core/util/assert';\nexport { AuthPopup } from '../src/platform_browser/util/popup';\nexport { _getRedirectResult } from '../src/platform_browser/strategies/redirect';\nexport { cordovaPopupRedirectResolver } from '../src/platform_cordova/popup_redirect/popup_redirect';\nexport { FetchProvider } from '../src/core/util/fetch_provider';\nexport { SAMLAuthCredential } from '../src/core/credentials/saml';\n\n// This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n// It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it out\n// of autogenerated documentation pages to reduce accidental misuse.\nexport function addFrameworkForLogging(auth: Auth, framework: string): void {\n  _castAuth(auth)._logFramework(framework);\n}\n"]},"metadata":{},"sourceType":"module"}