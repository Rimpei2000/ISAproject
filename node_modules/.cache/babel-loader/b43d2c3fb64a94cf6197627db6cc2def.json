{"ast":null,"code":"import _objectSpread from \"C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"as\", \"className\", \"type\", \"tooltip\"];\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar propTypes = {\n  /**\r\n   * Specify whether the feedback is for valid or invalid fields\r\n   *\r\n   * @type {('valid'|'invalid')}\r\n   */\n  type: PropTypes.string,\n\n  /** Display feedback as a tooltip. */\n  tooltip: PropTypes.bool,\n  as: PropTypes.elementType\n};\nvar Feedback = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\nfunction (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'valid' : _ref$type,\n      _ref$tooltip = _ref.tooltip,\n      tooltip = _ref$tooltip === void 0 ? false : _ref$tooltip,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/_jsx(Component, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    className: classNames(className, \"\".concat(type, \"-\").concat(tooltip ? 'tooltip' : 'feedback'))\n  }));\n});\nFeedback.displayName = 'Feedback';\nFeedback.propTypes = propTypes;\nexport default Feedback;","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/react-bootstrap/esm/Feedback.js"],"names":["classNames","React","PropTypes","jsx","_jsx","propTypes","type","string","tooltip","bool","as","elementType","Feedback","forwardRef","ref","Component","className","props","displayName"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,IAAMC,SAAS,GAAG;AAChB;AACF;AACA;AACA;AACA;AACEC,EAAAA,IAAI,EAAEJ,SAAS,CAACK,MANA;;AAQhB;AACAC,EAAAA,OAAO,EAAEN,SAAS,CAACO,IATH;AAUhBC,EAAAA,EAAE,EAAER,SAAS,CAACS;AAVE,CAAlB;AAYA,IAAMC,QAAQ,GAAG,aAAaX,KAAK,CAACY,UAAN,EAAkB;AAChD,gBAMGC,GANH;AAAA,qBACEJ,EADF;AAAA,MACMK,SADN,wBACkB,KADlB;AAAA,MAEEC,SAFF,QAEEA,SAFF;AAAA,uBAGEV,IAHF;AAAA,MAGEA,IAHF,0BAGS,OAHT;AAAA,0BAIEE,OAJF;AAAA,MAIEA,OAJF,6BAIY,KAJZ;AAAA,MAKKS,KALL;;AAAA,SAMW,aAAab,IAAI,CAACW,SAAD,kCAAiBE,KAAjB;AAC1BH,IAAAA,GAAG,EAAEA,GADqB;AAE1BE,IAAAA,SAAS,EAAEhB,UAAU,CAACgB,SAAD,YAAeV,IAAf,cAAuBE,OAAO,GAAG,SAAH,GAAe,UAA7C;AAFK,KAN5B;AAAA,CAD8B,CAA9B;AAWAI,QAAQ,CAACM,WAAT,GAAuB,UAAvB;AACAN,QAAQ,CAACP,SAAT,GAAqBA,SAArB;AACA,eAAeO,QAAf","sourcesContent":["import classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nconst propTypes = {\r\n  /**\r\n   * Specify whether the feedback is for valid or invalid fields\r\n   *\r\n   * @type {('valid'|'invalid')}\r\n   */\r\n  type: PropTypes.string,\r\n\r\n  /** Display feedback as a tooltip. */\r\n  tooltip: PropTypes.bool,\r\n  as: PropTypes.elementType\r\n};\r\nconst Feedback = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\r\n({\r\n  as: Component = 'div',\r\n  className,\r\n  type = 'valid',\r\n  tooltip = false,\r\n  ...props\r\n}, ref) => /*#__PURE__*/_jsx(Component, { ...props,\r\n  ref: ref,\r\n  className: classNames(className, `${type}-${tooltip ? 'tooltip' : 'feedback'}`)\r\n}));\r\nFeedback.displayName = 'Feedback';\r\nFeedback.propTypes = propTypes;\r\nexport default Feedback;"]},"metadata":{},"sourceType":"module"}