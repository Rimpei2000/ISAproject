{"ast":null,"code":"import * as React from 'react';\nimport { useEffect, useMemo, useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport ToastFade from './ToastFade';\nimport ToastHeader from './ToastHeader';\nimport ToastBody from './ToastBody';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Toast = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    bsPrefix,\n    className,\n    transition: Transition = ToastFade,\n    show = true,\n    animation = true,\n    delay = 5000,\n    autohide = false,\n    onClose,\n    bg,\n    ...props\n  } = _ref;\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast'); // We use refs for these, because we don't want to restart the autohide\n  // timer in case these values change.\n\n  const delayRef = useRef(delay);\n  const onCloseRef = useRef(onClose);\n  useEffect(() => {\n    delayRef.current = delay;\n    onCloseRef.current = onClose;\n  }, [delay, onClose]);\n  const autohideTimeout = useTimeout();\n  const autohideToast = !!(autohide && show);\n  const autohideFunc = useCallback(() => {\n    if (autohideToast) {\n      onCloseRef.current == null ? void 0 : onCloseRef.current();\n    }\n  }, [autohideToast]);\n  useEffect(() => {\n    // Only reset timer if show or autohide changes.\n    autohideTimeout.set(autohideFunc, delayRef.current);\n  }, [autohideTimeout, autohideFunc]);\n  const toastContext = useMemo(() => ({\n    onClose\n  }), [onClose]);\n  const hasAnimation = !!(Transition && animation);\n\n  const toast = /*#__PURE__*/_jsx(\"div\", { ...props,\n    ref: ref,\n    className: classNames(bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? 'show' : 'hide')),\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\"\n  });\n\n  return /*#__PURE__*/_jsx(ToastContext.Provider, {\n    value: toastContext,\n    children: hasAnimation && Transition ? /*#__PURE__*/_jsx(Transition, {\n      in: show,\n      unmountOnExit: true,\n      children: toast\n    }) : toast\n  });\n});\nToast.displayName = 'Toast';\nexport default Object.assign(Toast, {\n  Body: ToastBody,\n  Header: ToastHeader\n});","map":{"version":3,"sources":["/Users/rim.sh/Desktop/ISAproject/node_modules/react-bootstrap/esm/Toast.js"],"names":["React","useEffect","useMemo","useRef","useCallback","classNames","useTimeout","ToastFade","ToastHeader","ToastBody","useBootstrapPrefix","ToastContext","jsx","_jsx","Toast","forwardRef","ref","bsPrefix","className","transition","Transition","show","animation","delay","autohide","onClose","bg","props","delayRef","onCloseRef","current","autohideTimeout","autohideToast","autohideFunc","set","toastContext","hasAnimation","toast","role","Provider","value","children","in","unmountOnExit","displayName","Object","assign","Body","Header"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useEffect, useMemo, useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport ToastFade from './ToastFade';\nimport ToastHeader from './ToastHeader';\nimport ToastBody from './ToastBody';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Toast = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  transition: Transition = ToastFade,\n  show = true,\n  animation = true,\n  delay = 5000,\n  autohide = false,\n  onClose,\n  bg,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast'); // We use refs for these, because we don't want to restart the autohide\n  // timer in case these values change.\n\n  const delayRef = useRef(delay);\n  const onCloseRef = useRef(onClose);\n  useEffect(() => {\n    delayRef.current = delay;\n    onCloseRef.current = onClose;\n  }, [delay, onClose]);\n  const autohideTimeout = useTimeout();\n  const autohideToast = !!(autohide && show);\n  const autohideFunc = useCallback(() => {\n    if (autohideToast) {\n      onCloseRef.current == null ? void 0 : onCloseRef.current();\n    }\n  }, [autohideToast]);\n  useEffect(() => {\n    // Only reset timer if show or autohide changes.\n    autohideTimeout.set(autohideFunc, delayRef.current);\n  }, [autohideTimeout, autohideFunc]);\n  const toastContext = useMemo(() => ({\n    onClose\n  }), [onClose]);\n  const hasAnimation = !!(Transition && animation);\n\n  const toast = /*#__PURE__*/_jsx(\"div\", { ...props,\n    ref: ref,\n    className: classNames(bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? 'show' : 'hide')),\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\"\n  });\n\n  return /*#__PURE__*/_jsx(ToastContext.Provider, {\n    value: toastContext,\n    children: hasAnimation && Transition ? /*#__PURE__*/_jsx(Transition, {\n      in: show,\n      unmountOnExit: true,\n      children: toast\n    }) : toast\n  });\n});\nToast.displayName = 'Toast';\nexport default Object.assign(Toast, {\n  Body: ToastBody,\n  Header: ToastHeader\n});"]},"metadata":{},"sourceType":"module"}