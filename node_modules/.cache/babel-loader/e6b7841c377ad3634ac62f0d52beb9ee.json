{"ast":null,"code":"import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport Feedback from './Feedback';\nimport FormCheckInput from './FormCheckInput';\nimport FormCheckLabel from './FormCheckLabel';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { hasChildOfType } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst FormCheck = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    id,\n    bsPrefix,\n    bsSwitchPrefix,\n    inline = false,\n    disabled = false,\n    isValid = false,\n    isInvalid = false,\n    feedbackTooltip = false,\n    feedback,\n    feedbackType,\n    className,\n    style,\n    title = '',\n    type = 'checkbox',\n    label,\n    children,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as = 'input',\n    ...props\n  } = _ref;\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check');\n  bsSwitchPrefix = useBootstrapPrefix(bsSwitchPrefix, 'form-switch');\n  const {\n    controlId\n  } = useContext(FormContext);\n  const innerFormContext = useMemo(() => ({\n    controlId: id || controlId\n  }), [controlId, id]);\n  const hasLabel = !children && label != null && label !== false || hasChildOfType(children, FormCheckLabel);\n\n  const input = /*#__PURE__*/_jsx(FormCheckInput, { ...props,\n    type: type === 'switch' ? 'checkbox' : type,\n    ref: ref,\n    isValid: isValid,\n    isInvalid: isInvalid,\n    disabled: disabled,\n    as: as\n  });\n\n  return /*#__PURE__*/_jsx(FormContext.Provider, {\n    value: innerFormContext,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      style: style,\n      className: classNames(className, hasLabel && bsPrefix, inline && `${bsPrefix}-inline`, type === 'switch' && bsSwitchPrefix),\n      children: children || /*#__PURE__*/_jsxs(_Fragment, {\n        children: [input, hasLabel && /*#__PURE__*/_jsx(FormCheckLabel, {\n          title: title,\n          children: label\n        }), feedback && /*#__PURE__*/_jsx(Feedback, {\n          type: feedbackType,\n          tooltip: feedbackTooltip,\n          children: feedback\n        })]\n      })\n    })\n  });\n});\nFormCheck.displayName = 'FormCheck';\nexport default Object.assign(FormCheck, {\n  Input: FormCheckInput,\n  Label: FormCheckLabel\n});","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/FinalMilestone/ISAproject/node_modules/react-bootstrap/esm/FormCheck.js"],"names":["classNames","React","useContext","useMemo","Feedback","FormCheckInput","FormCheckLabel","FormContext","useBootstrapPrefix","hasChildOfType","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","FormCheck","forwardRef","ref","id","bsPrefix","bsSwitchPrefix","inline","disabled","isValid","isInvalid","feedbackTooltip","feedback","feedbackType","className","style","title","type","label","children","as","props","controlId","innerFormContext","hasLabel","input","Provider","value","tooltip","displayName","Object","assign","Input","Label"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport { useContext, useMemo } from 'react';\r\nimport Feedback from './Feedback';\r\nimport FormCheckInput from './FormCheckInput';\r\nimport FormCheckLabel from './FormCheckLabel';\r\nimport FormContext from './FormContext';\r\nimport { useBootstrapPrefix } from './ThemeProvider';\r\nimport { hasChildOfType } from './ElementChildren';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nconst FormCheck = /*#__PURE__*/React.forwardRef(({\r\n  id,\r\n  bsPrefix,\r\n  bsSwitchPrefix,\r\n  inline = false,\r\n  disabled = false,\r\n  isValid = false,\r\n  isInvalid = false,\r\n  feedbackTooltip = false,\r\n  feedback,\r\n  feedbackType,\r\n  className,\r\n  style,\r\n  title = '',\r\n  type = 'checkbox',\r\n  label,\r\n  children,\r\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\r\n  as = 'input',\r\n  ...props\r\n}, ref) => {\r\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check');\r\n  bsSwitchPrefix = useBootstrapPrefix(bsSwitchPrefix, 'form-switch');\r\n  const {\r\n    controlId\r\n  } = useContext(FormContext);\r\n  const innerFormContext = useMemo(() => ({\r\n    controlId: id || controlId\r\n  }), [controlId, id]);\r\n  const hasLabel = !children && label != null && label !== false || hasChildOfType(children, FormCheckLabel);\r\n\r\n  const input = /*#__PURE__*/_jsx(FormCheckInput, { ...props,\r\n    type: type === 'switch' ? 'checkbox' : type,\r\n    ref: ref,\r\n    isValid: isValid,\r\n    isInvalid: isInvalid,\r\n    disabled: disabled,\r\n    as: as\r\n  });\r\n\r\n  return /*#__PURE__*/_jsx(FormContext.Provider, {\r\n    value: innerFormContext,\r\n    children: /*#__PURE__*/_jsx(\"div\", {\r\n      style: style,\r\n      className: classNames(className, hasLabel && bsPrefix, inline && `${bsPrefix}-inline`, type === 'switch' && bsSwitchPrefix),\r\n      children: children || /*#__PURE__*/_jsxs(_Fragment, {\r\n        children: [input, hasLabel && /*#__PURE__*/_jsx(FormCheckLabel, {\r\n          title: title,\r\n          children: label\r\n        }), feedback && /*#__PURE__*/_jsx(Feedback, {\r\n          type: feedbackType,\r\n          tooltip: feedbackTooltip,\r\n          children: feedback\r\n        })]\r\n      })\r\n    })\r\n  });\r\n});\r\nFormCheck.displayName = 'FormCheck';\r\nexport default Object.assign(FormCheck, {\r\n  Input: FormCheckInput,\r\n  Label: FormCheckLabel\r\n});"]},"metadata":{},"sourceType":"module"}