{"ast":null,"code":"import addClass from 'dom-helpers/addClass';\nimport css from 'dom-helpers/css';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport removeClass from 'dom-helpers/removeClass';\nimport ModalManager from '@restart/ui/ModalManager';\nconst Selector = {\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n  STICKY_CONTENT: '.sticky-top',\n  NAVBAR_TOGGLER: '.navbar-toggler'\n};\n\nclass BootstrapModalManager extends ModalManager {\n  adjustAndStore(prop, element, adjust) {\n    const actual = element.style[prop]; // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible\n    // @ts-ignore\n\n    element.dataset[prop] = actual;\n    css(element, {\n      [prop]: `${parseFloat(css(element, prop)) + adjust}px`\n    });\n  }\n\n  restore(prop, element) {\n    const value = element.dataset[prop];\n\n    if (value !== undefined) {\n      delete element.dataset[prop];\n      css(element, {\n        [prop]: value\n      });\n    }\n  }\n\n  setContainerStyle(containerState) {\n    super.setContainerStyle(containerState);\n    const container = this.getElement();\n    addClass(container, 'modal-open');\n    if (!containerState.scrollBarWidth) return;\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.adjustAndStore(paddingProp, el, containerState.scrollBarWidth));\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.adjustAndStore(marginProp, el, -containerState.scrollBarWidth));\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.adjustAndStore(marginProp, el, containerState.scrollBarWidth));\n  }\n\n  removeContainerStyle(containerState) {\n    super.removeContainerStyle(containerState);\n    const container = this.getElement();\n    removeClass(container, 'modal-open');\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.restore(paddingProp, el));\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.restore(marginProp, el));\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.restore(marginProp, el));\n  }\n\n}\n\nlet sharedManager;\nexport function getSharedManager(options) {\n  if (!sharedManager) sharedManager = new BootstrapModalManager(options);\n  return sharedManager;\n}\nexport default BootstrapModalManager;","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/FinalMilestone/ISAproject/node_modules/react-bootstrap/esm/BootstrapModalManager.js"],"names":["addClass","css","qsa","removeClass","ModalManager","Selector","FIXED_CONTENT","STICKY_CONTENT","NAVBAR_TOGGLER","BootstrapModalManager","adjustAndStore","prop","element","adjust","actual","style","dataset","parseFloat","restore","value","undefined","setContainerStyle","containerState","container","getElement","scrollBarWidth","paddingProp","isRTL","marginProp","forEach","el","removeContainerStyle","sharedManager","getSharedManager","options"],"mappings":"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","sourcesContent":["import addClass from 'dom-helpers/addClass';\r\nimport css from 'dom-helpers/css';\r\nimport qsa from 'dom-helpers/querySelectorAll';\r\nimport removeClass from 'dom-helpers/removeClass';\r\nimport ModalManager from '@restart/ui/ModalManager';\r\nconst Selector = {\r\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\r\n  STICKY_CONTENT: '.sticky-top',\r\n  NAVBAR_TOGGLER: '.navbar-toggler'\r\n};\r\n\r\nclass BootstrapModalManager extends ModalManager {\r\n  adjustAndStore(prop, element, adjust) {\r\n    const actual = element.style[prop]; // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible\r\n    // @ts-ignore\r\n\r\n    element.dataset[prop] = actual;\r\n    css(element, {\r\n      [prop]: `${parseFloat(css(element, prop)) + adjust}px`\r\n    });\r\n  }\r\n\r\n  restore(prop, element) {\r\n    const value = element.dataset[prop];\r\n\r\n    if (value !== undefined) {\r\n      delete element.dataset[prop];\r\n      css(element, {\r\n        [prop]: value\r\n      });\r\n    }\r\n  }\r\n\r\n  setContainerStyle(containerState) {\r\n    super.setContainerStyle(containerState);\r\n    const container = this.getElement();\r\n    addClass(container, 'modal-open');\r\n    if (!containerState.scrollBarWidth) return;\r\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\r\n    const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';\r\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.adjustAndStore(paddingProp, el, containerState.scrollBarWidth));\r\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.adjustAndStore(marginProp, el, -containerState.scrollBarWidth));\r\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.adjustAndStore(marginProp, el, containerState.scrollBarWidth));\r\n  }\r\n\r\n  removeContainerStyle(containerState) {\r\n    super.removeContainerStyle(containerState);\r\n    const container = this.getElement();\r\n    removeClass(container, 'modal-open');\r\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\r\n    const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';\r\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.restore(paddingProp, el));\r\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.restore(marginProp, el));\r\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.restore(marginProp, el));\r\n  }\r\n\r\n}\r\n\r\nlet sharedManager;\r\nexport function getSharedManager(options) {\r\n  if (!sharedManager) sharedManager = new BootstrapModalManager(options);\r\n  return sharedManager;\r\n}\r\nexport default BootstrapModalManager;"]},"metadata":{},"sourceType":"module"}