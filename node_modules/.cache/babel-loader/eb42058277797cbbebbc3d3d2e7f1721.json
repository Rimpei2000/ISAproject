{"ast":null,"code":"import listen from 'dom-helpers/listen';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport { useEffect } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport useClickOutside, { getRefTarget } from './useClickOutside';\nconst escapeKeyCode = 27;\n\nconst noop = () => {};\n/**\r\n * The `useRootClose` hook registers your callback on the document\r\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\r\n * style behavior where your callback is triggered when the user tries to\r\n * interact with the rest of the document or hits the `esc` key.\r\n *\r\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\r\n * @param {function} onRootClose\r\n * @param {object=}  options\r\n * @param {boolean=} options.disabled\r\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\r\n */\n\n\nfunction useRootClose(ref, onRootClose) {\n  let {\n    disabled,\n    clickTrigger\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const onClose = onRootClose || noop;\n  useClickOutside(ref, onClose, {\n    disabled,\n    clickTrigger\n  });\n  const handleKeyUp = useEventCallback(e => {\n    if (e.keyCode === escapeKeyCode) {\n      onClose(e);\n    }\n  });\n  useEffect(() => {\n    if (disabled || ref == null) return undefined;\n    const doc = ownerDocument(getRefTarget(ref)); // Store the current event to avoid triggering handlers immediately\n    // https://github.com/facebook/react/issues/20074\n\n    let currentEvent = (doc.defaultView || window).event;\n    const removeKeyupListener = listen(doc, 'keyup', e => {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      handleKeyUp(e);\n    });\n    return () => {\n      removeKeyupListener();\n    };\n  }, [ref, disabled, handleKeyUp]);\n}\n\nexport default useRootClose;","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/@restart/ui/esm/useRootClose.js"],"names":["listen","ownerDocument","useEffect","useEventCallback","useClickOutside","getRefTarget","escapeKeyCode","noop","useRootClose","ref","onRootClose","disabled","clickTrigger","onClose","handleKeyUp","e","keyCode","undefined","doc","currentEvent","defaultView","window","event","removeKeyupListener"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,eAAP,IAA0BC,YAA1B,QAA8C,mBAA9C;AACA,MAAMC,aAAa,GAAG,EAAtB;;AAEA,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,WAA3B,EAGQ;AAAA,MAHgC;AACtCC,IAAAA,QADsC;AAEtCC,IAAAA;AAFsC,GAGhC,uEAAJ,EAAI;AACN,QAAMC,OAAO,GAAGH,WAAW,IAAIH,IAA/B;AACAH,EAAAA,eAAe,CAACK,GAAD,EAAMI,OAAN,EAAe;AAC5BF,IAAAA,QAD4B;AAE5BC,IAAAA;AAF4B,GAAf,CAAf;AAIA,QAAME,WAAW,GAAGX,gBAAgB,CAACY,CAAC,IAAI;AACxC,QAAIA,CAAC,CAACC,OAAF,KAAcV,aAAlB,EAAiC;AAC/BO,MAAAA,OAAO,CAACE,CAAD,CAAP;AACD;AACF,GAJmC,CAApC;AAKAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,QAAQ,IAAIF,GAAG,IAAI,IAAvB,EAA6B,OAAOQ,SAAP;AAC7B,UAAMC,GAAG,GAAGjB,aAAa,CAACI,YAAY,CAACI,GAAD,CAAb,CAAzB,CAFc,CAEgC;AAC9C;;AAEA,QAAIU,YAAY,GAAG,CAACD,GAAG,CAACE,WAAJ,IAAmBC,MAApB,EAA4BC,KAA/C;AACA,UAAMC,mBAAmB,GAAGvB,MAAM,CAACkB,GAAD,EAAM,OAAN,EAAeH,CAAC,IAAI;AACpD;AACA,UAAIA,CAAC,KAAKI,YAAV,EAAwB;AACtBA,QAAAA,YAAY,GAAGF,SAAf;AACA;AACD;;AAEDH,MAAAA,WAAW,CAACC,CAAD,CAAX;AACD,KARiC,CAAlC;AASA,WAAO,MAAM;AACXQ,MAAAA,mBAAmB;AACpB,KAFD;AAGD,GAlBQ,EAkBN,CAACd,GAAD,EAAME,QAAN,EAAgBG,WAAhB,CAlBM,CAAT;AAmBD;;AAED,eAAeN,YAAf","sourcesContent":["import listen from 'dom-helpers/listen';\r\nimport ownerDocument from 'dom-helpers/ownerDocument';\r\nimport { useEffect } from 'react';\r\nimport useEventCallback from '@restart/hooks/useEventCallback';\r\nimport useClickOutside, { getRefTarget } from './useClickOutside';\r\nconst escapeKeyCode = 27;\r\n\r\nconst noop = () => {};\r\n\r\n/**\r\n * The `useRootClose` hook registers your callback on the document\r\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\r\n * style behavior where your callback is triggered when the user tries to\r\n * interact with the rest of the document or hits the `esc` key.\r\n *\r\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\r\n * @param {function} onRootClose\r\n * @param {object=}  options\r\n * @param {boolean=} options.disabled\r\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\r\n */\r\nfunction useRootClose(ref, onRootClose, {\r\n  disabled,\r\n  clickTrigger\r\n} = {}) {\r\n  const onClose = onRootClose || noop;\r\n  useClickOutside(ref, onClose, {\r\n    disabled,\r\n    clickTrigger\r\n  });\r\n  const handleKeyUp = useEventCallback(e => {\r\n    if (e.keyCode === escapeKeyCode) {\r\n      onClose(e);\r\n    }\r\n  });\r\n  useEffect(() => {\r\n    if (disabled || ref == null) return undefined;\r\n    const doc = ownerDocument(getRefTarget(ref)); // Store the current event to avoid triggering handlers immediately\r\n    // https://github.com/facebook/react/issues/20074\r\n\r\n    let currentEvent = (doc.defaultView || window).event;\r\n    const removeKeyupListener = listen(doc, 'keyup', e => {\r\n      // skip if this event is the same as the one running when we added the handlers\r\n      if (e === currentEvent) {\r\n        currentEvent = undefined;\r\n        return;\r\n      }\r\n\r\n      handleKeyUp(e);\r\n    });\r\n    return () => {\r\n      removeKeyupListener();\r\n    };\r\n  }, [ref, disabled, handleKeyUp]);\r\n}\r\n\r\nexport default useRootClose;"]},"metadata":{},"sourceType":"module"}