{"ast":null,"code":"import $cgWTI$react, { useContext as $cgWTI$useContext, useMemo as $cgWTI$useMemo, useState as $cgWTI$useState, useLayoutEffect as $cgWTI$useLayoutEffect } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $9d939cbc98267846$exports = {};\n$parcel$export($9d939cbc98267846$exports, \"SSRProvider\", () => $9d939cbc98267846$export$9f8ac96af4b1b2ae);\n$parcel$export($9d939cbc98267846$exports, \"useSSRSafeId\", () => $9d939cbc98267846$export$619500959fc48b26);\n$parcel$export($9d939cbc98267846$exports, \"useIsSSR\", () => $9d939cbc98267846$export$535bd6ca7f90a273); // Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\n\nconst $9d939cbc98267846$var$defaultContext = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\nconst $9d939cbc98267846$var$SSRContext = /*#__PURE__*/$cgWTI$react.createContext($9d939cbc98267846$var$defaultContext);\n\nfunction $9d939cbc98267846$export$9f8ac96af4b1b2ae(props) {\n  let cur = $cgWTI$useContext($9d939cbc98267846$var$SSRContext);\n  let value = $cgWTI$useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === $9d939cbc98267846$var$defaultContext ? '' : `${cur.prefix}-${++cur.current}`,\n    current: 0\n  }), [cur]);\n  return /*#__PURE__*/$cgWTI$react.createElement($9d939cbc98267846$var$SSRContext.Provider, {\n    value: value\n  }, props.children);\n}\n\nlet $9d939cbc98267846$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);\n\nfunction $9d939cbc98267846$export$619500959fc48b26(defaultId) {\n  let ctx = $cgWTI$useContext($9d939cbc98267846$var$SSRContext); // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n\n  if (ctx === $9d939cbc98267846$var$defaultContext && !$9d939cbc98267846$var$canUseDOM) console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  return $cgWTI$useMemo(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);\n}\n\nfunction $9d939cbc98267846$export$535bd6ca7f90a273() {\n  let cur = $cgWTI$useContext($9d939cbc98267846$var$SSRContext);\n  let isInSSRContext = cur !== $9d939cbc98267846$var$defaultContext;\n  let [isSSR, setIsSSR] = $cgWTI$useState(isInSSRContext); // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n\n  if (typeof window !== 'undefined' && isInSSRContext) // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    $cgWTI$useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  return isSSR;\n}\n\nexport { $9d939cbc98267846$export$9f8ac96af4b1b2ae as SSRProvider, $9d939cbc98267846$export$619500959fc48b26 as useSSRSafeId, $9d939cbc98267846$export$535bd6ca7f90a273 as useIsSSR };","map":{"version":3,"mappings":";;;;;;;;;;;;;;wGA4BA;AACA;AACA;AACA;AACA;;AACA,MAAMA,oCAAc,GAAoB;AACtCC,QAAM,EAAEC,MAAM,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,WAA3B,CAAD,CADwB;AAEtCC,SAAO,EAAE;AAF6B,CAAxC;AAKA,MAAMC,gCAAU,gBAAGC,YAAK,CAACC,aAAN,CAAqCT,oCAArC,CAAnB;;SAWgBU,0CAAYC,OAAsC;AAChE,MAAIC,GAAG,GAAGC,iBAAU,CAACN,gCAAD,CAApB;AACA,MAAIO,KAAK,GAAoBC,cAAO,QAAQ;AAC1C;AACA;AACAd,UAAM,EAAEW,GAAG,KAAKZ,oCAAR,GAAyB,EAAzB,GAA2B,GAAMY,GAAG,CAACX,MAAO,IAAC,EAAIW,GAAG,CAACN,OAAO,EAH1B;AAI1CA,WAAO,EAAE;AAJiC,GAAR,GAKhC,CAACM,GAAD,CALgC,CAApC;AAOA,SAAM,wCACHL,gCAAU,CAACS,QADR,EACgB;AAACF,SAAK,EAAEA;AAAR,GADhB,EAEDH,KAAK,CAACM,QAFL,CAAN;AAKD;;AAED,IAAIC,+BAAS,GAAGC,OAAO,CACrB,OAAOC,MAAP,KAAkB,WAAlB,IACAA,MAAM,CAACC,QADP,IAEAD,MAAM,CAACC,QAAP,CAAgBC,aAHK,CAAvB;;SAOgBC,0CAAaC,WAA4B;AACvD,MAAIC,GAAG,GAAGZ,iBAAU,CAACN,gCAAD,CAApB,CADuD,CAGvD;AACA;;AACA,MAAIkB,GAAG,KAAKzB,oCAAR,IAAsB,CAAKkB,+BAA/B,EACEQ,OAAO,CAACC,IAAR,CAAa,iJAAb;AAGF,SAAOZ,cAAO,OAAOS,SAAS,IAAK,aAAYC,GAAG,CAACxB,MAAO,IAAC,EAAIwB,GAAG,CAACnB,OAAO,EAA5D,EAAgE,CAACkB,SAAD,CAAhE,CAAd;AACD;;SAOeI,4CAAoB;AAClC,MAAIhB,GAAG,GAAGC,iBAAU,CAACN,gCAAD,CAApB;AACA,MAAIsB,cAAc,GAAGjB,GAAG,KAAKZ,oCAA7B;AACA,MAAG,CAAE8B,KAAF,EAASC,QAAT,IAAqBC,eAAQ,CAACH,cAAD,CAAhC,CAHkC,CAKlC;AACA;;AACA,MAAI,OAAOT,MAAP,KAAkB,WAAlB,IAAiCS,cAArC,EACE;AACA;AACA;AACAI,0BAAe,OAAO;AACpBF,cAAQ,CAAC,KAAD,CAAR;AACD,KAFc,EAEZ,EAFY,CAAf;AAKF,SAAOD,KAAP;AACD","names":["$9d939cbc98267846$var$defaultContext","prefix","String","Math","round","random","current","$9d939cbc98267846$var$SSRContext","$cgWTI$react","createContext","$9d939cbc98267846$export$9f8ac96af4b1b2ae","props","cur","$cgWTI$useContext","value","$cgWTI$useMemo","Provider","children","$9d939cbc98267846$var$canUseDOM","Boolean","window","document","createElement","$9d939cbc98267846$export$619500959fc48b26","defaultId","ctx","console","warn","$9d939cbc98267846$export$535bd6ca7f90a273","isInSSRContext","isSSR","setIsSSR","$cgWTI$useState","$cgWTI$useLayoutEffect"],"sources":["C:\\Users\\bhupe\\Downloads\\Term 4\\COMP4537\\MilestoneFinal\\ISAproject\\node_modules\\@react-aria\\ssr\\dist\\packages\\@react-aria\\ssr\\src\\SSRProvider.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\nimport React, {ReactNode, useContext, useLayoutEffect, useMemo, useState} from 'react';\n\n// To support SSR, the auto incrementing id counter is stored in a context. This allows\n// it to be reset on every request to ensure the client and server are consistent.\n// There is also a prefix string that is used to support async loading components\n// Each async boundary must be wrapped in an SSR provider, which appends to the prefix\n// and resets the current id counter. This ensures that async loaded components have\n// consistent ids regardless of the loading order.\ninterface SSRContextValue {\n  prefix: string,\n  current: number\n}\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst defaultContext: SSRContextValue = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\n\nconst SSRContext = React.createContext<SSRContextValue>(defaultContext);\n\ninterface SSRProviderProps {\n  /** Your application here. */\n  children: ReactNode\n}\n\n/**\n * When using SSR with React Aria, applications must be wrapped in an SSRProvider.\n * This ensures that auto generated ids are consistent between the client and server.\n */\nexport function SSRProvider(props: SSRProviderProps): JSX.Element {\n  let cur = useContext(SSRContext);\n  let value: SSRContextValue = useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === defaultContext ? '' : `${cur.prefix}-${++cur.current}`,\n    current: 0\n  }), [cur]);\n\n  return (\n    <SSRContext.Provider value={value}>\n      {props.children}\n    </SSRContext.Provider>\n  );\n}\n\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\n/** @private */\nexport function useSSRSafeId(defaultId?: string): string {\n  let ctx = useContext(SSRContext);\n\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n  if (ctx === defaultContext && !canUseDOM) {\n    console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  }\n\n  return useMemo(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);\n}\n\n/**\n * Returns whether the component is currently being server side rendered or\n * hydrated on the client. Can be used to delay browser-specific rendering\n * until after hydration.\n */\nexport function useIsSSR(): boolean {\n  let cur = useContext(SSRContext);\n  let isInSSRContext = cur !== defaultContext;\n  let [isSSR, setIsSSR] = useState(isInSSRContext);\n\n  // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n  if (typeof window !== 'undefined' && isInSSRContext) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return isSSR;\n}\n"]},"metadata":{},"sourceType":"module"}