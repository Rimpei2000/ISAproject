{"ast":null,"code":"import css from 'dom-helpers/css';\nimport transitionEnd from 'dom-helpers/transitionEnd';\n\nfunction parseDuration(node, property) {\n  const str = css(node, property) || '';\n  const mult = str.indexOf('ms') === -1 ? 1000 : 1;\n  return parseFloat(str) * mult;\n}\n\nexport default function transitionEndListener(element, handler) {\n  const duration = parseDuration(element, 'transitionDuration');\n  const delay = parseDuration(element, 'transitionDelay');\n  const remove = transitionEnd(element, e => {\n    if (e.target === element) {\n      remove();\n      handler(e);\n    }\n  }, duration + delay);\n}","map":{"version":3,"sources":["/Users/rim.sh/Desktop/ISAproject/node_modules/react-bootstrap/esm/transitionEndListener.js"],"names":["css","transitionEnd","parseDuration","node","property","str","mult","indexOf","parseFloat","transitionEndListener","element","handler","duration","delay","remove","e","target"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,iBAAhB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,QAA7B,EAAuC;AACrC,QAAMC,GAAG,GAAGL,GAAG,CAACG,IAAD,EAAOC,QAAP,CAAH,IAAuB,EAAnC;AACA,QAAME,IAAI,GAAGD,GAAG,CAACE,OAAJ,CAAY,IAAZ,MAAsB,CAAC,CAAvB,GAA2B,IAA3B,GAAkC,CAA/C;AACA,SAAOC,UAAU,CAACH,GAAD,CAAV,GAAkBC,IAAzB;AACD;;AAED,eAAe,SAASG,qBAAT,CAA+BC,OAA/B,EAAwCC,OAAxC,EAAiD;AAC9D,QAAMC,QAAQ,GAAGV,aAAa,CAACQ,OAAD,EAAU,oBAAV,CAA9B;AACA,QAAMG,KAAK,GAAGX,aAAa,CAACQ,OAAD,EAAU,iBAAV,CAA3B;AACA,QAAMI,MAAM,GAAGb,aAAa,CAACS,OAAD,EAAUK,CAAC,IAAI;AACzC,QAAIA,CAAC,CAACC,MAAF,KAAaN,OAAjB,EAA0B;AACxBI,MAAAA,MAAM;AACNH,MAAAA,OAAO,CAACI,CAAD,CAAP;AACD;AACF,GAL2B,EAKzBH,QAAQ,GAAGC,KALc,CAA5B;AAMD","sourcesContent":["import css from 'dom-helpers/css';\nimport transitionEnd from 'dom-helpers/transitionEnd';\n\nfunction parseDuration(node, property) {\n  const str = css(node, property) || '';\n  const mult = str.indexOf('ms') === -1 ? 1000 : 1;\n  return parseFloat(str) * mult;\n}\n\nexport default function transitionEndListener(element, handler) {\n  const duration = parseDuration(element, 'transitionDuration');\n  const delay = parseDuration(element, 'transitionDelay');\n  const remove = transitionEnd(element, e => {\n    if (e.target === element) {\n      remove();\n      handler(e);\n    }\n  }, duration + delay);\n}"]},"metadata":{},"sourceType":"module"}