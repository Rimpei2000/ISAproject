{"ast":null,"code":"import * as React from 'react';\n/**\r\n * Iterates through children that are typically specified as `props.children`,\r\n * but only maps over children that are \"valid elements\".\r\n *\r\n * The mapFunction provided index will be normalised to the components mapped,\r\n * so an invalid component would not increase the index.\r\n *\r\n */\n\nfunction map(children, func) {\n  let index = 0;\n  return React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) ? func(child, index++) : child);\n}\n/**\r\n * Iterates through children that are \"valid elements\".\r\n *\r\n * The provided forEachFunc(child, index) will be called for each\r\n * leaf child with the index reflecting the position relative to \"valid components\".\r\n */\n\n\nfunction forEach(children, func) {\n  let index = 0;\n  React.Children.forEach(children, child => {\n    if ( /*#__PURE__*/React.isValidElement(child)) func(child, index++);\n  });\n}\n/**\r\n * Finds whether a component's `children` prop includes a React element of the\r\n * specified type.\r\n */\n\n\nfunction hasChildOfType(children, type) {\n  return React.Children.toArray(children).some(child => /*#__PURE__*/React.isValidElement(child) && child.type === type);\n}\n\nexport { map, forEach, hasChildOfType };","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/FinalMilestone/ISAproject/node_modules/react-bootstrap/esm/ElementChildren.js"],"names":["React","map","children","func","index","Children","child","isValidElement","forEach","hasChildOfType","type","toArray","some"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,GAAT,CAAaC,QAAb,EAAuBC,IAAvB,EAA6B;AAC3B,MAAIC,KAAK,GAAG,CAAZ;AACA,SAAOJ,KAAK,CAACK,QAAN,CAAeJ,GAAf,CAAmBC,QAAnB,EAA6BI,KAAK,IAAI,aAAaN,KAAK,CAACO,cAAN,CAAqBD,KAArB,IAA8BH,IAAI,CAACG,KAAD,EAAQF,KAAK,EAAb,CAAlC,GAAqDE,KAAxG,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASE,OAAT,CAAiBN,QAAjB,EAA2BC,IAA3B,EAAiC;AAC/B,MAAIC,KAAK,GAAG,CAAZ;AACAJ,EAAAA,KAAK,CAACK,QAAN,CAAeG,OAAf,CAAuBN,QAAvB,EAAiCI,KAAK,IAAI;AACxC,SAAK,aAAaN,KAAK,CAACO,cAAN,CAAqBD,KAArB,CAAlB,EAA+CH,IAAI,CAACG,KAAD,EAAQF,KAAK,EAAb,CAAJ;AAChD,GAFD;AAGD;AACD;AACA;AACA;AACA;;;AAGA,SAASK,cAAT,CAAwBP,QAAxB,EAAkCQ,IAAlC,EAAwC;AACtC,SAAOV,KAAK,CAACK,QAAN,CAAeM,OAAf,CAAuBT,QAAvB,EAAiCU,IAAjC,CAAsCN,KAAK,IAAI,aAAaN,KAAK,CAACO,cAAN,CAAqBD,KAArB,KAA+BA,KAAK,CAACI,IAAN,KAAeA,IAA1G,CAAP;AACD;;AAED,SAAST,GAAT,EAAcO,OAAd,EAAuBC,cAAvB","sourcesContent":["import * as React from 'react';\r\n/**\r\n * Iterates through children that are typically specified as `props.children`,\r\n * but only maps over children that are \"valid elements\".\r\n *\r\n * The mapFunction provided index will be normalised to the components mapped,\r\n * so an invalid component would not increase the index.\r\n *\r\n */\r\n\r\nfunction map(children, func) {\r\n  let index = 0;\r\n  return React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) ? func(child, index++) : child);\r\n}\r\n/**\r\n * Iterates through children that are \"valid elements\".\r\n *\r\n * The provided forEachFunc(child, index) will be called for each\r\n * leaf child with the index reflecting the position relative to \"valid components\".\r\n */\r\n\r\n\r\nfunction forEach(children, func) {\r\n  let index = 0;\r\n  React.Children.forEach(children, child => {\r\n    if ( /*#__PURE__*/React.isValidElement(child)) func(child, index++);\r\n  });\r\n}\r\n/**\r\n * Finds whether a component's `children` prop includes a React element of the\r\n * specified type.\r\n */\r\n\r\n\r\nfunction hasChildOfType(children, type) {\r\n  return React.Children.toArray(children).some(child => /*#__PURE__*/React.isValidElement(child) && child.type === type);\r\n}\r\n\r\nexport { map, forEach, hasChildOfType };"]},"metadata":{},"sourceType":"module"}