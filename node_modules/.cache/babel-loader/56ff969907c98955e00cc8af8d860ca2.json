{"ast":null,"code":"import getScrollParent from \"./getScrollParent.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport getWindow from \"./getWindow.js\";\nimport isScrollParent from \"./isScrollParent.js\";\n/*\r\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\r\nuntil we get to the top window object. This list is what we attach scroll listeners\r\nto, because if any of these parent elements scroll, we'll need to re-calculate the\r\nreference element's position.\r\n*/\n\nexport default function listScrollParents(element, list) {\n  var _element$ownerDocumen;\n\n  if (list === void 0) {\n    list = [];\n  }\n\n  var scrollParent = getScrollParent(element);\n  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n  var win = getWindow(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n  updatedList.concat(listScrollParents(getParentNode(target)));\n}","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/FinalMilestone/ISAproject/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"],"names":["getScrollParent","getParentNode","getWindow","isScrollParent","listScrollParents","element","list","_element$ownerDocumen","scrollParent","isBody","ownerDocument","body","win","target","concat","visualViewport","updatedList"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,sBAA5B;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,iBAAT,CAA2BC,OAA3B,EAAoCC,IAApC,EAA0C;AACvD,MAAIC,qBAAJ;;AAEA,MAAID,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnBA,IAAAA,IAAI,GAAG,EAAP;AACD;;AAED,MAAIE,YAAY,GAAGR,eAAe,CAACK,OAAD,CAAlC;AACA,MAAII,MAAM,GAAGD,YAAY,MAAM,CAACD,qBAAqB,GAAGF,OAAO,CAACK,aAAjC,KAAmD,IAAnD,GAA0D,KAAK,CAA/D,GAAmEH,qBAAqB,CAACI,IAA/F,CAAzB;AACA,MAAIC,GAAG,GAAGV,SAAS,CAACM,YAAD,CAAnB;AACA,MAAIK,MAAM,GAAGJ,MAAM,GAAG,CAACG,GAAD,EAAME,MAAN,CAAaF,GAAG,CAACG,cAAJ,IAAsB,EAAnC,EAAuCZ,cAAc,CAACK,YAAD,CAAd,GAA+BA,YAA/B,GAA8C,EAArF,CAAH,GAA8FA,YAAjH;AACA,MAAIQ,WAAW,GAAGV,IAAI,CAACQ,MAAL,CAAYD,MAAZ,CAAlB;AACA,SAAOJ,MAAM,GAAGO,WAAH,GAAiB;AAC9BA,EAAAA,WAAW,CAACF,MAAZ,CAAmBV,iBAAiB,CAACH,aAAa,CAACY,MAAD,CAAd,CAApC,CADA;AAED","sourcesContent":["import getScrollParent from \"./getScrollParent.js\";\r\nimport getParentNode from \"./getParentNode.js\";\r\nimport getWindow from \"./getWindow.js\";\r\nimport isScrollParent from \"./isScrollParent.js\";\r\n/*\r\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\r\nuntil we get to the top window object. This list is what we attach scroll listeners\r\nto, because if any of these parent elements scroll, we'll need to re-calculate the\r\nreference element's position.\r\n*/\r\n\r\nexport default function listScrollParents(element, list) {\r\n  var _element$ownerDocumen;\r\n\r\n  if (list === void 0) {\r\n    list = [];\r\n  }\r\n\r\n  var scrollParent = getScrollParent(element);\r\n  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\r\n  var win = getWindow(scrollParent);\r\n  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\r\n  var updatedList = list.concat(target);\r\n  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\r\n  updatedList.concat(listScrollParents(getParentNode(target)));\r\n}"]},"metadata":{},"sourceType":"module"}