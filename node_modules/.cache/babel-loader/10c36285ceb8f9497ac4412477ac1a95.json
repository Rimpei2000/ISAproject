{"ast":null,"code":"import css from 'dom-helpers/css';\nimport { dataAttr } from './DataKey';\nimport getBodyScrollbarWidth from './getScrollbarWidth';\nexport const OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\n/**\n * Manages a stack of Modals as well as ensuring\n * body scrolling is is disabled and padding accounted for\n */\n\nclass ModalManager {\n  constructor() {\n    let {\n      ownerDocument,\n      handleContainerOverflow = true,\n      isRTL = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.isRTL = isRTL;\n    this.modals = [];\n    this.ownerDocument = ownerDocument;\n  }\n\n  getScrollbarWidth() {\n    return getBodyScrollbarWidth(this.ownerDocument);\n  }\n\n  getElement() {\n    return (this.ownerDocument || document).body;\n  }\n\n  setModalAttributes(_modal) {// For overriding\n  }\n\n  removeModalAttributes(_modal) {// For overriding\n  }\n\n  setContainerStyle(containerState) {\n    const style = {\n      overflow: 'hidden'\n    }; // we are only interested in the actual `style` here\n    // because we will override it\n\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const container = this.getElement();\n    containerState.style = {\n      overflow: container.style.overflow,\n      [paddingProp]: container.style[paddingProp]\n    };\n\n    if (containerState.scrollBarWidth) {\n      // use computed style, here to get the real padding\n      // to add our scrollbar width\n      style[paddingProp] = `${parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth}px`;\n    }\n\n    container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\n    css(container, style);\n  }\n\n  reset() {\n    [...this.modals].forEach(m => this.remove(m));\n  }\n\n  removeContainerStyle(containerState) {\n    const container = this.getElement();\n    container.removeAttribute(OPEN_DATA_ATTRIBUTE);\n    Object.assign(container.style, containerState.style);\n  }\n\n  add(modal) {\n    let modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx !== -1) {\n      return modalIdx;\n    }\n\n    modalIdx = this.modals.length;\n    this.modals.push(modal);\n    this.setModalAttributes(modal);\n\n    if (modalIdx !== 0) {\n      return modalIdx;\n    }\n\n    this.state = {\n      scrollBarWidth: this.getScrollbarWidth(),\n      style: {}\n    };\n\n    if (this.handleContainerOverflow) {\n      this.setContainerStyle(this.state);\n    }\n\n    return modalIdx;\n  }\n\n  remove(modal) {\n    const modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx === -1) {\n      return;\n    }\n\n    this.modals.splice(modalIdx, 1); // if that was the last modal in a container,\n    // clean up the container\n\n    if (!this.modals.length && this.handleContainerOverflow) {\n      this.removeContainerStyle(this.state);\n    }\n\n    this.removeModalAttributes(modal);\n  }\n\n  isTopModal(modal) {\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n  }\n\n}\n\nexport default ModalManager;","map":{"version":3,"sources":["/Users/rim.sh/Desktop/ISAproject/node_modules/@restart/ui/esm/ModalManager.js"],"names":["css","dataAttr","getBodyScrollbarWidth","OPEN_DATA_ATTRIBUTE","ModalManager","constructor","ownerDocument","handleContainerOverflow","isRTL","modals","getScrollbarWidth","getElement","document","body","setModalAttributes","_modal","removeModalAttributes","setContainerStyle","containerState","style","overflow","paddingProp","container","scrollBarWidth","parseInt","setAttribute","reset","forEach","m","remove","removeContainerStyle","removeAttribute","Object","assign","add","modal","modalIdx","indexOf","length","push","state","splice","isTopModal"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,iBAAhB;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,qBAAP,MAAkC,qBAAlC;AACA,OAAO,MAAMC,mBAAmB,GAAGF,QAAQ,CAAC,YAAD,CAApC;AACP;AACA;AACA;AACA;;AAEA,MAAMG,YAAN,CAAmB;AACjBC,EAAAA,WAAW,GAIH;AAAA,QAJI;AACVC,MAAAA,aADU;AAEVC,MAAAA,uBAAuB,GAAG,IAFhB;AAGVC,MAAAA,KAAK,GAAG;AAHE,KAIJ,uEAAJ,EAAI;AACN,SAAKD,uBAAL,GAA+BA,uBAA/B;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKH,aAAL,GAAqBA,aAArB;AACD;;AAEDI,EAAAA,iBAAiB,GAAG;AAClB,WAAOR,qBAAqB,CAAC,KAAKI,aAAN,CAA5B;AACD;;AAEDK,EAAAA,UAAU,GAAG;AACX,WAAO,CAAC,KAAKL,aAAL,IAAsBM,QAAvB,EAAiCC,IAAxC;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,MAAD,EAAS,CAAC;AAC3B;;AAEDC,EAAAA,qBAAqB,CAACD,MAAD,EAAS,CAAC;AAC9B;;AAEDE,EAAAA,iBAAiB,CAACC,cAAD,EAAiB;AAChC,UAAMC,KAAK,GAAG;AACZC,MAAAA,QAAQ,EAAE;AADE,KAAd,CADgC,CAG7B;AACH;;AAEA,UAAMC,WAAW,GAAG,KAAKb,KAAL,GAAa,aAAb,GAA6B,cAAjD;AACA,UAAMc,SAAS,GAAG,KAAKX,UAAL,EAAlB;AACAO,IAAAA,cAAc,CAACC,KAAf,GAAuB;AACrBC,MAAAA,QAAQ,EAAEE,SAAS,CAACH,KAAV,CAAgBC,QADL;AAErB,OAACC,WAAD,GAAeC,SAAS,CAACH,KAAV,CAAgBE,WAAhB;AAFM,KAAvB;;AAKA,QAAIH,cAAc,CAACK,cAAnB,EAAmC;AACjC;AACA;AACAJ,MAAAA,KAAK,CAACE,WAAD,CAAL,GAAsB,GAAEG,QAAQ,CAACxB,GAAG,CAACsB,SAAD,EAAYD,WAAZ,CAAH,IAA+B,GAAhC,EAAqC,EAArC,CAAR,GAAmDH,cAAc,CAACK,cAAe,IAAzG;AACD;;AAEDD,IAAAA,SAAS,CAACG,YAAV,CAAuBtB,mBAAvB,EAA4C,EAA5C;AACAH,IAAAA,GAAG,CAACsB,SAAD,EAAYH,KAAZ,CAAH;AACD;;AAEDO,EAAAA,KAAK,GAAG;AACN,KAAC,GAAG,KAAKjB,MAAT,EAAiBkB,OAAjB,CAAyBC,CAAC,IAAI,KAAKC,MAAL,CAAYD,CAAZ,CAA9B;AACD;;AAEDE,EAAAA,oBAAoB,CAACZ,cAAD,EAAiB;AACnC,UAAMI,SAAS,GAAG,KAAKX,UAAL,EAAlB;AACAW,IAAAA,SAAS,CAACS,eAAV,CAA0B5B,mBAA1B;AACA6B,IAAAA,MAAM,CAACC,MAAP,CAAcX,SAAS,CAACH,KAAxB,EAA+BD,cAAc,CAACC,KAA9C;AACD;;AAEDe,EAAAA,GAAG,CAACC,KAAD,EAAQ;AACT,QAAIC,QAAQ,GAAG,KAAK3B,MAAL,CAAY4B,OAAZ,CAAoBF,KAApB,CAAf;;AAEA,QAAIC,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnB,aAAOA,QAAP;AACD;;AAEDA,IAAAA,QAAQ,GAAG,KAAK3B,MAAL,CAAY6B,MAAvB;AACA,SAAK7B,MAAL,CAAY8B,IAAZ,CAAiBJ,KAAjB;AACA,SAAKrB,kBAAL,CAAwBqB,KAAxB;;AAEA,QAAIC,QAAQ,KAAK,CAAjB,EAAoB;AAClB,aAAOA,QAAP;AACD;;AAED,SAAKI,KAAL,GAAa;AACXjB,MAAAA,cAAc,EAAE,KAAKb,iBAAL,EADL;AAEXS,MAAAA,KAAK,EAAE;AAFI,KAAb;;AAKA,QAAI,KAAKZ,uBAAT,EAAkC;AAChC,WAAKU,iBAAL,CAAuB,KAAKuB,KAA5B;AACD;;AAED,WAAOJ,QAAP;AACD;;AAEDP,EAAAA,MAAM,CAACM,KAAD,EAAQ;AACZ,UAAMC,QAAQ,GAAG,KAAK3B,MAAL,CAAY4B,OAAZ,CAAoBF,KAApB,CAAjB;;AAEA,QAAIC,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnB;AACD;;AAED,SAAK3B,MAAL,CAAYgC,MAAZ,CAAmBL,QAAnB,EAA6B,CAA7B,EAPY,CAOqB;AACjC;;AAEA,QAAI,CAAC,KAAK3B,MAAL,CAAY6B,MAAb,IAAuB,KAAK/B,uBAAhC,EAAyD;AACvD,WAAKuB,oBAAL,CAA0B,KAAKU,KAA/B;AACD;;AAED,SAAKxB,qBAAL,CAA2BmB,KAA3B;AACD;;AAEDO,EAAAA,UAAU,CAACP,KAAD,EAAQ;AAChB,WAAO,CAAC,CAAC,KAAK1B,MAAL,CAAY6B,MAAd,IAAwB,KAAK7B,MAAL,CAAY,KAAKA,MAAL,CAAY6B,MAAZ,GAAqB,CAAjC,MAAwCH,KAAvE;AACD;;AAzGgB;;AA6GnB,eAAe/B,YAAf","sourcesContent":["import css from 'dom-helpers/css';\nimport { dataAttr } from './DataKey';\nimport getBodyScrollbarWidth from './getScrollbarWidth';\nexport const OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\n/**\n * Manages a stack of Modals as well as ensuring\n * body scrolling is is disabled and padding accounted for\n */\n\nclass ModalManager {\n  constructor({\n    ownerDocument,\n    handleContainerOverflow = true,\n    isRTL = false\n  } = {}) {\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.isRTL = isRTL;\n    this.modals = [];\n    this.ownerDocument = ownerDocument;\n  }\n\n  getScrollbarWidth() {\n    return getBodyScrollbarWidth(this.ownerDocument);\n  }\n\n  getElement() {\n    return (this.ownerDocument || document).body;\n  }\n\n  setModalAttributes(_modal) {// For overriding\n  }\n\n  removeModalAttributes(_modal) {// For overriding\n  }\n\n  setContainerStyle(containerState) {\n    const style = {\n      overflow: 'hidden'\n    }; // we are only interested in the actual `style` here\n    // because we will override it\n\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const container = this.getElement();\n    containerState.style = {\n      overflow: container.style.overflow,\n      [paddingProp]: container.style[paddingProp]\n    };\n\n    if (containerState.scrollBarWidth) {\n      // use computed style, here to get the real padding\n      // to add our scrollbar width\n      style[paddingProp] = `${parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth}px`;\n    }\n\n    container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\n    css(container, style);\n  }\n\n  reset() {\n    [...this.modals].forEach(m => this.remove(m));\n  }\n\n  removeContainerStyle(containerState) {\n    const container = this.getElement();\n    container.removeAttribute(OPEN_DATA_ATTRIBUTE);\n    Object.assign(container.style, containerState.style);\n  }\n\n  add(modal) {\n    let modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx !== -1) {\n      return modalIdx;\n    }\n\n    modalIdx = this.modals.length;\n    this.modals.push(modal);\n    this.setModalAttributes(modal);\n\n    if (modalIdx !== 0) {\n      return modalIdx;\n    }\n\n    this.state = {\n      scrollBarWidth: this.getScrollbarWidth(),\n      style: {}\n    };\n\n    if (this.handleContainerOverflow) {\n      this.setContainerStyle(this.state);\n    }\n\n    return modalIdx;\n  }\n\n  remove(modal) {\n    const modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx === -1) {\n      return;\n    }\n\n    this.modals.splice(modalIdx, 1); // if that was the last modal in a container,\n    // clean up the container\n\n    if (!this.modals.length && this.handleContainerOverflow) {\n      this.removeContainerStyle(this.state);\n    }\n\n    this.removeModalAttributes(modal);\n  }\n\n  isTopModal(modal) {\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n  }\n\n}\n\nexport default ModalManager;"]},"metadata":{},"sourceType":"module"}