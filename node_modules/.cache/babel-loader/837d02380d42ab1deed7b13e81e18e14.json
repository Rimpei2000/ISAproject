{"ast":null,"code":"import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useDropdownMenu } from '@restart/ui/DropdownMenu';\nimport useIsomorphicEffect from '@restart/hooks/useIsomorphicEffect';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport warning from 'warning';\nimport DropdownContext from './DropdownContext';\nimport InputGroupContext from './InputGroupContext';\nimport NavbarContext from './NavbarContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  flip: true\n};\nexport function getDropdownMenuPlacement(alignEnd, dropDirection, isRTL) {\n  const topStart = isRTL ? 'top-end' : 'top-start';\n  const topEnd = isRTL ? 'top-start' : 'top-end';\n  const bottomStart = isRTL ? 'bottom-end' : 'bottom-start';\n  const bottomEnd = isRTL ? 'bottom-start' : 'bottom-end';\n  const leftStart = isRTL ? 'right-start' : 'left-start';\n  const leftEnd = isRTL ? 'right-end' : 'left-end';\n  const rightStart = isRTL ? 'left-start' : 'right-start';\n  const rightEnd = isRTL ? 'left-end' : 'right-end';\n  let placement = alignEnd ? bottomEnd : bottomStart;\n  if (dropDirection === 'up') placement = alignEnd ? topEnd : topStart;else if (dropDirection === 'end') placement = alignEnd ? rightEnd : rightStart;else if (dropDirection === 'start') placement = alignEnd ? leftEnd : leftStart;\n  return placement;\n}\nconst DropdownMenu = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    bsPrefix,\n    className,\n    align,\n    rootCloseEvent,\n    flip,\n    show: showProps,\n    renderOnMount,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    popperConfig,\n    variant,\n    ...props\n  } = _ref;\n  let alignEnd = false;\n  const isNavbar = useContext(NavbarContext);\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-menu');\n  const {\n    align: contextAlign,\n    drop,\n    isRTL\n  } = useContext(DropdownContext);\n  align = align || contextAlign;\n  const isInputGroup = useContext(InputGroupContext);\n  const alignClasses = [];\n\n  if (align) {\n    if (typeof align === 'object') {\n      const keys = Object.keys(align);\n      process.env.NODE_ENV !== \"production\" ? warning(keys.length === 1, 'There should only be 1 breakpoint when passing an object to `align`') : void 0;\n\n      if (keys.length) {\n        const brkPoint = keys[0];\n        const direction = align[brkPoint]; // .dropdown-menu-end is required for responsively aligning\n        // left in addition to align left classes.\n\n        alignEnd = direction === 'start';\n        alignClasses.push(`${prefix}-${brkPoint}-${direction}`);\n      }\n    } else if (align === 'end') {\n      alignEnd = true;\n    }\n  }\n\n  const placement = getDropdownMenuPlacement(alignEnd, drop, isRTL);\n  const [menuProps, {\n    hasShown,\n    popper,\n    show,\n    toggle\n  }] = useDropdownMenu({\n    flip,\n    rootCloseEvent,\n    show: showProps,\n    usePopper: !isNavbar && alignClasses.length === 0,\n    offset: [0, 2],\n    popperConfig,\n    placement\n  });\n  menuProps.ref = useMergedRefs(useWrappedRefWithWarning(ref, 'DropdownMenu'), menuProps.ref);\n  useIsomorphicEffect(() => {\n    // Popper's initial position for the menu is incorrect when\n    // renderOnMount=true. Need to call update() to correct it.\n    if (show) popper == null ? void 0 : popper.update();\n  }, [show]);\n  if (!hasShown && !renderOnMount && !isInputGroup) return null; // For custom components provide additional, non-DOM, props;\n\n  if (typeof Component !== 'string') {\n    menuProps.show = show;\n\n    menuProps.close = () => toggle == null ? void 0 : toggle(false);\n\n    menuProps.align = align;\n  }\n\n  let style = props.style;\n\n  if (popper != null && popper.placement) {\n    // we don't need the default popper style,\n    // menus are display: none when not shown.\n    style = { ...props.style,\n      ...menuProps.style\n    };\n    props['x-placement'] = popper.placement;\n  }\n\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...menuProps,\n    style: style // Bootstrap css requires this data attrib to style responsive menus.\n    ,\n    ...((alignClasses.length || isNavbar) && {\n      'data-bs-popper': 'static'\n    }),\n    className: classNames(className, prefix, show && 'show', alignEnd && `${prefix}-end`, variant && `${prefix}-${variant}`, ...alignClasses)\n  });\n});\nDropdownMenu.displayName = 'DropdownMenu';\nDropdownMenu.defaultProps = defaultProps;\nexport default DropdownMenu;","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/react-bootstrap/esm/DropdownMenu.js"],"names":["classNames","React","useContext","useDropdownMenu","useIsomorphicEffect","useMergedRefs","warning","DropdownContext","InputGroupContext","NavbarContext","useBootstrapPrefix","useWrappedRefWithWarning","alignPropType","jsx","_jsx","defaultProps","flip","getDropdownMenuPlacement","alignEnd","dropDirection","isRTL","topStart","topEnd","bottomStart","bottomEnd","leftStart","leftEnd","rightStart","rightEnd","placement","DropdownMenu","forwardRef","ref","bsPrefix","className","align","rootCloseEvent","show","showProps","renderOnMount","as","Component","popperConfig","variant","props","isNavbar","prefix","contextAlign","drop","isInputGroup","alignClasses","keys","Object","process","env","NODE_ENV","length","brkPoint","direction","push","menuProps","hasShown","popper","toggle","usePopper","offset","update","close","style","displayName"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport { useContext } from 'react';\r\nimport { useDropdownMenu } from '@restart/ui/DropdownMenu';\r\nimport useIsomorphicEffect from '@restart/hooks/useIsomorphicEffect';\r\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\r\nimport warning from 'warning';\r\nimport DropdownContext from './DropdownContext';\r\nimport InputGroupContext from './InputGroupContext';\r\nimport NavbarContext from './NavbarContext';\r\nimport { useBootstrapPrefix } from './ThemeProvider';\r\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\r\nimport { alignPropType } from './types';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nconst defaultProps = {\r\n  flip: true\r\n};\r\nexport function getDropdownMenuPlacement(alignEnd, dropDirection, isRTL) {\r\n  const topStart = isRTL ? 'top-end' : 'top-start';\r\n  const topEnd = isRTL ? 'top-start' : 'top-end';\r\n  const bottomStart = isRTL ? 'bottom-end' : 'bottom-start';\r\n  const bottomEnd = isRTL ? 'bottom-start' : 'bottom-end';\r\n  const leftStart = isRTL ? 'right-start' : 'left-start';\r\n  const leftEnd = isRTL ? 'right-end' : 'left-end';\r\n  const rightStart = isRTL ? 'left-start' : 'right-start';\r\n  const rightEnd = isRTL ? 'left-end' : 'right-end';\r\n  let placement = alignEnd ? bottomEnd : bottomStart;\r\n  if (dropDirection === 'up') placement = alignEnd ? topEnd : topStart;else if (dropDirection === 'end') placement = alignEnd ? rightEnd : rightStart;else if (dropDirection === 'start') placement = alignEnd ? leftEnd : leftStart;\r\n  return placement;\r\n}\r\nconst DropdownMenu = /*#__PURE__*/React.forwardRef(({\r\n  bsPrefix,\r\n  className,\r\n  align,\r\n  rootCloseEvent,\r\n  flip,\r\n  show: showProps,\r\n  renderOnMount,\r\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\r\n  as: Component = 'div',\r\n  popperConfig,\r\n  variant,\r\n  ...props\r\n}, ref) => {\r\n  let alignEnd = false;\r\n  const isNavbar = useContext(NavbarContext);\r\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-menu');\r\n  const {\r\n    align: contextAlign,\r\n    drop,\r\n    isRTL\r\n  } = useContext(DropdownContext);\r\n  align = align || contextAlign;\r\n  const isInputGroup = useContext(InputGroupContext);\r\n  const alignClasses = [];\r\n\r\n  if (align) {\r\n    if (typeof align === 'object') {\r\n      const keys = Object.keys(align);\r\n      process.env.NODE_ENV !== \"production\" ? warning(keys.length === 1, 'There should only be 1 breakpoint when passing an object to `align`') : void 0;\r\n\r\n      if (keys.length) {\r\n        const brkPoint = keys[0];\r\n        const direction = align[brkPoint]; // .dropdown-menu-end is required for responsively aligning\r\n        // left in addition to align left classes.\r\n\r\n        alignEnd = direction === 'start';\r\n        alignClasses.push(`${prefix}-${brkPoint}-${direction}`);\r\n      }\r\n    } else if (align === 'end') {\r\n      alignEnd = true;\r\n    }\r\n  }\r\n\r\n  const placement = getDropdownMenuPlacement(alignEnd, drop, isRTL);\r\n  const [menuProps, {\r\n    hasShown,\r\n    popper,\r\n    show,\r\n    toggle\r\n  }] = useDropdownMenu({\r\n    flip,\r\n    rootCloseEvent,\r\n    show: showProps,\r\n    usePopper: !isNavbar && alignClasses.length === 0,\r\n    offset: [0, 2],\r\n    popperConfig,\r\n    placement\r\n  });\r\n  menuProps.ref = useMergedRefs(useWrappedRefWithWarning(ref, 'DropdownMenu'), menuProps.ref);\r\n  useIsomorphicEffect(() => {\r\n    // Popper's initial position for the menu is incorrect when\r\n    // renderOnMount=true. Need to call update() to correct it.\r\n    if (show) popper == null ? void 0 : popper.update();\r\n  }, [show]);\r\n  if (!hasShown && !renderOnMount && !isInputGroup) return null; // For custom components provide additional, non-DOM, props;\r\n\r\n  if (typeof Component !== 'string') {\r\n    menuProps.show = show;\r\n\r\n    menuProps.close = () => toggle == null ? void 0 : toggle(false);\r\n\r\n    menuProps.align = align;\r\n  }\r\n\r\n  let style = props.style;\r\n\r\n  if (popper != null && popper.placement) {\r\n    // we don't need the default popper style,\r\n    // menus are display: none when not shown.\r\n    style = { ...props.style,\r\n      ...menuProps.style\r\n    };\r\n    props['x-placement'] = popper.placement;\r\n  }\r\n\r\n  return /*#__PURE__*/_jsx(Component, { ...props,\r\n    ...menuProps,\r\n    style: style // Bootstrap css requires this data attrib to style responsive menus.\r\n    ,\r\n    ...((alignClasses.length || isNavbar) && {\r\n      'data-bs-popper': 'static'\r\n    }),\r\n    className: classNames(className, prefix, show && 'show', alignEnd && `${prefix}-end`, variant && `${prefix}-${variant}`, ...alignClasses)\r\n  });\r\n});\r\nDropdownMenu.displayName = 'DropdownMenu';\r\nDropdownMenu.defaultProps = defaultProps;\r\nexport default DropdownMenu;"]},"metadata":{},"sourceType":"module"}