{"ast":null,"code":"'use strict';\n\nvar VERSION = require('../env/data').version;\n\nvar validators = {}; // eslint-disable-next-line func-names\n\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function (type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\nvar deprecatedWarnings = {};\n/**\r\n * Transitional option validator\r\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\r\n * @param {string?} version - deprecated version / removed since version\r\n * @param {string?} message - some message with additional info\r\n * @returns {function}\r\n */\n\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  } // eslint-disable-next-line func-names\n\n\n  return function (value, opt, opts) {\n    if (validator === false) {\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true; // eslint-disable-next-line no-console\n\n      console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n/**\r\n * Assert object's properties type\r\n * @param {object} options\r\n * @param {object} schema\r\n * @param {boolean?} allowUnknown\r\n */\n\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n\n  var keys = Object.keys(options);\n  var i = keys.length;\n\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n\n      if (result !== true) {\n        throw new TypeError('option ' + opt + ' must be ' + result);\n      }\n\n      continue;\n    }\n\n    if (allowUnknown !== true) {\n      throw Error('Unknown option ' + opt);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/axios/lib/helpers/validator.js"],"names":["VERSION","require","version","validators","forEach","type","i","validator","thing","deprecatedWarnings","transitional","message","formatMessage","opt","desc","value","opts","Error","console","warn","assertOptions","options","schema","allowUnknown","TypeError","keys","Object","length","result","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar VERSION = require('../env/data').version;\r\n\r\nvar validators = {};\r\n\r\n// eslint-disable-next-line func-names\r\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\r\n  validators[type] = function validator(thing) {\r\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\r\n  };\r\n});\r\n\r\nvar deprecatedWarnings = {};\r\n\r\n/**\r\n * Transitional option validator\r\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\r\n * @param {string?} version - deprecated version / removed since version\r\n * @param {string?} message - some message with additional info\r\n * @returns {function}\r\n */\r\nvalidators.transitional = function transitional(validator, version, message) {\r\n  function formatMessage(opt, desc) {\r\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\r\n  }\r\n\r\n  // eslint-disable-next-line func-names\r\n  return function(value, opt, opts) {\r\n    if (validator === false) {\r\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\r\n    }\r\n\r\n    if (version && !deprecatedWarnings[opt]) {\r\n      deprecatedWarnings[opt] = true;\r\n      // eslint-disable-next-line no-console\r\n      console.warn(\r\n        formatMessage(\r\n          opt,\r\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\r\n        )\r\n      );\r\n    }\r\n\r\n    return validator ? validator(value, opt, opts) : true;\r\n  };\r\n};\r\n\r\n/**\r\n * Assert object's properties type\r\n * @param {object} options\r\n * @param {object} schema\r\n * @param {boolean?} allowUnknown\r\n */\r\n\r\nfunction assertOptions(options, schema, allowUnknown) {\r\n  if (typeof options !== 'object') {\r\n    throw new TypeError('options must be an object');\r\n  }\r\n  var keys = Object.keys(options);\r\n  var i = keys.length;\r\n  while (i-- > 0) {\r\n    var opt = keys[i];\r\n    var validator = schema[opt];\r\n    if (validator) {\r\n      var value = options[opt];\r\n      var result = value === undefined || validator(value, opt, options);\r\n      if (result !== true) {\r\n        throw new TypeError('option ' + opt + ' must be ' + result);\r\n      }\r\n      continue;\r\n    }\r\n    if (allowUnknown !== true) {\r\n      throw Error('Unknown option ' + opt);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  assertOptions: assertOptions,\r\n  validators: validators\r\n};\r\n"]},"metadata":{},"sourceType":"script"}