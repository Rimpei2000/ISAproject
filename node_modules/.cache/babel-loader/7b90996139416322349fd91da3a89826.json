{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\n/* global document */\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport { useEffect, useMemo, useRef, useContext } from 'react';\nimport { applyReactStyle } from '../utils/apply-react-style';\nimport { MapContext } from './map';\nimport { deepEqual } from '../utils/deep-equal'; // Adapted from https://github.com/mapbox/mapbox-gl-js/blob/v1.13.0/src/ui/popup.js\n\nfunction getClassList(className) {\n  return new Set(className ? className.trim().split(/\\s+/) : []);\n}\n/* eslint-disable complexity,max-statements */\n\n\nfunction Popup(props) {\n  var _useContext = useContext(MapContext),\n      map = _useContext.map,\n      mapLib = _useContext.mapLib;\n\n  var container = useMemo(function () {\n    return document.createElement('div');\n  }, []);\n  var thisRef = useRef({\n    props: props\n  });\n  thisRef.current.props = props;\n  var popup = useMemo(function () {\n    var options = _objectSpread({}, props);\n\n    var pp = new mapLib.Popup(options).setLngLat([props.longitude, props.latitude]);\n    pp.on('open', function (e) {\n      var _thisRef$current$prop, _thisRef$current$prop2;\n\n      (_thisRef$current$prop = (_thisRef$current$prop2 = thisRef.current.props).onOpen) === null || _thisRef$current$prop === void 0 ? void 0 : _thisRef$current$prop.call(_thisRef$current$prop2, e);\n    });\n    pp.on('close', function (e) {\n      var _thisRef$current$prop3, _thisRef$current$prop4;\n\n      (_thisRef$current$prop3 = (_thisRef$current$prop4 = thisRef.current.props).onClose) === null || _thisRef$current$prop3 === void 0 ? void 0 : _thisRef$current$prop3.call(_thisRef$current$prop4, e);\n    });\n    return pp;\n  }, []);\n  useEffect(function () {\n    popup.setDOMContent(container).addTo(map.getMap());\n    return function () {\n      if (popup.isOpen()) {\n        popup.remove();\n      }\n    };\n  }, []);\n  useEffect(function () {\n    applyReactStyle(popup.getElement(), props.style);\n  }, [props.style]);\n\n  if (popup.isOpen()) {\n    if (popup.getLngLat().lng !== props.longitude || popup.getLngLat().lat !== props.latitude) {\n      popup.setLngLat([props.longitude, props.latitude]);\n    } // @ts-ignore\n\n\n    if (props.offset && !deepEqual(popup.options.offset, props.offset)) {\n      popup.setOffset(props.offset);\n    } // @ts-ignore\n\n\n    if (popup.options.anchor !== props.anchor || popup.options.maxWidth !== props.maxWidth) {\n      // @ts-ignore\n      popup.options.anchor = props.anchor;\n      popup.setMaxWidth(props.maxWidth);\n    } // @ts-ignore\n\n\n    if (popup.options.className !== props.className) {\n      // @ts-ignore\n      var prevClassList = getClassList(popup.options.className);\n      var nextClassList = getClassList(props.className);\n\n      var _iterator = _createForOfIteratorHelper(prevClassList),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var c = _step.value;\n\n          if (!nextClassList.has(c)) {\n            popup.removeClassName(c);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(nextClassList),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _c = _step2.value;\n\n          if (!prevClassList.has(_c)) {\n            popup.addClassName(_c);\n          }\n        } // @ts-ignore\n\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      popup.options.className = props.className;\n    }\n  }\n\n  return createPortal(props.children, container);\n} // @ts-ignore\n\n\nexport default React.memo(Popup);","map":{"version":3,"mappings":";;;AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,YAAR,QAA2B,WAA3B;AACA,SAAQC,SAAR,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,QAAqD,OAArD;AACA,SAAQC,eAAR,QAA8B,4BAA9B;AAIA,SAAQC,UAAR,QAAyB,OAAzB;AACA,SAAQC,SAAR,QAAwB,qBAAxB,C,CAyDA;;AACA,SAASC,YAAT,CAAsBC,SAAtB,EAAuC;AACrC,SAAO,IAAIC,GAAJ,CAAQD,SAAS,GAAGA,SAAS,CAACE,IAAV,GAAiBC,KAAjB,CAAuB,KAAvB,CAAH,GAAmC,EAApD,CAAP;AACD;AAED;;;AACA,SAASC,KAAT,CAAeC,KAAf,EAAgC;AAC9B,oBAAsBV,UAAU,CAACE,UAAD,CAAhC;AAAA,MAAOS,GAAP,eAAOA,GAAP;AAAA,MAAYC,MAAZ,eAAYA,MAAZ;;AACA,MAAMC,SAAS,GAAGf,OAAO,CAAC,YAAK;AAC7B,WAAOgB,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAP;AACD,GAFwB,EAEtB,EAFsB,CAAzB;AAGA,MAAMC,OAAO,GAAGjB,MAAM,CAAC;AAACW,SAAK,EAALA;AAAD,GAAD,CAAtB;AACAM,SAAO,CAACC,OAAR,CAAgBP,KAAhB,GAAwBA,KAAxB;AAEA,MAAMQ,KAAK,GAAgBpB,OAAO,CAAC,YAAK;AACtC,QAAMqB,OAAO,qBAAOT,KAAP,CAAb;;AACA,QAAMU,EAAE,GAAG,IAAIR,MAAM,CAACH,KAAX,CAAiBU,OAAjB,EAA0BE,SAA1B,CAAoC,CAACX,KAAK,CAACY,SAAP,EAAkBZ,KAAK,CAACa,QAAxB,CAApC,CAAX;AACAH,MAAE,CAACI,EAAH,CAAM,MAAN,EAAc,WAAC,EAAG;AAAA;;AAChB,gEAAO,CAACP,OAAR,CAAgBP,KAAhB,EAAsBe,MAAtB,6GAA+BC,CAA/B;AACD,KAFD;AAGAN,MAAE,CAACI,EAAH,CAAM,OAAN,EAAe,WAAC,EAAG;AAAA;;AACjB,iEAAO,CAACP,OAAR,CAAgBP,KAAhB,EAAsBiB,OAAtB,+GAAgCD,CAAhC;AACD,KAFD;AAGA,WAAON,EAAP;AACD,GAViC,EAU/B,EAV+B,CAAlC;AAYAvB,WAAS,CAAC,YAAK;AACbqB,SAAK,CAACU,aAAN,CAAoBf,SAApB,EAA+BgB,KAA/B,CAAqClB,GAAG,CAACmB,MAAJ,EAArC;AAEA,WAAO,YAAK;AACV,UAAIZ,KAAK,CAACa,MAAN,EAAJ,EAAoB;AAClBb,aAAK,CAACc,MAAN;AACD;AACF,KAJD;AAKD,GARQ,EAQN,EARM,CAAT;AAUAnC,WAAS,CAAC,YAAK;AACbI,mBAAe,CAACiB,KAAK,CAACe,UAAN,EAAD,EAAqBvB,KAAK,CAACwB,KAA3B,CAAf;AACD,GAFQ,EAEN,CAACxB,KAAK,CAACwB,KAAP,CAFM,CAAT;;AAIA,MAAIhB,KAAK,CAACa,MAAN,EAAJ,EAAoB;AAClB,QAAIb,KAAK,CAACiB,SAAN,GAAkBC,GAAlB,KAA0B1B,KAAK,CAACY,SAAhC,IAA6CJ,KAAK,CAACiB,SAAN,GAAkBE,GAAlB,KAA0B3B,KAAK,CAACa,QAAjF,EAA2F;AACzFL,WAAK,CAACG,SAAN,CAAgB,CAACX,KAAK,CAACY,SAAP,EAAkBZ,KAAK,CAACa,QAAxB,CAAhB;AACD,KAHiB,CAIlB;;;AACA,QAAIb,KAAK,CAAC4B,MAAN,IAAgB,CAACnC,SAAS,CAACe,KAAK,CAACC,OAAN,CAAcmB,MAAf,EAAuB5B,KAAK,CAAC4B,MAA7B,CAA9B,EAAoE;AAClEpB,WAAK,CAACqB,SAAN,CAAgB7B,KAAK,CAAC4B,MAAtB;AACD,KAPiB,CAQlB;;;AACA,QAAIpB,KAAK,CAACC,OAAN,CAAcqB,MAAd,KAAyB9B,KAAK,CAAC8B,MAA/B,IAAyCtB,KAAK,CAACC,OAAN,CAAcsB,QAAd,KAA2B/B,KAAK,CAAC+B,QAA9E,EAAwF;AACtF;AACAvB,WAAK,CAACC,OAAN,CAAcqB,MAAd,GAAuB9B,KAAK,CAAC8B,MAA7B;AACAtB,WAAK,CAACwB,WAAN,CAAkBhC,KAAK,CAAC+B,QAAxB;AACD,KAbiB,CAclB;;;AACA,QAAIvB,KAAK,CAACC,OAAN,CAAcd,SAAd,KAA4BK,KAAK,CAACL,SAAtC,EAAiD;AAC/C;AACA,UAAMsC,aAAa,GAAGvC,YAAY,CAACc,KAAK,CAACC,OAAN,CAAcd,SAAf,CAAlC;AACA,UAAMuC,aAAa,GAAGxC,YAAY,CAACM,KAAK,CAACL,SAAP,CAAlC;;AAH+C,iDAK/BsC,aAL+B;AAAA;;AAAA;AAK/C,4DAA+B;AAAA,cAApBE,CAAoB;;AAC7B,cAAI,CAACD,aAAa,CAACE,GAAd,CAAkBD,CAAlB,CAAL,EAA2B;AACzB3B,iBAAK,CAAC6B,eAAN,CAAsBF,CAAtB;AACD;AACF;AAT8C;AAAA;AAAA;AAAA;AAAA;;AAAA,kDAU/BD,aAV+B;AAAA;;AAAA;AAU/C,+DAA+B;AAAA,cAApBC,EAAoB;;AAC7B,cAAI,CAACF,aAAa,CAACG,GAAd,CAAkBD,EAAlB,CAAL,EAA2B;AACzB3B,iBAAK,CAAC8B,YAAN,CAAmBH,EAAnB;AACD;AACF,SAd8C,CAe/C;;AAf+C;AAAA;AAAA;AAAA;AAAA;;AAgB/C3B,WAAK,CAACC,OAAN,CAAcd,SAAd,GAA0BK,KAAK,CAACL,SAAhC;AACD;AACF;;AAED,SAAOT,YAAY,CAACc,KAAK,CAACuC,QAAP,EAAiBpC,SAAjB,CAAnB;AACD,C,CAED;;;AACA,eAAelB,KAAK,CAACuD,IAAN,CAAWzC,KAAX,CAAf","names":["React","createPortal","useEffect","useMemo","useRef","useContext","applyReactStyle","MapContext","deepEqual","getClassList","className","Set","trim","split","Popup","props","map","mapLib","container","document","createElement","thisRef","current","popup","options","pp","setLngLat","longitude","latitude","on","onOpen","e","onClose","setDOMContent","addTo","getMap","isOpen","remove","getElement","style","getLngLat","lng","lat","offset","setOffset","anchor","maxWidth","setMaxWidth","prevClassList","nextClassList","c","has","removeClassName","addClassName","children","memo"],"sources":["C:\\Users\\bhupe\\Downloads\\Term 4\\COMP4537\\MilestoneFinal\\ISAproject\\node_modules\\react-map-gl\\src\\components\\popup.ts"],"sourcesContent":["/* global document */\nimport * as React from 'react';\nimport {createPortal} from 'react-dom';\nimport {useEffect, useMemo, useRef, useContext} from 'react';\nimport {applyReactStyle} from '../utils/apply-react-style';\n\nimport type {PopupEvent, Anchor, PointLike, MapboxPopup} from '../types';\n\nimport {MapContext} from './map';\nimport {deepEqual} from '../utils/deep-equal';\n\nexport type PopupProps = {\n  /** Longitude of the anchor location */\n  longitude: number;\n  /** Latitude of the anchor location */\n  latitude: number;\n  /**\n   * A string indicating the part of the popup that should be positioned closest to the coordinate.\n   * Options are `'center'`, `'top'`, `'bottom'`, `'left'`, `'right'`, `'top-left'`, `'top-right'`, `'bottom-left'`,\n   * and `'bottom-right'`. If unset, the anchor will be dynamically set to ensure the popup falls within the map\n   * container with a preference for `'bottom'`.\n   */\n  anchor?: Anchor;\n  /**\n   * If `true`, a close button will appear in the top right corner of the popup.\n   * @default true\n   */\n  closeButton?: boolean;\n  /**\n   * If `true`, the popup will close when the map is clicked.\n   * @default true\n   */\n  closeOnClick?: boolean;\n  /**\n   * If `true`, the popup will closed when the map moves.\n   * @default false\n   */\n  closeOnMove?: boolean;\n  /**\n   * If `true`, the popup will try to focus the first focusable element inside the popup.\n   * @default true\n   */\n  focusAfterOpen?: boolean;\n  /**\n   * A pixel offset applied to the popup's location specified as:\n   * - a single number specifying a distance from the popup's location\n   * - a PointLike specifying a constant offset\n   * - an object of Points specifing an offset for each anchor position.\n   */\n  offset?: number | PointLike | Partial<{[anchor in Anchor]: PointLike}>;\n  /** Space-separated CSS class names to add to popup container. */\n  className?: string;\n  /**\n   * A string that sets the CSS property of the popup's maximum width (for example, `'300px'`).\n   * To ensure the popup resizes to fit its content, set this property to `'none'`\n   * @default \"240px\"\n   */\n  maxWidth?: string;\n  /** CSS style override, applied to the control's container */\n  style?: React.CSSProperties;\n\n  onOpen?: (e: PopupEvent) => void;\n  onClose?: (e: PopupEvent) => void;\n  children?: React.ReactNode;\n};\n\n// Adapted from https://github.com/mapbox/mapbox-gl-js/blob/v1.13.0/src/ui/popup.js\nfunction getClassList(className: string) {\n  return new Set(className ? className.trim().split(/\\s+/) : []);\n}\n\n/* eslint-disable complexity,max-statements */\nfunction Popup(props: PopupProps) {\n  const {map, mapLib} = useContext(MapContext);\n  const container = useMemo(() => {\n    return document.createElement('div');\n  }, []);\n  const thisRef = useRef({props});\n  thisRef.current.props = props;\n\n  const popup: MapboxPopup = useMemo(() => {\n    const options = {...props};\n    const pp = new mapLib.Popup(options).setLngLat([props.longitude, props.latitude]);\n    pp.on('open', e => {\n      thisRef.current.props.onOpen?.(e as PopupEvent);\n    });\n    pp.on('close', e => {\n      thisRef.current.props.onClose?.(e as PopupEvent);\n    });\n    return pp;\n  }, []);\n\n  useEffect(() => {\n    popup.setDOMContent(container).addTo(map.getMap());\n\n    return () => {\n      if (popup.isOpen()) {\n        popup.remove();\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    applyReactStyle(popup.getElement(), props.style);\n  }, [props.style]);\n\n  if (popup.isOpen()) {\n    if (popup.getLngLat().lng !== props.longitude || popup.getLngLat().lat !== props.latitude) {\n      popup.setLngLat([props.longitude, props.latitude]);\n    }\n    // @ts-ignore\n    if (props.offset && !deepEqual(popup.options.offset, props.offset)) {\n      popup.setOffset(props.offset);\n    }\n    // @ts-ignore\n    if (popup.options.anchor !== props.anchor || popup.options.maxWidth !== props.maxWidth) {\n      // @ts-ignore\n      popup.options.anchor = props.anchor;\n      popup.setMaxWidth(props.maxWidth);\n    }\n    // @ts-ignore\n    if (popup.options.className !== props.className) {\n      // @ts-ignore\n      const prevClassList = getClassList(popup.options.className);\n      const nextClassList = getClassList(props.className);\n\n      for (const c of prevClassList) {\n        if (!nextClassList.has(c)) {\n          popup.removeClassName(c);\n        }\n      }\n      for (const c of nextClassList) {\n        if (!prevClassList.has(c)) {\n          popup.addClassName(c);\n        }\n      }\n      // @ts-ignore\n      popup.options.className = props.className;\n    }\n  }\n\n  return createPortal(props.children, container);\n}\n\n// @ts-ignore\nexport default React.memo(Popup);\n"]},"metadata":{},"sourceType":"module"}