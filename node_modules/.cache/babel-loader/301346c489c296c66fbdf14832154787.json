{"ast":null,"code":"import { useEffect } from 'react';\nimport useEventCallback from './useEventCallback';\n/**\r\n * Attaches an event handler outside directly to specified DOM element\r\n * bypassing the react synthetic event system.\r\n *\r\n * @param element The target to listen for events on\r\n * @param event The DOM event name\r\n * @param handler An event handler\r\n * @param capture Whether or not to listen during the capture event phase\r\n */\n\nexport default function useEventListener(eventTarget, event, listener, capture) {\n  if (capture === void 0) {\n    capture = false;\n  }\n\n  var handler = useEventCallback(listener);\n  useEffect(function () {\n    var target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;\n    target.addEventListener(event, handler, capture);\n    return function () {\n      return target.removeEventListener(event, handler, capture);\n    };\n  }, [eventTarget]);\n}","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/@restart/hooks/esm/useEventListener.js"],"names":["useEffect","useEventCallback","useEventListener","eventTarget","event","listener","capture","handler","target","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,gBAAT,CAA0BC,WAA1B,EAAuCC,KAAvC,EAA8CC,QAA9C,EAAwDC,OAAxD,EAAiE;AAC9E,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,KAAV;AACD;;AAED,MAAIC,OAAO,GAAGN,gBAAgB,CAACI,QAAD,CAA9B;AACAL,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAIQ,MAAM,GAAG,OAAOL,WAAP,KAAuB,UAAvB,GAAoCA,WAAW,EAA/C,GAAoDA,WAAjE;AACAK,IAAAA,MAAM,CAACC,gBAAP,CAAwBL,KAAxB,EAA+BG,OAA/B,EAAwCD,OAAxC;AACA,WAAO,YAAY;AACjB,aAAOE,MAAM,CAACE,mBAAP,CAA2BN,KAA3B,EAAkCG,OAAlC,EAA2CD,OAA3C,CAAP;AACD,KAFD;AAGD,GANQ,EAMN,CAACH,WAAD,CANM,CAAT;AAOD","sourcesContent":["import { useEffect } from 'react';\r\nimport useEventCallback from './useEventCallback';\r\n\r\n/**\r\n * Attaches an event handler outside directly to specified DOM element\r\n * bypassing the react synthetic event system.\r\n *\r\n * @param element The target to listen for events on\r\n * @param event The DOM event name\r\n * @param handler An event handler\r\n * @param capture Whether or not to listen during the capture event phase\r\n */\r\nexport default function useEventListener(eventTarget, event, listener, capture) {\r\n  if (capture === void 0) {\r\n    capture = false;\r\n  }\r\n\r\n  var handler = useEventCallback(listener);\r\n  useEffect(function () {\r\n    var target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;\r\n    target.addEventListener(event, handler, capture);\r\n    return function () {\r\n      return target.removeEventListener(event, handler, capture);\r\n    };\r\n  }, [eventTarget]);\r\n}"]},"metadata":{},"sourceType":"module"}