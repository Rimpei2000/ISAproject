{"ast":null,"code":"import * as React from 'react';\nimport { useEffect } from 'react';\nimport { applyReactStyle } from '../utils/apply-react-style';\nimport useControl from './use-control';\nvar defaultProps = {\n  unit: 'metric',\n  maxWidth: 100\n};\n\nfunction ScaleControl(props) {\n  var ctrl = useControl(function (_ref) {\n    var mapLib = _ref.mapLib;\n    return new mapLib.ScaleControl(props);\n  }, {\n    position: props.position\n  }); // @ts-ignore\n\n  if (ctrl.options.unit !== props.unit || ctrl.options.maxWidth !== props.maxWidth) {\n    // @ts-ignore\n    ctrl.options.maxWidth = props.maxWidth; // This method will trigger an update\n\n    ctrl.setUnit(props.unit);\n  }\n\n  useEffect(function () {\n    // @ts-ignore\n    applyReactStyle(ctrl._container, props.style);\n  }, [props.style]);\n  return null;\n}\n\nScaleControl.defaultProps = defaultProps;\nexport default React.memo(ScaleControl);","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,SAAQC,eAAR,QAA8B,4BAA9B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAmBA,IAAMC,YAAY,GAAsB;AACtCC,MAAI,EAAE,QADgC;AAEtCC,UAAQ,EAAE;AAF4B,CAAxC;;AAKA,SAASC,YAAT,CAAsBC,KAAtB,EAA8C;AAC5C,MAAMC,IAAI,GAAGN,UAAU,CAAqB;AAAA,QAAEO,MAAF,QAAEA,MAAF;AAAA,WAAc,IAAIA,MAAM,CAACH,YAAX,CAAwBC,KAAxB,CAAd;AAAA,GAArB,EAAmE;AACxFG,YAAQ,EAAEH,KAAK,CAACG;AADwE,GAAnE,CAAvB,CAD4C,CAK5C;;AACA,MAAIF,IAAI,CAACG,OAAL,CAAaP,IAAb,KAAsBG,KAAK,CAACH,IAA5B,IAAoCI,IAAI,CAACG,OAAL,CAAaN,QAAb,KAA0BE,KAAK,CAACF,QAAxE,EAAkF;AAChF;AACAG,QAAI,CAACG,OAAL,CAAaN,QAAb,GAAwBE,KAAK,CAACF,QAA9B,CAFgF,CAGhF;;AACAG,QAAI,CAACI,OAAL,CAAaL,KAAK,CAACH,IAAnB;AACD;;AAEDJ,WAAS,CAAC,YAAK;AACb;AACAC,mBAAe,CAACO,IAAI,CAACK,UAAN,EAAkBN,KAAK,CAACO,KAAxB,CAAf;AACD,GAHQ,EAGN,CAACP,KAAK,CAACO,KAAP,CAHM,CAAT;AAKA,SAAO,IAAP;AACD;;AAEDR,YAAY,CAACH,YAAb,GAA4BA,YAA5B;AAEA,eAAeJ,KAAK,CAACgB,IAAN,CAAWT,YAAX,CAAf","names":["React","useEffect","applyReactStyle","useControl","defaultProps","unit","maxWidth","ScaleControl","props","ctrl","mapLib","position","options","setUnit","_container","style","memo"],"sources":["C:\\Users\\bhupe\\Downloads\\Term 4\\COMP4537\\MilestoneFinal\\ISAproject\\node_modules\\react-map-gl\\src\\components\\scale-control.ts"],"sourcesContent":["import * as React from 'react';\nimport {useEffect} from 'react';\nimport {applyReactStyle} from '../utils/apply-react-style';\nimport useControl from './use-control';\n\nimport type {ControlPosition, MapboxScaleControl} from '../types';\n\nexport type ScaleControlProps = {\n  /** Unit of the distance.\n   * @default \"metric\"\n   */\n  unit?: 'imperial' | 'metric' | 'nautical';\n  /** The maximum length of the scale control in pixels.\n   * @default 100\n   */\n  maxWidth?: number;\n  /** Placement of the control relative to the map. */\n  position?: ControlPosition;\n  /** CSS style override, applied to the control's container */\n  style?: React.CSSProperties;\n};\n\nconst defaultProps: ScaleControlProps = {\n  unit: 'metric',\n  maxWidth: 100\n};\n\nfunction ScaleControl(props: ScaleControlProps): null {\n  const ctrl = useControl<MapboxScaleControl>(({mapLib}) => new mapLib.ScaleControl(props), {\n    position: props.position\n  });\n\n  // @ts-ignore\n  if (ctrl.options.unit !== props.unit || ctrl.options.maxWidth !== props.maxWidth) {\n    // @ts-ignore\n    ctrl.options.maxWidth = props.maxWidth;\n    // This method will trigger an update\n    ctrl.setUnit(props.unit);\n  }\n\n  useEffect(() => {\n    // @ts-ignore\n    applyReactStyle(ctrl._container, props.style);\n  }, [props.style]);\n\n  return null;\n}\n\nScaleControl.defaultProps = defaultProps;\n\nexport default React.memo(ScaleControl);\n"]},"metadata":{},"sourceType":"module"}