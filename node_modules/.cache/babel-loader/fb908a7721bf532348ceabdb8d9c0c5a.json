{"ast":null,"code":"import _objectSpread from \"C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectWithoutProperties from \"C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\", \"type\", \"name\", \"value\", \"onChange\"];\nimport * as React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar defaultProps = {\n  type: 'radio',\n  vertical: false\n};\nvar ToggleButtonGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    value: 'onChange'\n  }),\n      children = _useUncontrolled.children,\n      type = _useUncontrolled.type,\n      name = _useUncontrolled.name,\n      value = _useUncontrolled.value,\n      onChange = _useUncontrolled.onChange,\n      controlledProps = _objectWithoutProperties(_useUncontrolled, _excluded);\n\n  var getValues = function getValues() {\n    return value == null ? [] : [].concat(value);\n  };\n\n  var handleToggle = function handleToggle(inputVal, event) {\n    if (!onChange) {\n      return;\n    }\n\n    var values = getValues();\n    var isActive = values.indexOf(inputVal) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive && onChange) onChange(inputVal, event);\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(function (n) {\n        return n !== inputVal;\n      }), event);\n    } else {\n      onChange([].concat(_toConsumableArray(values), [inputVal]), event);\n    }\n  };\n\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return /*#__PURE__*/_jsx(ButtonGroup, _objectSpread(_objectSpread({}, controlledProps), {}, {\n    ref: ref,\n    children: map(children, function (child) {\n      var values = getValues();\n      var _child$props = child.props,\n          childVal = _child$props.value,\n          childOnChange = _child$props.onChange;\n\n      var handler = function handler(e) {\n        return handleToggle(childVal, e);\n      };\n\n      return /*#__PURE__*/React.cloneElement(child, {\n        type: type,\n        name: child.name || name,\n        checked: values.indexOf(childVal) !== -1,\n        onChange: chainFunction(childOnChange, handler)\n      });\n    })\n  }));\n});\nToggleButtonGroup.defaultProps = defaultProps;\nexport default Object.assign(ToggleButtonGroup, {\n  Button: ToggleButton\n});","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/react-bootstrap/esm/ToggleButtonGroup.js"],"names":["React","invariant","useUncontrolled","chainFunction","map","ButtonGroup","ToggleButton","jsx","_jsx","defaultProps","type","vertical","ToggleButtonGroup","forwardRef","props","ref","value","children","name","onChange","controlledProps","getValues","concat","handleToggle","inputVal","event","values","isActive","indexOf","filter","n","process","env","NODE_ENV","child","childVal","childOnChange","handler","e","cloneElement","checked","Object","assign","Button"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport invariant from 'invariant';\r\nimport { useUncontrolled } from 'uncontrollable';\r\nimport chainFunction from './createChainedFunction';\r\nimport { map } from './ElementChildren';\r\nimport ButtonGroup from './ButtonGroup';\r\nimport ToggleButton from './ToggleButton';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nconst defaultProps = {\r\n  type: 'radio',\r\n  vertical: false\r\n};\r\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef((props, ref) => {\r\n  const {\r\n    children,\r\n    type,\r\n    name,\r\n    value,\r\n    onChange,\r\n    ...controlledProps\r\n  } = useUncontrolled(props, {\r\n    value: 'onChange'\r\n  });\r\n\r\n  const getValues = () => value == null ? [] : [].concat(value);\r\n\r\n  const handleToggle = (inputVal, event) => {\r\n    if (!onChange) {\r\n      return;\r\n    }\r\n\r\n    const values = getValues();\r\n    const isActive = values.indexOf(inputVal) !== -1;\r\n\r\n    if (type === 'radio') {\r\n      if (!isActive && onChange) onChange(inputVal, event);\r\n      return;\r\n    }\r\n\r\n    if (isActive) {\r\n      onChange(values.filter(n => n !== inputVal), event);\r\n    } else {\r\n      onChange([...values, inputVal], event);\r\n    }\r\n  };\r\n\r\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\r\n  return /*#__PURE__*/_jsx(ButtonGroup, { ...controlledProps,\r\n    ref: ref,\r\n    children: map(children, child => {\r\n      const values = getValues();\r\n      const {\r\n        value: childVal,\r\n        onChange: childOnChange\r\n      } = child.props;\r\n\r\n      const handler = e => handleToggle(childVal, e);\r\n\r\n      return /*#__PURE__*/React.cloneElement(child, {\r\n        type,\r\n        name: child.name || name,\r\n        checked: values.indexOf(childVal) !== -1,\r\n        onChange: chainFunction(childOnChange, handler)\r\n      });\r\n    })\r\n  });\r\n});\r\nToggleButtonGroup.defaultProps = defaultProps;\r\nexport default Object.assign(ToggleButtonGroup, {\r\n  Button: ToggleButton\r\n});"]},"metadata":{},"sourceType":"module"}