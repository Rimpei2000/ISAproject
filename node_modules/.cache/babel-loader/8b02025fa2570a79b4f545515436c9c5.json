{"ast":null,"code":"import * as React from 'react';\nimport { useState, useCallback, useMemo, useContext } from 'react';\nimport { MapContext } from './map';\nexport const MountedMapsContext = React.createContext(null);\nexport const MapProvider = props => {\n  const [maps, setMaps] = useState({});\n  const onMapMount = useCallback(function (map) {\n    let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    setMaps(currMaps => {\n      if (id === 'current') {\n        throw new Error(\"'current' cannot be used as map id\");\n      }\n\n      if (currMaps[id]) {\n        throw new Error(`Multiple maps with the same id: ${id}`);\n      }\n\n      return { ...currMaps,\n        [id]: map\n      };\n    });\n  }, []);\n  const onMapUnmount = useCallback(function () {\n    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n    setMaps(currMaps => {\n      if (currMaps[id]) {\n        const nextMaps = { ...currMaps\n        };\n        delete nextMaps[id];\n        return nextMaps;\n      }\n\n      return currMaps;\n    });\n  }, []);\n  return React.createElement(MountedMapsContext.Provider, {\n    value: {\n      maps,\n      onMapMount,\n      onMapUnmount\n    }\n  }, props.children);\n};\nexport function useMap() {\n  const maps = useContext(MountedMapsContext)?.maps;\n  const currentMap = useContext(MapContext);\n  const mapsWithCurrent = useMemo(() => {\n    return { ...maps,\n      current: currentMap?.map\n    };\n  }, [maps, currentMap]);\n  return mapsWithCurrent;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,QAAR,EAAkBC,WAAlB,EAA+BC,OAA/B,EAAwCC,UAAxC,QAAyD,OAAzD;AAGA,SAAQC,UAAR,QAAyB,OAAzB;AAQA,OAAO,MAAMC,kBAAkB,GAAGN,KAAK,CAACO,aAAN,CAA6C,IAA7C,CAA3B;AAEP,OAAO,MAAMC,WAAW,GAAiBC,KAAK,IAAG;AAC/C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAyB,EAAzB,CAAhC;AAEA,QAAMW,UAAU,GAAGV,WAAW,CAAC,UAACW,GAAD,EAAwC;AAAA,QAA1BC,EAA0B,uEAAb,SAAa;AACrEH,WAAO,CAACI,QAAQ,IAAG;AACjB,UAAID,EAAE,KAAK,SAAX,EAAsB;AACpB,cAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,UAAID,QAAQ,CAACD,EAAD,CAAZ,EAAkB;AAChB,cAAM,IAAIE,KAAJ,CAAU,mCAAmCF,EAAE,EAA/C,CAAN;AACD;;AACD,aAAO,EAAC,GAAGC,QAAJ;AAAc,SAACD,EAAD,GAAMD;AAApB,OAAP;AACD,KARM,CAAP;AASD,GAV6B,EAU3B,EAV2B,CAA9B;AAYA,QAAMI,YAAY,GAAGf,WAAW,CAAC,YAA2B;AAAA,QAA1BY,EAA0B,uEAAb,SAAa;AAC1DH,WAAO,CAACI,QAAQ,IAAG;AACjB,UAAIA,QAAQ,CAACD,EAAD,CAAZ,EAAkB;AAChB,cAAMI,QAAQ,GAAG,EAAC,GAAGH;AAAJ,SAAjB;AACA,eAAOG,QAAQ,CAACJ,EAAD,CAAf;AACA,eAAOI,QAAP;AACD;;AACD,aAAOH,QAAP;AACD,KAPM,CAAP;AAQD,GAT+B,EAS7B,EAT6B,CAAhC;AAWA,SACEf,oBAACM,kBAAkB,CAACa,QAApB,EAA4B;AAC1BC,SAAK,EAAE;AACLV,UADK;AAELE,gBAFK;AAGLK;AAHK;AADmB,GAA5B,EAOGR,KAAK,CAACY,QAPT,CADF;AAWD,CArCM;AAuCP,OAAM,SAAUC,MAAV,GAAgB;AACpB,QAAMZ,IAAI,GAAGN,UAAU,CAACE,kBAAD,CAAV,EAAgCI,IAA7C;AACA,QAAMa,UAAU,GAAGnB,UAAU,CAACC,UAAD,CAA7B;AAEA,QAAMmB,eAAe,GAAGrB,OAAO,CAAC,MAAK;AACnC,WAAO,EAAC,GAAGO,IAAJ;AAAUe,aAAO,EAAEF,UAAU,EAAEV;AAA/B,KAAP;AACD,GAF8B,EAE5B,CAACH,IAAD,EAAOa,UAAP,CAF4B,CAA/B;AAIA,SAAOC,eAAP;AACD","names":["React","useState","useCallback","useMemo","useContext","MapContext","MountedMapsContext","createContext","MapProvider","props","maps","setMaps","onMapMount","map","id","currMaps","Error","onMapUnmount","nextMaps","Provider","value","children","useMap","currentMap","mapsWithCurrent","current"],"sources":["../../../src/components/use-map.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}