{"ast":null,"code":"import * as React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  type: 'radio',\n  vertical: false\n};\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    children,\n    type,\n    name,\n    value,\n    onChange,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    value: 'onChange'\n  });\n\n  const getValues = () => value == null ? [] : [].concat(value);\n\n  const handleToggle = (inputVal, event) => {\n    if (!onChange) {\n      return;\n    }\n\n    const values = getValues();\n    const isActive = values.indexOf(inputVal) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive && onChange) onChange(inputVal, event);\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(n => n !== inputVal), event);\n    } else {\n      onChange([...values, inputVal], event);\n    }\n  };\n\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return /*#__PURE__*/_jsx(ButtonGroup, { ...controlledProps,\n    ref: ref,\n    children: map(children, child => {\n      const values = getValues();\n      const {\n        value: childVal,\n        onChange: childOnChange\n      } = child.props;\n\n      const handler = e => handleToggle(childVal, e);\n\n      return /*#__PURE__*/React.cloneElement(child, {\n        type,\n        name: child.name || name,\n        checked: values.indexOf(childVal) !== -1,\n        onChange: chainFunction(childOnChange, handler)\n      });\n    })\n  });\n});\nToggleButtonGroup.defaultProps = defaultProps;\nexport default Object.assign(ToggleButtonGroup, {\n  Button: ToggleButton\n});","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/FinalMilestone/ISAproject/node_modules/react-bootstrap/esm/ToggleButtonGroup.js"],"names":["React","invariant","useUncontrolled","chainFunction","map","ButtonGroup","ToggleButton","jsx","_jsx","defaultProps","type","vertical","ToggleButtonGroup","forwardRef","props","ref","children","name","value","onChange","controlledProps","getValues","concat","handleToggle","inputVal","event","values","isActive","indexOf","filter","n","process","env","NODE_ENV","child","childVal","childOnChange","handler","e","cloneElement","checked","Object","assign","Button"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport invariant from 'invariant';\r\nimport { useUncontrolled } from 'uncontrollable';\r\nimport chainFunction from './createChainedFunction';\r\nimport { map } from './ElementChildren';\r\nimport ButtonGroup from './ButtonGroup';\r\nimport ToggleButton from './ToggleButton';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nconst defaultProps = {\r\n  type: 'radio',\r\n  vertical: false\r\n};\r\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef((props, ref) => {\r\n  const {\r\n    children,\r\n    type,\r\n    name,\r\n    value,\r\n    onChange,\r\n    ...controlledProps\r\n  } = useUncontrolled(props, {\r\n    value: 'onChange'\r\n  });\r\n\r\n  const getValues = () => value == null ? [] : [].concat(value);\r\n\r\n  const handleToggle = (inputVal, event) => {\r\n    if (!onChange) {\r\n      return;\r\n    }\r\n\r\n    const values = getValues();\r\n    const isActive = values.indexOf(inputVal) !== -1;\r\n\r\n    if (type === 'radio') {\r\n      if (!isActive && onChange) onChange(inputVal, event);\r\n      return;\r\n    }\r\n\r\n    if (isActive) {\r\n      onChange(values.filter(n => n !== inputVal), event);\r\n    } else {\r\n      onChange([...values, inputVal], event);\r\n    }\r\n  };\r\n\r\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\r\n  return /*#__PURE__*/_jsx(ButtonGroup, { ...controlledProps,\r\n    ref: ref,\r\n    children: map(children, child => {\r\n      const values = getValues();\r\n      const {\r\n        value: childVal,\r\n        onChange: childOnChange\r\n      } = child.props;\r\n\r\n      const handler = e => handleToggle(childVal, e);\r\n\r\n      return /*#__PURE__*/React.cloneElement(child, {\r\n        type,\r\n        name: child.name || name,\r\n        checked: values.indexOf(childVal) !== -1,\r\n        onChange: chainFunction(childOnChange, handler)\r\n      });\r\n    })\r\n  });\r\n});\r\nToggleButtonGroup.defaultProps = defaultProps;\r\nexport default Object.assign(ToggleButtonGroup, {\r\n  Button: ToggleButton\r\n});"]},"metadata":{},"sourceType":"module"}