{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar globalSettings = ['baseApiUrl', 'maxParallelImageRequests', 'workerClass', 'workerCount', 'workerUrl'];\nexport default function setGlobals(mapLib, props) {\n  var _iterator = _createForOfIteratorHelper(globalSettings),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n\n      if (key in props) {\n        mapLib[key] = props[key];\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (props.RTLTextPlugin && mapLib.getRTLTextPluginStatus && mapLib.getRTLTextPluginStatus() === 'unavailable') {\n    mapLib.setRTLTextPlugin(props.RTLTextPlugin, function (error) {\n      if (error) {\n        // eslint-disable-next-line\n        console.error(error);\n      }\n    }, false);\n  }\n}","map":{"version":3,"mappings":";AAsBA,IAAMA,cAAc,GAAG,CACrB,YADqB,EAErB,0BAFqB,EAGrB,aAHqB,EAIrB,aAJqB,EAKrB,WALqB,CAAvB;AAQA,eAAc,SAAUC,UAAV,CAAqBC,MAArB,EAAkCC,KAAlC,EAAuD;AAAA,6CACjDH,cADiD;AAAA;;AAAA;AACnE,wDAAkC;AAAA,UAAvBI,GAAuB;;AAChC,UAAIA,GAAG,IAAID,KAAX,EAAkB;AAChBD,cAAM,CAACE,GAAD,CAAN,GAAcD,KAAK,CAACC,GAAD,CAAnB;AACD;AACF;AALkE;AAAA;AAAA;AAAA;AAAA;;AAOnE,MACED,KAAK,CAACE,aAAN,IACAH,MAAM,CAACI,sBADP,IAEAJ,MAAM,CAACI,sBAAP,OAAoC,aAHtC,EAIE;AACAJ,UAAM,CAACK,gBAAP,CACEJ,KAAK,CAACE,aADR,EAEE,UAACG,KAAD,EAAkB;AAChB,UAAIA,KAAJ,EAAW;AACT;AACAC,eAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,KAPH,EAQE,KARF;AAUD;AACF","names":["globalSettings","setGlobals","mapLib","props","key","RTLTextPlugin","getRTLTextPluginStatus","setRTLTextPlugin","error","console"],"sources":["C:\\Users\\bhupe\\Downloads\\Term 4\\COMP4537\\MilestoneFinal\\ISAproject\\node_modules\\react-map-gl\\src\\utils\\set-globals.ts"],"sourcesContent":["export type GlobalSettings = {\n  /** The map's default API URL for requesting tiles, styles, sprites, and glyphs. */\n  baseApiUrl?: string;\n  /** The maximum number of images (raster tiles, sprites, icons) to load in parallel.\n   * @default 16\n   */\n  maxParallelImageRequests?: number;\n  /** The map's RTL text plugin. Necessary for supporting the Arabic and Hebrew languages, which are written right-to-left.  */\n  RTLTextPlugin?: string;\n  /** Provides an interface for external module bundlers such as Webpack or Rollup to package mapbox-gl's WebWorker into a separate class and integrate it with the library.\nTakes precedence over `workerUrl`. */\n  workerClass?: any;\n  /** The number of web workers instantiated on a page with mapbox-gl maps.\n   * @default 2\n   */\n  workerCount?: number;\n  /** Provides an interface for loading mapbox-gl's WebWorker bundle from a self-hosted URL.\n   * This is useful if your site needs to operate in a strict CSP (Content Security Policy) environment\n   * wherein you are not allowed to load JavaScript code from a Blob URL, which is default behavior. */\n  workerUrl?: string;\n};\n\nconst globalSettings = [\n  'baseApiUrl',\n  'maxParallelImageRequests',\n  'workerClass',\n  'workerCount',\n  'workerUrl'\n] as const;\n\nexport default function setGlobals(mapLib: any, props: GlobalSettings) {\n  for (const key of globalSettings) {\n    if (key in props) {\n      mapLib[key] = props[key];\n    }\n  }\n\n  if (\n    props.RTLTextPlugin &&\n    mapLib.getRTLTextPluginStatus &&\n    mapLib.getRTLTextPluginStatus() === 'unavailable'\n  ) {\n    mapLib.setRTLTextPlugin(\n      props.RTLTextPlugin,\n      (error?: Error) => {\n        if (error) {\n          // eslint-disable-next-line\n          console.error(error);\n        }\n      },\n      false\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}