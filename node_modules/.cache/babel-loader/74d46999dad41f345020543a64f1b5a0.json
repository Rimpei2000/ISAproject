{"ast":null,"code":"import invariant from 'invariant';\nimport { useCallback } from 'react';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nexport default function useWrappedRefWithWarning(ref, componentName) {\n  // @ts-ignore\n  if (!(process.env.NODE_ENV !== \"production\")) return ref; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  var warningRef = useCallback(function (refValue) {\n    !(refValue == null || !refValue.isReactComponent) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"\".concat(componentName, \" injected a ref to a provided `as` component that resolved to a component instance instead of a DOM element. \") + 'Use `React.forwardRef` to provide the injected ref to the class component as a prop in order to pass it directly to a DOM element') : invariant(false) : void 0;\n  }, [componentName]); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  return useMergedRefs(warningRef, ref);\n}","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/react-bootstrap/esm/useWrappedRefWithWarning.js"],"names":["invariant","useCallback","useMergedRefs","useWrappedRefWithWarning","ref","componentName","process","env","NODE_ENV","warningRef","refValue","isReactComponent"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,eAAe,SAASC,wBAAT,CAAkCC,GAAlC,EAAuCC,aAAvC,EAAsD;AACnE;AACA,MAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA3B,CAAJ,EAA8C,OAAOJ,GAAP,CAFqB,CAET;;AAE1D,MAAMK,UAAU,GAAGR,WAAW,CAAC,UAAAS,QAAQ,EAAI;AACzC,MAAEA,QAAQ,IAAI,IAAZ,IAAoB,CAACA,QAAQ,CAACC,gBAAhC,IAAoDL,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCR,SAAS,CAAC,KAAD,EAAQ,UAAGK,aAAH,qHAAoI,mIAA5I,CAAjD,GAAoUL,SAAS,CAAC,KAAD,CAAjY,GAA2Y,KAAK,CAAhZ;AACD,GAF6B,EAE3B,CAACK,aAAD,CAF2B,CAA9B,CAJmE,CAM9C;;AAErB,SAAOH,aAAa,CAACO,UAAD,EAAaL,GAAb,CAApB;AACD","sourcesContent":["import invariant from 'invariant';\r\nimport { useCallback } from 'react';\r\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\r\nexport default function useWrappedRefWithWarning(ref, componentName) {\r\n  // @ts-ignore\r\n  if (!(process.env.NODE_ENV !== \"production\")) return ref; // eslint-disable-next-line react-hooks/rules-of-hooks\r\n\r\n  const warningRef = useCallback(refValue => {\r\n    !(refValue == null || !refValue.isReactComponent) ? process.env.NODE_ENV !== \"production\" ? invariant(false, `${componentName} injected a ref to a provided \\`as\\` component that resolved to a component instance instead of a DOM element. ` + 'Use `React.forwardRef` to provide the injected ref to the class component as a prop in order to pass it directly to a DOM element') : invariant(false) : void 0;\r\n  }, [componentName]); // eslint-disable-next-line react-hooks/rules-of-hooks\r\n\r\n  return useMergedRefs(warningRef, ref);\r\n}"]},"metadata":{},"sourceType":"module"}