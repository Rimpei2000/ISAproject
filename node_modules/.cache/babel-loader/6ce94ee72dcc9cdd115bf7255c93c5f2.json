{"ast":null,"code":"import qsa from 'dom-helpers/querySelectorAll';\nimport addEventListener from 'dom-helpers/addEventListener';\nimport { useCallback, useRef, useEffect, useMemo, useContext } from 'react';\nimport * as React from 'react';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useEventListener from '@restart/hooks/useEventListener';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle, { isRoleMenu } from './DropdownToggle';\nimport DropdownItem from './DropdownItem';\nimport SelectableContext from './SelectableContext';\nimport { dataAttr } from './DataKey';\nimport useWindow from './useWindow';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction useRefWithUpdate() {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef(null);\n  const attachRef = useCallback(element => {\n    ref.current = element; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  return [ref, attachRef];\n}\n/**\r\n * @displayName Dropdown\r\n * @public\r\n */\n\n\nfunction Dropdown(_ref) {\n  let {\n    defaultShow,\n    show: rawShow,\n    onSelect,\n    onToggle: rawOnToggle,\n    itemSelector = `* [${dataAttr('dropdown-item')}]`,\n    focusFirstItemOnShow,\n    placement = 'bottom-start',\n    children\n  } = _ref;\n  const window = useWindow();\n  const [show, onToggle] = useUncontrolledProp(rawShow, defaultShow, rawOnToggle); // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n  const [menuRef, setMenu] = useRefWithUpdate();\n  const menuElement = menuRef.current;\n  const [toggleRef, setToggle] = useRefWithUpdate();\n  const toggleElement = toggleRef.current;\n  const lastShow = usePrevious(show);\n  const lastSourceEvent = useRef(null);\n  const focusInDropdown = useRef(false);\n  const onSelectCtx = useContext(SelectableContext);\n  const toggle = useCallback(function (nextShow, event) {\n    let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : event == null ? void 0 : event.type;\n    onToggle(nextShow, {\n      originalEvent: event,\n      source\n    });\n  }, [onToggle]);\n  const handleSelect = useEventCallback((key, event) => {\n    onSelect == null ? void 0 : onSelect(key, event);\n    toggle(false, event, 'select');\n\n    if (!event.isPropagationStopped()) {\n      onSelectCtx == null ? void 0 : onSelectCtx(key, event);\n    }\n  });\n  const context = useMemo(() => ({\n    toggle,\n    placement,\n    show,\n    menuElement,\n    toggleElement,\n    setMenu,\n    setToggle\n  }), [toggle, placement, show, menuElement, toggleElement, setMenu, setToggle]);\n\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(menuElement.ownerDocument.activeElement);\n  }\n\n  const focusToggle = useEventCallback(() => {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  const maybeFocusFirst = useEventCallback(() => {\n    const type = lastSourceEvent.current;\n    let focusType = focusFirstItemOnShow;\n\n    if (focusType == null) {\n      focusType = menuRef.current && isRoleMenu(menuRef.current) ? 'keyboard' : false;\n    }\n\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n\n    const first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(() => {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(() => {\n    lastSourceEvent.current = null;\n  });\n\n  const getNextFocusedChild = (current, offset) => {\n    if (!menuRef.current) return null;\n    const items = qsa(menuRef.current, itemSelector);\n    let index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n\n  useEventListener(useCallback(() => window.document, [window]), 'keydown', event => {\n    var _menuRef$current, _toggleRef$current;\n\n    const {\n      key\n    } = event;\n    const target = event.target;\n    const fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);\n    const fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target); // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    const isInput = /input|textarea/i.test(target.tagName);\n\n    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu || key === 'Escape' && target.type === 'search')) {\n      return;\n    }\n\n    if (!fromMenu && !fromToggle) {\n      return;\n    }\n\n    if (key === 'Tab' && (!menuRef.current || !show)) {\n      return;\n    }\n\n    lastSourceEvent.current = event.type;\n    const meta = {\n      originalEvent: event,\n      source: event.type\n    };\n\n    switch (key) {\n      case 'ArrowUp':\n        {\n          const next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (!show) {\n          onToggle(true, meta);\n        } else {\n          const next = getNextFocusedChild(target, 1);\n          if (next && next.focus) next.focus();\n        }\n\n        return;\n\n      case 'Tab':\n        // on keydown the target is the element being tabbed FROM, we need that\n        // to know if this event is relevant to this dropdown (e.g. in this menu).\n        // On `keyup` the target is the element being tagged TO which we use to check\n        // if focus has left the menu\n        addEventListener(target.ownerDocument, 'keyup', e => {\n          var _menuRef$current2;\n\n          if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {\n            onToggle(false, meta);\n          }\n        }, {\n          once: true\n        });\n        break;\n\n      case 'Escape':\n        if (key === 'Escape') {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        onToggle(false, meta);\n        break;\n\n      default:\n    }\n  });\n  return /*#__PURE__*/_jsx(SelectableContext.Provider, {\n    value: handleSelect,\n    children: /*#__PURE__*/_jsx(DropdownContext.Provider, {\n      value: context,\n      children: children\n    })\n  });\n}\n\nDropdown.displayName = 'Dropdown';\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nDropdown.Item = DropdownItem;\nexport default Dropdown;","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/FinalMilestone/ISAproject/node_modules/@restart/ui/esm/Dropdown.js"],"names":["qsa","addEventListener","useCallback","useRef","useEffect","useMemo","useContext","React","useUncontrolledProp","usePrevious","useForceUpdate","useEventListener","useEventCallback","DropdownContext","DropdownMenu","DropdownToggle","isRoleMenu","DropdownItem","SelectableContext","dataAttr","useWindow","jsx","_jsx","useRefWithUpdate","forceUpdate","ref","attachRef","element","current","Dropdown","defaultShow","show","rawShow","onSelect","onToggle","rawOnToggle","itemSelector","focusFirstItemOnShow","placement","children","window","menuRef","setMenu","menuElement","toggleRef","setToggle","toggleElement","lastShow","lastSourceEvent","focusInDropdown","onSelectCtx","toggle","nextShow","event","source","type","originalEvent","handleSelect","key","isPropagationStopped","context","contains","ownerDocument","activeElement","focusToggle","focus","maybeFocusFirst","focusType","test","first","getNextFocusedChild","offset","items","index","indexOf","Math","max","min","length","document","_menuRef$current","_toggleRef$current","target","fromMenu","fromToggle","isInput","tagName","meta","next","preventDefault","e","_menuRef$current2","once","stopPropagation","Provider","value","displayName","Menu","Toggle","Item"],"mappings":"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","sourcesContent":["import qsa from 'dom-helpers/querySelectorAll';\r\nimport addEventListener from 'dom-helpers/addEventListener';\r\nimport { useCallback, useRef, useEffect, useMemo, useContext } from 'react';\r\nimport * as React from 'react';\r\nimport { useUncontrolledProp } from 'uncontrollable';\r\nimport usePrevious from '@restart/hooks/usePrevious';\r\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\r\nimport useEventListener from '@restart/hooks/useEventListener';\r\nimport useEventCallback from '@restart/hooks/useEventCallback';\r\nimport DropdownContext from './DropdownContext';\r\nimport DropdownMenu from './DropdownMenu';\r\nimport DropdownToggle, { isRoleMenu } from './DropdownToggle';\r\nimport DropdownItem from './DropdownItem';\r\nimport SelectableContext from './SelectableContext';\r\nimport { dataAttr } from './DataKey';\r\nimport useWindow from './useWindow';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\n\r\nfunction useRefWithUpdate() {\r\n  const forceUpdate = useForceUpdate();\r\n  const ref = useRef(null);\r\n  const attachRef = useCallback(element => {\r\n    ref.current = element; // ensure that a menu set triggers an update for consumers\r\n\r\n    forceUpdate();\r\n  }, [forceUpdate]);\r\n  return [ref, attachRef];\r\n}\r\n/**\r\n * @displayName Dropdown\r\n * @public\r\n */\r\n\r\n\r\nfunction Dropdown({\r\n  defaultShow,\r\n  show: rawShow,\r\n  onSelect,\r\n  onToggle: rawOnToggle,\r\n  itemSelector = `* [${dataAttr('dropdown-item')}]`,\r\n  focusFirstItemOnShow,\r\n  placement = 'bottom-start',\r\n  children\r\n}) {\r\n  const window = useWindow();\r\n  const [show, onToggle] = useUncontrolledProp(rawShow, defaultShow, rawOnToggle); // We use normal refs instead of useCallbackRef in order to populate the\r\n  // the value as quickly as possible, otherwise the effect to focus the element\r\n  // may run before the state value is set\r\n\r\n  const [menuRef, setMenu] = useRefWithUpdate();\r\n  const menuElement = menuRef.current;\r\n  const [toggleRef, setToggle] = useRefWithUpdate();\r\n  const toggleElement = toggleRef.current;\r\n  const lastShow = usePrevious(show);\r\n  const lastSourceEvent = useRef(null);\r\n  const focusInDropdown = useRef(false);\r\n  const onSelectCtx = useContext(SelectableContext);\r\n  const toggle = useCallback((nextShow, event, source = event == null ? void 0 : event.type) => {\r\n    onToggle(nextShow, {\r\n      originalEvent: event,\r\n      source\r\n    });\r\n  }, [onToggle]);\r\n  const handleSelect = useEventCallback((key, event) => {\r\n    onSelect == null ? void 0 : onSelect(key, event);\r\n    toggle(false, event, 'select');\r\n\r\n    if (!event.isPropagationStopped()) {\r\n      onSelectCtx == null ? void 0 : onSelectCtx(key, event);\r\n    }\r\n  });\r\n  const context = useMemo(() => ({\r\n    toggle,\r\n    placement,\r\n    show,\r\n    menuElement,\r\n    toggleElement,\r\n    setMenu,\r\n    setToggle\r\n  }), [toggle, placement, show, menuElement, toggleElement, setMenu, setToggle]);\r\n\r\n  if (menuElement && lastShow && !show) {\r\n    focusInDropdown.current = menuElement.contains(menuElement.ownerDocument.activeElement);\r\n  }\r\n\r\n  const focusToggle = useEventCallback(() => {\r\n    if (toggleElement && toggleElement.focus) {\r\n      toggleElement.focus();\r\n    }\r\n  });\r\n  const maybeFocusFirst = useEventCallback(() => {\r\n    const type = lastSourceEvent.current;\r\n    let focusType = focusFirstItemOnShow;\r\n\r\n    if (focusType == null) {\r\n      focusType = menuRef.current && isRoleMenu(menuRef.current) ? 'keyboard' : false;\r\n    }\r\n\r\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\r\n      return;\r\n    }\r\n\r\n    const first = qsa(menuRef.current, itemSelector)[0];\r\n    if (first && first.focus) first.focus();\r\n  });\r\n  useEffect(() => {\r\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\r\n      focusInDropdown.current = false;\r\n      focusToggle();\r\n    } // only `show` should be changing\r\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\r\n  useEffect(() => {\r\n    lastSourceEvent.current = null;\r\n  });\r\n\r\n  const getNextFocusedChild = (current, offset) => {\r\n    if (!menuRef.current) return null;\r\n    const items = qsa(menuRef.current, itemSelector);\r\n    let index = items.indexOf(current) + offset;\r\n    index = Math.max(0, Math.min(index, items.length));\r\n    return items[index];\r\n  };\r\n\r\n  useEventListener(useCallback(() => window.document, [window]), 'keydown', event => {\r\n    var _menuRef$current, _toggleRef$current;\r\n\r\n    const {\r\n      key\r\n    } = event;\r\n    const target = event.target;\r\n    const fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);\r\n    const fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target); // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\r\n    // in inscrutability\r\n\r\n    const isInput = /input|textarea/i.test(target.tagName);\r\n\r\n    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu || key === 'Escape' && target.type === 'search')) {\r\n      return;\r\n    }\r\n\r\n    if (!fromMenu && !fromToggle) {\r\n      return;\r\n    }\r\n\r\n    if (key === 'Tab' && (!menuRef.current || !show)) {\r\n      return;\r\n    }\r\n\r\n    lastSourceEvent.current = event.type;\r\n    const meta = {\r\n      originalEvent: event,\r\n      source: event.type\r\n    };\r\n\r\n    switch (key) {\r\n      case 'ArrowUp':\r\n        {\r\n          const next = getNextFocusedChild(target, -1);\r\n          if (next && next.focus) next.focus();\r\n          event.preventDefault();\r\n          return;\r\n        }\r\n\r\n      case 'ArrowDown':\r\n        event.preventDefault();\r\n\r\n        if (!show) {\r\n          onToggle(true, meta);\r\n        } else {\r\n          const next = getNextFocusedChild(target, 1);\r\n          if (next && next.focus) next.focus();\r\n        }\r\n\r\n        return;\r\n\r\n      case 'Tab':\r\n        // on keydown the target is the element being tabbed FROM, we need that\r\n        // to know if this event is relevant to this dropdown (e.g. in this menu).\r\n        // On `keyup` the target is the element being tagged TO which we use to check\r\n        // if focus has left the menu\r\n        addEventListener(target.ownerDocument, 'keyup', e => {\r\n          var _menuRef$current2;\r\n\r\n          if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {\r\n            onToggle(false, meta);\r\n          }\r\n        }, {\r\n          once: true\r\n        });\r\n        break;\r\n\r\n      case 'Escape':\r\n        if (key === 'Escape') {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n        }\r\n\r\n        onToggle(false, meta);\r\n        break;\r\n\r\n      default:\r\n    }\r\n  });\r\n  return /*#__PURE__*/_jsx(SelectableContext.Provider, {\r\n    value: handleSelect,\r\n    children: /*#__PURE__*/_jsx(DropdownContext.Provider, {\r\n      value: context,\r\n      children: children\r\n    })\r\n  });\r\n}\r\n\r\nDropdown.displayName = 'Dropdown';\r\nDropdown.Menu = DropdownMenu;\r\nDropdown.Toggle = DropdownToggle;\r\nDropdown.Item = DropdownItem;\r\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}