{"ast":null,"code":"/**\r\n * Safe chained function\r\n *\r\n * Will only create a new function if needed,\r\n * otherwise will pass back existing functions or null.\r\n *\r\n * @param {function} functions to chain\r\n * @returns {function|null}\r\n */\nfunction createChainedFunction() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  return funcs.filter(function (f) {\n    return f != null;\n  }).reduce(function (acc, f) {\n    if (typeof f !== 'function') {\n      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');\n    }\n\n    if (acc === null) return f;\n    return function chainedFunction() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      // @ts-ignore\n      acc.apply(this, args); // @ts-ignore\n\n      f.apply(this, args);\n    };\n  }, null);\n}\n\nexport default createChainedFunction;","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/react-bootstrap/esm/createChainedFunction.js"],"names":["createChainedFunction","funcs","filter","f","reduce","acc","Error","chainedFunction","args","apply"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,qBAAT,GAAyC;AAAA,oCAAPC,KAAO;AAAPA,IAAAA,KAAO;AAAA;;AACvC,SAAOA,KAAK,CAACC,MAAN,CAAa,UAAAC,CAAC;AAAA,WAAIA,CAAC,IAAI,IAAT;AAAA,GAAd,EAA6BC,MAA7B,CAAoC,UAACC,GAAD,EAAMF,CAAN,EAAY;AACrD,QAAI,OAAOA,CAAP,KAAa,UAAjB,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAED,QAAID,GAAG,KAAK,IAAZ,EAAkB,OAAOF,CAAP;AAClB,WAAO,SAASI,eAAT,GAAkC;AAAA,yCAANC,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACvC;AACAH,MAAAA,GAAG,CAACI,KAAJ,CAAU,IAAV,EAAgBD,IAAhB,EAFuC,CAEhB;;AAEvBL,MAAAA,CAAC,CAACM,KAAF,CAAQ,IAAR,EAAcD,IAAd;AACD,KALD;AAMD,GAZM,EAYJ,IAZI,CAAP;AAaD;;AAED,eAAeR,qBAAf","sourcesContent":["/**\r\n * Safe chained function\r\n *\r\n * Will only create a new function if needed,\r\n * otherwise will pass back existing functions or null.\r\n *\r\n * @param {function} functions to chain\r\n * @returns {function|null}\r\n */\r\nfunction createChainedFunction(...funcs) {\r\n  return funcs.filter(f => f != null).reduce((acc, f) => {\r\n    if (typeof f !== 'function') {\r\n      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');\r\n    }\r\n\r\n    if (acc === null) return f;\r\n    return function chainedFunction(...args) {\r\n      // @ts-ignore\r\n      acc.apply(this, args); // @ts-ignore\r\n\r\n      f.apply(this, args);\r\n    };\r\n  }, null);\r\n}\r\n\r\nexport default createChainedFunction;"]},"metadata":{},"sourceType":"module"}