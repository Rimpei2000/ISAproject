{"ast":null,"code":"import { useState } from 'react';\nimport useEffect from './useIsomorphicEffect';\nvar targetMap = new WeakMap();\nvar resizeObserver;\n\nfunction getResizeObserver() {\n  // eslint-disable-next-line no-return-assign\n  return resizeObserver = resizeObserver || new window.ResizeObserver(function (entries) {\n    entries.forEach(function (entry) {\n      var handler = targetMap.get(entry.target);\n      if (handler) handler(entry.contentRect);\n    });\n  });\n}\n/**\r\n * Efficiently observe size changes on an element. Depends on the `ResizeObserver` api,\r\n * and polyfills are needed in older browsers.\r\n *\r\n * ```ts\r\n * const [ref, attachRef] = useCallbackRef(null);\r\n *\r\n * const rect = useResizeObserver(ref);\r\n *\r\n * return (\r\n *  <div ref={attachRef}>\r\n *    {JSON.stringify(rect)}\r\n *  </div>\r\n * )\r\n * ```\r\n *\r\n * @param element The DOM element to observe\r\n */\n\n\nexport default function useResizeObserver(element) {\n  var _useState = useState(null),\n      rect = _useState[0],\n      setRect = _useState[1];\n\n  useEffect(function () {\n    if (!element) return;\n    getResizeObserver().observe(element);\n    setRect(element.getBoundingClientRect());\n    targetMap.set(element, function (rect) {\n      setRect(rect);\n    });\n    return function () {\n      targetMap.delete(element);\n    };\n  }, [element]);\n  return rect;\n}","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/@restart/hooks/esm/useResizeObserver.js"],"names":["useState","useEffect","targetMap","WeakMap","resizeObserver","getResizeObserver","window","ResizeObserver","entries","forEach","entry","handler","get","target","contentRect","useResizeObserver","element","_useState","rect","setRect","observe","getBoundingClientRect","set","delete"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,IAAIC,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACA,IAAIC,cAAJ;;AAEA,SAASC,iBAAT,GAA6B;AAC3B;AACA,SAAOD,cAAc,GAAGA,cAAc,IAAI,IAAIE,MAAM,CAACC,cAAX,CAA0B,UAAUC,OAAV,EAAmB;AACrFA,IAAAA,OAAO,CAACC,OAAR,CAAgB,UAAUC,KAAV,EAAiB;AAC/B,UAAIC,OAAO,GAAGT,SAAS,CAACU,GAAV,CAAcF,KAAK,CAACG,MAApB,CAAd;AACA,UAAIF,OAAJ,EAAaA,OAAO,CAACD,KAAK,CAACI,WAAP,CAAP;AACd,KAHD;AAID,GALyC,CAA1C;AAMD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AACjD,MAAIC,SAAS,GAAGjB,QAAQ,CAAC,IAAD,CAAxB;AAAA,MACIkB,IAAI,GAAGD,SAAS,CAAC,CAAD,CADpB;AAAA,MAEIE,OAAO,GAAGF,SAAS,CAAC,CAAD,CAFvB;;AAIAhB,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAI,CAACe,OAAL,EAAc;AACdX,IAAAA,iBAAiB,GAAGe,OAApB,CAA4BJ,OAA5B;AACAG,IAAAA,OAAO,CAACH,OAAO,CAACK,qBAAR,EAAD,CAAP;AACAnB,IAAAA,SAAS,CAACoB,GAAV,CAAcN,OAAd,EAAuB,UAAUE,IAAV,EAAgB;AACrCC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAFD;AAGA,WAAO,YAAY;AACjBhB,MAAAA,SAAS,CAACqB,MAAV,CAAiBP,OAAjB;AACD,KAFD;AAGD,GAVQ,EAUN,CAACA,OAAD,CAVM,CAAT;AAWA,SAAOE,IAAP;AACD","sourcesContent":["import { useState } from 'react';\r\nimport useEffect from './useIsomorphicEffect';\r\nvar targetMap = new WeakMap();\r\nvar resizeObserver;\r\n\r\nfunction getResizeObserver() {\r\n  // eslint-disable-next-line no-return-assign\r\n  return resizeObserver = resizeObserver || new window.ResizeObserver(function (entries) {\r\n    entries.forEach(function (entry) {\r\n      var handler = targetMap.get(entry.target);\r\n      if (handler) handler(entry.contentRect);\r\n    });\r\n  });\r\n}\r\n/**\r\n * Efficiently observe size changes on an element. Depends on the `ResizeObserver` api,\r\n * and polyfills are needed in older browsers.\r\n *\r\n * ```ts\r\n * const [ref, attachRef] = useCallbackRef(null);\r\n *\r\n * const rect = useResizeObserver(ref);\r\n *\r\n * return (\r\n *  <div ref={attachRef}>\r\n *    {JSON.stringify(rect)}\r\n *  </div>\r\n * )\r\n * ```\r\n *\r\n * @param element The DOM element to observe\r\n */\r\n\r\n\r\nexport default function useResizeObserver(element) {\r\n  var _useState = useState(null),\r\n      rect = _useState[0],\r\n      setRect = _useState[1];\r\n\r\n  useEffect(function () {\r\n    if (!element) return;\r\n    getResizeObserver().observe(element);\r\n    setRect(element.getBoundingClientRect());\r\n    targetMap.set(element, function (rect) {\r\n      setRect(rect);\r\n    });\r\n    return function () {\r\n      targetMap.delete(element);\r\n    };\r\n  }, [element]);\r\n  return rect;\r\n}"]},"metadata":{},"sourceType":"module"}