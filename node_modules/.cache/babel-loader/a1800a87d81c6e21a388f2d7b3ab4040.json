{"ast":null,"code":"import { transformToViewState, applyViewStateToTransform } from '../utils/transform';\nimport { normalizeStyle } from '../utils/style-utils';\nimport { deepEqual } from '../utils/deep-equal';\nconst pointerEvents = {\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseover: 'onMouseOver',\n  mousemove: 'onMouseMove',\n  click: 'onClick',\n  dblclick: 'onDblClick',\n  mouseenter: 'onMouseEnter',\n  mouseleave: 'onMouseLeave',\n  mouseout: 'onMouseOut',\n  contextmenu: 'onContextMenu',\n  touchstart: 'onTouchStart',\n  touchend: 'onTouchEnd',\n  touchmove: 'onTouchMove',\n  touchcancel: 'onTouchCancel'\n};\nconst cameraEvents = {\n  movestart: 'onMoveStart',\n  move: 'onMove',\n  moveend: 'onMoveEnd',\n  dragstart: 'onDragStart',\n  drag: 'onDrag',\n  dragend: 'onDragEnd',\n  zoomstart: 'onZoomStart',\n  zoom: 'onZoom',\n  zoomend: 'onZoomEnd',\n  rotatestart: 'onRotateStart',\n  rotate: 'onRotate',\n  rotateend: 'onRotateEnd',\n  pitchstart: 'onPitchStart',\n  pitch: 'onPitch',\n  pitchend: 'onPitchEnd'\n};\nconst otherEvents = {\n  wheel: 'onWheel',\n  boxzoomstart: 'onBoxZoomStart',\n  boxzoomend: 'onBoxZoomEnd',\n  boxzoomcancel: 'onBoxZoomCancel',\n  resize: 'onResize',\n  load: 'onLoad',\n  render: 'onRender',\n  idle: 'onIdle',\n  remove: 'onRemove',\n  data: 'onData',\n  styledata: 'onStyleData',\n  sourcedata: 'onSourceData',\n  error: 'onError'\n};\nconst settingNames = ['minZoom', 'maxZoom', 'minPitch', 'maxPitch', 'maxBounds', 'projection', 'renderWorldCopies'];\nconst handlerNames = ['scrollZoom', 'boxZoom', 'dragRotate', 'dragPan', 'keyboard', 'doubleClickZoom', 'touchZoomRotate', 'touchPitch'];\n/**\n * A wrapper for mapbox-gl's Map class\n */\n\nexport default class Mapbox {\n  constructor(MapClass, props, container) {\n    // mapboxgl.Map instance. Not using type here because we are accessing\n    // private members and methods\n    this._map = null; // Internal states\n\n    this._internalUpdate = false;\n    this._inRender = false;\n    this._hoveredFeatures = null;\n    this._deferredEvents = {\n      move: false,\n      zoom: false,\n      pitch: false,\n      rotate: false\n    };\n\n    this._onEvent = e => {\n      // @ts-ignore\n      const cb = this.props[otherEvents[e.type]];\n\n      if (cb) {\n        cb(e);\n      }\n    };\n\n    this._onPointerEvent = e => {\n      if (e.type === 'mousemove' || e.type === 'mouseout') {\n        this._updateHover(e);\n      } // @ts-ignore\n\n\n      const cb = this.props[pointerEvents[e.type]];\n\n      if (cb) {\n        if (this.props.interactiveLayerIds && e.type !== 'mouseover' && e.type !== 'mouseout') {\n          const features = this._hoveredFeatures || this._map.queryRenderedFeatures(e.point, {\n            layers: this.props.interactiveLayerIds\n          });\n\n          if (!features.length) {\n            return;\n          }\n\n          e.features = features;\n        }\n\n        cb(e);\n        delete e.features;\n      }\n    };\n\n    this._onCameraEvent = e => {\n      if (!this._internalUpdate) {\n        // @ts-ignore\n        const cb = this.props[cameraEvents[e.type]];\n\n        if (cb) {\n          cb(e);\n        }\n      }\n\n      if (e.type in this._deferredEvents) {\n        this._deferredEvents[e.type] = false;\n      }\n    };\n\n    this._MapClass = MapClass;\n    this.props = props;\n\n    this._initialize(container);\n  }\n\n  get map() {\n    return this._map;\n  }\n\n  get transform() {\n    return this._renderTransform;\n  }\n\n  setProps(props) {\n    const oldProps = this.props;\n    this.props = props;\n\n    const settingsChanged = this._updateSettings(props, oldProps);\n\n    if (settingsChanged) {\n      this._renderTransform = this._map.transform.clone();\n    }\n\n    const sizeChanged = this._updateSize(props);\n\n    const viewStateChanged = this._updateViewState(props, true);\n\n    this._updateStyle(props, oldProps);\n\n    this._updateStyleComponents(props, oldProps);\n\n    this._updateHandlers(props, oldProps); // If 1) view state has changed to match props and\n    //    2) the props change is not triggered by map events,\n    // it's driven by an external state change. Redraw immediately\n\n\n    if (settingsChanged || sizeChanged || viewStateChanged && !this._map.isMoving()) {\n      this.redraw();\n    }\n  }\n\n  static reuse(props, container) {\n    const that = Mapbox.savedMaps.pop();\n\n    if (!that) {\n      return null;\n    }\n\n    const map = that.map; // When reusing the saved map, we need to reparent the map(canvas) and other child nodes\n    // intoto the new container from the props.\n    // Step1: reparenting child nodes from old container to new container\n\n    const oldContainer = map.getContainer();\n    container.className = oldContainer.className;\n\n    while (oldContainer.childNodes.length > 0) {\n      container.appendChild(oldContainer.childNodes[0]);\n    } // Step2: replace the internal container with new container from the react component\n    // @ts-ignore\n\n\n    map._container = container; // Step 3: apply new props\n\n    if (props.initialViewState) {\n      that._updateViewState(props.initialViewState, false);\n    }\n\n    map.resize();\n    that.setProps({ ...props,\n      styleDiffing: false\n    }); // Simulate load event\n\n    if (map.isStyleLoaded()) {\n      map.fire('load');\n    } else {\n      map.once('styledata', () => map.fire('load'));\n    }\n\n    return that;\n  }\n  /* eslint-disable complexity,max-statements */\n\n\n  _initialize(container) {\n    const {\n      props\n    } = this;\n    const mapOptions = { ...props,\n      ...props.initialViewState,\n      accessToken: props.mapboxAccessToken || getAccessTokenFromEnv() || null,\n      container,\n      style: normalizeStyle(props.mapStyle)\n    };\n    const viewState = mapOptions.initialViewState || mapOptions.viewState || mapOptions;\n    Object.assign(mapOptions, {\n      center: [viewState.longitude || 0, viewState.latitude || 0],\n      zoom: viewState.zoom || 0,\n      pitch: viewState.pitch || 0,\n      bearing: viewState.bearing || 0\n    });\n\n    if (props.gl) {\n      // eslint-disable-next-line\n      const getContext = HTMLCanvasElement.prototype.getContext; // Hijack canvas.getContext to return our own WebGLContext\n      // This will be called inside the mapboxgl.Map constructor\n      // @ts-expect-error\n\n      HTMLCanvasElement.prototype.getContext = () => {\n        // Unhijack immediately\n        HTMLCanvasElement.prototype.getContext = getContext;\n        return props.gl;\n      };\n    }\n\n    const map = new this._MapClass(mapOptions); // Props that are not part of constructor options\n\n    if (viewState.padding) {\n      map.setPadding(viewState.padding);\n    }\n\n    if (props.cursor) {\n      map.getCanvas().style.cursor = props.cursor;\n    }\n\n    this._renderTransform = map.transform.clone(); // Hack\n    // Insert code into map's render cycle\n\n    const renderMap = map._render;\n\n    map._render = arg => {\n      this._inRender = true;\n      renderMap.call(map, arg);\n      this._inRender = false;\n    };\n\n    const runRenderTaskQueue = map._renderTaskQueue.run;\n\n    map._renderTaskQueue.run = arg => {\n      runRenderTaskQueue.call(map._renderTaskQueue, arg);\n\n      this._onBeforeRepaint();\n    };\n\n    map.on('render', () => this._onAfterRepaint()); // Insert code into map's event pipeline\n\n    const fireEvent = map.fire;\n    map.fire = this._fireEvent.bind(this, fireEvent); // add listeners\n\n    map.on('resize', () => {\n      this._renderTransform.resize(map.transform.width, map.transform.height);\n    });\n    map.on('styledata', () => this._updateStyleComponents(this.props, {}));\n    map.on('sourcedata', () => this._updateStyleComponents(this.props, {}));\n\n    for (const eventName in pointerEvents) {\n      map.on(eventName, this._onPointerEvent);\n    }\n\n    for (const eventName in cameraEvents) {\n      map.on(eventName, this._onCameraEvent);\n    }\n\n    for (const eventName in otherEvents) {\n      map.on(eventName, this._onEvent);\n    }\n\n    this._map = map;\n  }\n  /* eslint-enable complexity,max-statements */\n\n\n  recycle() {\n    Mapbox.savedMaps.push(this);\n  }\n\n  destroy() {\n    this._map.remove();\n  } // Force redraw the map now. Typically resize() and jumpTo() is reflected in the next\n  // render cycle, which is managed by Mapbox's animation loop.\n  // This removes the synchronization issue caused by requestAnimationFrame.\n\n\n  redraw() {\n    const map = this._map; // map._render will throw error if style does not exist\n    // https://github.com/mapbox/mapbox-gl-js/blob/fb9fc316da14e99ff4368f3e4faa3888fb43c513\n    //   /src/ui/map.js#L1834\n\n    if (!this._inRender && map.style) {\n      // cancel the scheduled update\n      if (map._frame) {\n        map._frame.cancel();\n\n        map._frame = null;\n      } // the order is important - render() may schedule another update\n\n\n      map._render();\n    }\n  }\n  /* Trigger map resize if size is controlled\n     @param {object} nextProps\n     @returns {bool} true if size has changed\n   */\n\n\n  _updateSize(nextProps) {\n    // Check if size is controlled\n    const {\n      viewState\n    } = nextProps;\n\n    if (viewState) {\n      const map = this._map;\n\n      if (viewState.width !== map.transform.width || viewState.height !== map.transform.height) {\n        map.resize();\n        return true;\n      }\n    }\n\n    return false;\n  } // Adapted from map.jumpTo\n\n  /* Update camera to match props\n     @param {object} nextProps\n     @param {bool} triggerEvents - should fire camera events\n     @returns {bool} true if anything is changed\n   */\n\n\n  _updateViewState(nextProps, triggerEvents) {\n    if (this._internalUpdate) {\n      return false;\n    }\n\n    const map = this._map;\n    const tr = this._renderTransform; // Take a snapshot of the transform before mutation\n\n    const {\n      zoom,\n      pitch,\n      bearing\n    } = tr;\n    const changed = applyViewStateToTransform(tr, { ...transformToViewState(map.transform),\n      ...nextProps\n    });\n\n    if (changed && triggerEvents) {\n      const deferredEvents = this._deferredEvents; // Delay DOM control updates to the next render cycle\n\n      deferredEvents.move = true;\n      deferredEvents.zoom || (deferredEvents.zoom = zoom !== tr.zoom);\n      deferredEvents.rotate || (deferredEvents.rotate = bearing !== tr.bearing);\n      deferredEvents.pitch || (deferredEvents.pitch = pitch !== tr.pitch);\n    } // Avoid manipulating the real transform when interaction/animation is ongoing\n    // as it would interfere with Mapbox's handlers\n\n\n    if (!map.isMoving()) {\n      applyViewStateToTransform(map.transform, nextProps);\n    }\n\n    return changed;\n  }\n  /* Update camera constraints and projection settings to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n\n\n  _updateSettings(nextProps, currProps) {\n    const map = this._map;\n    let changed = false;\n\n    for (const propName of settingNames) {\n      if (propName in nextProps && !deepEqual(nextProps[propName], currProps[propName])) {\n        changed = true;\n        map[`set${propName[0].toUpperCase()}${propName.slice(1)}`](nextProps[propName]);\n      }\n    }\n\n    return changed;\n  }\n  /* Update map style to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if style is changed\n   */\n\n\n  _updateStyle(nextProps, currProps) {\n    if (nextProps.cursor !== currProps.cursor) {\n      this._map.getCanvas().style.cursor = nextProps.cursor;\n    }\n\n    if (nextProps.mapStyle !== currProps.mapStyle) {\n      const options = {\n        diff: nextProps.styleDiffing\n      };\n\n      if ('localIdeographFontFamily' in nextProps) {\n        options.localIdeographFontFamily = nextProps.localIdeographFontFamily;\n      }\n\n      this._map.setStyle(normalizeStyle(nextProps.mapStyle), options);\n\n      return true;\n    }\n\n    return false;\n  }\n  /* Update fog, light and terrain to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n\n\n  _updateStyleComponents(nextProps, currProps) {\n    const map = this._map;\n    let changed = false;\n\n    if (map.style.loaded()) {\n      if ('light' in nextProps && !deepEqual(nextProps.light, currProps.light)) {\n        changed = true;\n        map.setLight(nextProps.light);\n      }\n\n      if ('fog' in nextProps && !deepEqual(nextProps.fog, currProps.fog)) {\n        changed = true;\n        map.setFog(nextProps.fog);\n      }\n\n      if ('terrain' in nextProps && !deepEqual(nextProps.terrain, currProps.terrain)) {\n        if (!nextProps.terrain || map.getSource(nextProps.terrain.source)) {\n          changed = true;\n          map.setTerrain(nextProps.terrain); // Copy changes to the transform\n          // @ts-ignore\n\n          this._renderTransform.elevation = map.transform.elevation;\n        }\n      }\n    }\n\n    return changed;\n  }\n  /* Update interaction handlers to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n\n\n  _updateHandlers(nextProps, currProps) {\n    const map = this._map;\n    let changed = false;\n\n    for (const propName of handlerNames) {\n      const newValue = nextProps[propName];\n\n      if (!deepEqual(newValue, currProps[propName])) {\n        changed = true;\n\n        if (newValue) {\n          map[propName].enable(newValue);\n        } else {\n          map[propName].disable();\n        }\n      }\n    }\n\n    return changed;\n  }\n\n  _updateHover(e) {\n    const {\n      props\n    } = this;\n    const shouldTrackHoveredFeatures = props.interactiveLayerIds && (props.onMouseMove || props.onMouseEnter || props.onMouseLeave);\n\n    if (shouldTrackHoveredFeatures) {\n      const eventType = e.type;\n      const wasHovering = this._hoveredFeatures?.length > 0;\n      let features;\n\n      if (eventType === 'mousemove') {\n        try {\n          features = this._map.queryRenderedFeatures(e.point, {\n            layers: props.interactiveLayerIds\n          });\n        } catch {\n          features = [];\n        }\n      } else {\n        features = [];\n      }\n\n      const isHovering = features.length > 0;\n\n      if (!isHovering && wasHovering) {\n        e.type = 'mouseleave';\n\n        this._onPointerEvent(e);\n      }\n\n      this._hoveredFeatures = features;\n\n      if (isHovering && !wasHovering) {\n        e.type = 'mouseenter';\n\n        this._onPointerEvent(e);\n      }\n\n      e.type = eventType;\n    } else {\n      this._hoveredFeatures = null;\n    }\n  }\n\n  _fireEvent(baseFire, event, properties) {\n    const map = this._map;\n    const tr = map.transform;\n    const eventType = typeof event === 'string' ? event : event.type;\n\n    if (eventType === 'move') {\n      this._updateViewState(this.props, false);\n    }\n\n    if (eventType in cameraEvents) {\n      if (typeof event === 'object') {\n        event.viewState = transformToViewState(tr);\n      }\n\n      if (this._map.isMoving()) {\n        // Replace map.transform with ours during the callbacks\n        map.transform = this._renderTransform;\n        baseFire.call(map, event, properties);\n        map.transform = tr;\n        return map;\n      }\n    }\n\n    baseFire.call(map, event, properties);\n    return map;\n  } // All camera manipulations are complete, ready to repaint\n\n\n  _onBeforeRepaint() {\n    const map = this._map; // If there are camera changes driven by props, invoke camera events so that DOM controls are synced\n\n    this._internalUpdate = true;\n\n    for (const eventType in this._deferredEvents) {\n      if (this._deferredEvents[eventType]) {\n        map.fire(eventType);\n      }\n    }\n\n    this._internalUpdate = false;\n    const tr = this._map.transform; // Make sure camera matches the current props\n\n    this._map.transform = this._renderTransform;\n\n    this._onAfterRepaint = () => {\n      // Restores camera state before render/load events are fired\n      this._map.transform = tr;\n    };\n  }\n\n}\nMapbox.savedMaps = [];\n/**\n * Access token can be provided via one of:\n *   mapboxAccessToken prop\n *   access_token query parameter\n *   MapboxAccessToken environment variable\n *   REACT_APP_MAPBOX_ACCESS_TOKEN environment variable\n * @returns access token\n */\n\nfunction getAccessTokenFromEnv() {\n  let accessToken = null;\n  /* global location, process */\n\n  if (typeof location !== 'undefined') {\n    const match = /access_token=([^&\\/]*)/.exec(location.search);\n    accessToken = match && match[1];\n  } // Note: This depends on bundler plugins (e.g. webpack) importing environment correctly\n\n\n  try {\n    accessToken = accessToken || process.env.MapboxAccessToken;\n  } catch {// ignore\n  }\n\n  try {\n    accessToken = accessToken || process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n  } catch {// ignore\n  }\n\n  return accessToken;\n}","map":{"version":3,"mappings":"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","names":["transformToViewState","applyViewStateToTransform","normalizeStyle","deepEqual","pointerEvents","mousedown","mouseup","mouseover","mousemove","click","dblclick","mouseenter","mouseleave","mouseout","contextmenu","touchstart","touchend","touchmove","touchcancel","cameraEvents","movestart","move","moveend","dragstart","drag","dragend","zoomstart","zoom","zoomend","rotatestart","rotate","rotateend","pitchstart","pitch","pitchend","otherEvents","wheel","boxzoomstart","boxzoomend","boxzoomcancel","resize","load","render","idle","remove","data","styledata","sourcedata","error","settingNames","handlerNames","Mapbox","constructor","MapClass","props","container","e","cb","type","_updateHover","interactiveLayerIds","features","_hoveredFeatures","_map","queryRenderedFeatures","point","layers","length","_internalUpdate","_deferredEvents","_MapClass","_initialize","map","transform","_renderTransform","setProps","oldProps","settingsChanged","_updateSettings","clone","sizeChanged","_updateSize","viewStateChanged","_updateViewState","_updateStyle","_updateStyleComponents","_updateHandlers","isMoving","redraw","reuse","that","savedMaps","pop","oldContainer","getContainer","className","childNodes","appendChild","_container","initialViewState","styleDiffing","isStyleLoaded","fire","once","mapOptions","accessToken","mapboxAccessToken","getAccessTokenFromEnv","style","mapStyle","viewState","Object","assign","center","longitude","latitude","bearing","gl","getContext","HTMLCanvasElement","prototype","padding","setPadding","cursor","getCanvas","renderMap","_render","arg","_inRender","call","runRenderTaskQueue","_renderTaskQueue","run","_onBeforeRepaint","on","_onAfterRepaint","fireEvent","_fireEvent","bind","width","height","eventName","_onPointerEvent","_onCameraEvent","_onEvent","recycle","push","destroy","_frame","cancel","nextProps","triggerEvents","tr","changed","deferredEvents","currProps","propName","toUpperCase","slice","options","diff","localIdeographFontFamily","setStyle","loaded","light","setLight","fog","setFog","terrain","getSource","source","setTerrain","elevation","newValue","enable","disable","shouldTrackHoveredFeatures","onMouseMove","onMouseEnter","onMouseLeave","eventType","wasHovering","isHovering","baseFire","event","properties","location","match","exec","search","process","env","MapboxAccessToken","REACT_APP_MAPBOX_ACCESS_TOKEN"],"sources":["C:\\Users\\bhupe\\Downloads\\Term 4\\COMP4537\\MilestoneFinal\\ISAproject\\node_modules\\react-map-gl\\src\\mapbox\\mapbox.ts"],"sourcesContent":["import {transformToViewState, applyViewStateToTransform} from '../utils/transform';\nimport {normalizeStyle} from '../utils/style-utils';\nimport {deepEqual} from '../utils/deep-equal';\n\nimport type {\n  Transform,\n  ProjectionSpecification,\n  ViewState,\n  ViewStateChangeEvent,\n  DragPanOptions,\n  ZoomRotateOptions,\n  TransformRequestFunction,\n  Light,\n  Fog,\n  TerrainSpecification,\n  MapboxStyle,\n  ImmutableLike,\n  LngLatBoundsLike,\n  FitBoundsOptions,\n  MapMouseEvent,\n  MapLayerMouseEvent,\n  MapLayerTouchEvent,\n  MapWheelEvent,\n  MapBoxZoomEvent,\n  MapStyleDataEvent,\n  MapSourceDataEvent,\n  MapboxEvent,\n  ErrorEvent,\n  MapboxGeoJSONFeature,\n  MapboxMap\n} from '../types';\n\nexport type MapboxProps = Partial<ViewState> & {\n  // Init options\n  mapboxAccessToken?: string;\n\n  /** Camera options used when constructing the Map instance */\n  initialViewState?: Partial<ViewState> & {\n    /** The initial bounds of the map. If bounds is specified, it overrides longitude, latitude and zoom options. */\n    bounds?: LngLatBoundsLike;\n    /** A fitBounds options object to use only when setting the bounds option. */\n    fitBoundsOptions?: FitBoundsOptions;\n  };\n\n  /** If provided, render into an external WebGL context */\n  gl?: WebGLRenderingContext;\n\n  /**\n   * If true, the gl context will be created with MSA antialiasing, which can be useful for antialiasing custom layers.\n   * This is false by default as a performance optimization.\n   * @default false\n   */\n  antialias?: boolean;\n  /**\n   * If true, an attribution control will be added to the map.\n   * @default true\n   */\n  attributionControl?: boolean;\n  /**\n   * Snap to north threshold in degrees.\n   * @default 7\n   */\n  bearingSnap?: number;\n  /**\n   * The max number of pixels a user can shift the mouse pointer during a click for it to be\n   * considered a valid click (as opposed to a mouse drag).\n   * @default 3\n   */\n  clickTolerance?: number;\n  /**\n   * If `true`, Resource Timing API information will be collected for requests made by GeoJSON\n   * and Vector Tile web workers (this information is normally inaccessible from the main\n   * Javascript thread). Information will be returned in a `resourceTiming` property of\n   * relevant `data` events.\n   * @default false\n   */\n  collectResourceTiming?: boolean;\n  /**\n   * If `true` , scroll zoom will require pressing the ctrl or ⌘ key while scrolling to zoom map,\n   * and touch pan will require using two fingers while panning to move the map.\n   * Touch pitch will require three fingers to activate if enabled.\n   */\n  cooperativeGestures?: boolean;\n  /**\n   * If `true`, symbols from multiple sources can collide with each other during collision\n   * detection. If `false`, collision detection is run separately for the symbols in each source.\n   * @default true\n   */\n  crossSourceCollisions?: boolean;\n  /** String or strings to show in an AttributionControl.\n   * Only applicable if options.attributionControl is `true`. */\n  customAttribution?: string | string[];\n  /**\n   * Controls the duration of the fade-in/fade-out animation for label collisions, in milliseconds.\n   * This setting affects all symbol layers. This setting does not affect the duration of runtime\n   * styling transitions or raster tile cross-fading.\n   * @default 300\n   */\n  fadeDuration?: number;\n  /** If true, map creation will fail if the implementation determines that the performance of the created WebGL context would be dramatically lower than expected.\n   * @default false\n   */\n  failIfMajorPerformanceCaveat?: boolean;\n  /** If `true`, the map's position (zoom, center latitude, center longitude, bearing, and pitch) will be synced with the hash fragment of the page's URL.\n   * For example, `http://path/to/my/page.html#2.59/39.26/53.07/-24.1/60`.\n   * An additional string may optionally be provided to indicate a parameter-styled hash,\n   * e.g. http://path/to/my/page.html#map=2.59/39.26/53.07/-24.1/60&foo=bar, where foo\n   * is a custom parameter and bar is an arbitrary hash distinct from the map hash.\n   */\n  hash?: boolean | string;\n  /** If false, no mouse, touch, or keyboard listeners are attached to the map, so it will not respond to input\n   * @default true\n   */\n  interactive?: boolean;\n  /** A patch to apply to the default localization table for UI strings, e.g. control tooltips.\n   * The `locale` object maps namespaced UI string IDs to translated strings in the target language;\n   * see `src/ui/default_locale.js` for an example with all supported string IDs.\n   * The object may specify all UI strings (thereby adding support for a new translation) or\n   * only a subset of strings (thereby patching the default translation table).\n   */\n  locale?: {[key: string]: string};\n  /**\n   * Overrides the generation of all glyphs and font settings except font-weight keywords\n   * Also overrides localIdeographFontFamily\n   * @default null\n   */\n  localFontFamily?: string;\n  /**\n   * If specified, defines a CSS font-family for locally overriding generation of glyphs in the\n   * 'CJK Unified Ideographs' and 'Hangul Syllables' ranges. In these ranges, font settings from\n   * the map's style will be ignored, except for font-weight keywords (light/regular/medium/bold).\n   * The purpose of this option is to avoid bandwidth-intensive glyph server requests.\n   * @default \"sans-serif\"\n   */\n  localIdeographFontFamily?: string;\n  /**\n   * A string representing the position of the Mapbox wordmark on the map.\n   * @default \"bottom-left\"\n   */\n  logoPosition?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n  /**\n   * The maximum number of tiles stored in the tile cache for a given source. If omitted, the\n   * cache will be dynamically sized based on the current viewport.\n   * @default null\n   */\n  maxTileCacheSize?: number;\n  /**\n   * If true, map will prioritize rendering for performance by reordering layers\n   * If false, layers will always be drawn in the specified order\n   * @default true\n   */\n  optimizeForTerrain?: boolean;\n  /**\n   * If `false`, the map's pitch (tilt) control with \"drag to rotate\" interaction will be disabled.\n   * @default true\n   */\n  pitchWithRotate?: boolean;\n  /** If true, The maps canvas can be exported to a PNG using map.getCanvas().toDataURL();. This is false by default as a performance optimization.\n   * @default false\n   */\n  preserveDrawingBuffer?: boolean;\n  /**\n   * If `false`, the map won't attempt to re-request tiles once they expire per their HTTP\n   * `cacheControl`/`expires` headers.\n   * @default true\n   */\n  refreshExpiredTiles?: boolean;\n  /**\n   * Allows for the usage of the map in automated tests without an accessToken with custom self-hosted test fixtures.\n   * @default null\n   */\n  testMode?: boolean;\n  /**\n   * If  true, the map will automatically resize when the browser window resizes\n   * @default true\n   */\n  trackResize?: boolean;\n  /**\n   * A callback run before the Map makes a request for an external URL. The callback can be\n   * used to modify the url, set headers, or set the credentials property for cross-origin requests.\n   * @default null\n   */\n  transformRequest?: TransformRequestFunction;\n\n  // Handlers\n\n  /**\n   * If true, enable the \"box zoom\" interaction (see BoxZoomHandler)\n   * @default true\n   */\n  boxZoom?: boolean;\n  /**\n   * If true, enable the \"double click to zoom\" interaction (see DoubleClickZoomHandler).\n   * @default true\n   */\n  doubleClickZoom?: boolean;\n  /**\n   * If `true`, the \"drag to pan\" interaction is enabled.\n   * An `Object` value is passed as options to {@link DragPanHandler#enable}.\n   * @default true\n   */\n  dragPan?: boolean | DragPanOptions;\n  /**\n   * If true, enable the \"drag to rotate\" interaction (see DragRotateHandler).\n   * @default true\n   */\n  dragRotate?: boolean;\n  /**\n   * If true, enable keyboard shortcuts (see KeyboardHandler).\n   * @default true\n   */\n  keyboard?: boolean;\n  /**\n   * If `true`, the \"scroll to zoom\" interaction is enabled.\n   * An `Object` value is passed as options to {@link ScrollZoomHandler#enable}.\n   * @default true\n   */\n  scrollZoom?: boolean | ZoomRotateOptions;\n  /**\n   * If `true`, the \"drag to pitch\" interaction is enabled.\n   * An `Object` value is passed as options to {@link TouchPitchHandler#enable}.\n   * @default true\n   */\n  touchPitch?: boolean;\n  /**\n   * If `true`, the \"pinch to rotate and zoom\" interaction is enabled.\n   * An `Object` value is passed as options to {@link TouchZoomRotateHandler#enable}.\n   * @default true\n   */\n  touchZoomRotate?: boolean | ZoomRotateOptions;\n\n  // Constraints\n\n  /** If set, the map is constrained to the given bounds. */\n  maxBounds?: LngLatBoundsLike;\n  /** Maximum pitch of the map. */\n  maxPitch?: number;\n  /** Maximum zoom of the map. */\n  maxZoom?: number;\n  /** Minimum pitch of the map. */\n  minPitch?: number;\n  /** Minimum zoom of the map. */\n  minZoom?: number;\n\n  /** For external controller to override the camera state */\n  viewState?: ViewState & {\n    width: number;\n    height: number;\n  };\n\n  // Styling\n\n  /** Mapbox style */\n  mapStyle?: string | MapboxStyle | ImmutableLike;\n  /** Enable diffing when the map style changes\n   * @default true\n   */\n  styleDiffing?: boolean;\n  /** The fog property of the style. Must conform to the Fog Style Specification .\n   * If `null` is provided, removes the fog from the map. */\n  fog?: Fog | null;\n  /** Light properties of the map. */\n  light?: Light;\n  /** Terrain property of the style. Must conform to the Terrain Style Specification .\n   * If `null` is provided, removes terrain from the map. */\n  terrain?: TerrainSpecification | null;\n  /** Default layers to query on pointer events */\n  interactiveLayerIds?: string[];\n  /** The projection the map should be rendered in\n   * @default \"mercator\"\n   */\n  projection?: ProjectionSpecification | string;\n  /**\n   * If `true`, multiple copies of the world will be rendered, when zoomed out.\n   * @default true\n   */\n  renderWorldCopies?: boolean;\n  /** CSS cursor */\n  cursor?: string;\n\n  // Callbacks\n  onMouseDown?: (e: MapLayerMouseEvent) => void;\n  onMouseUp?: (e: MapLayerMouseEvent) => void;\n  onMouseOver?: (e: MapLayerMouseEvent) => void;\n  onMouseMove?: (e: MapLayerMouseEvent) => void;\n  onClick?: (e: MapLayerMouseEvent) => void;\n  onDblClick?: (e: MapLayerMouseEvent) => void;\n  onMouseEnter?: (e: MapLayerMouseEvent) => void;\n  onMouseLeave?: (e: MapLayerMouseEvent) => void;\n  onMouseOut?: (e: MapLayerMouseEvent) => void;\n  onContextMenu?: (e: MapLayerMouseEvent) => void;\n  onTouchStart?: (e: MapLayerTouchEvent) => void;\n  onTouchEnd?: (e: MapLayerTouchEvent) => void;\n  onTouchMove?: (e: MapLayerTouchEvent) => void;\n  onTouchCancel?: (e: MapLayerTouchEvent) => void;\n\n  onMoveStart?: (e: ViewStateChangeEvent) => void;\n  onMove?: (e: ViewStateChangeEvent) => void;\n  onMoveEnd?: (e: ViewStateChangeEvent) => void;\n  onDragStart?: (e: ViewStateChangeEvent) => void;\n  onDrag?: (e: ViewStateChangeEvent) => void;\n  onDragEnd?: (e: ViewStateChangeEvent) => void;\n  onZoomStart?: (e: ViewStateChangeEvent) => void;\n  onZoom?: (e: ViewStateChangeEvent) => void;\n  onZoomEnd?: (e: ViewStateChangeEvent) => void;\n  onRotateStart?: (e: ViewStateChangeEvent) => void;\n  onRotate?: (e: ViewStateChangeEvent) => void;\n  onRotateEnd?: (e: ViewStateChangeEvent) => void;\n  onPitchStart?: (e: ViewStateChangeEvent) => void;\n  onPitch?: (e: ViewStateChangeEvent) => void;\n  onPitchEnd?: (e: ViewStateChangeEvent) => void;\n\n  onWheel?: (e: MapWheelEvent) => void;\n  onBoxZoomStart?: (e: MapBoxZoomEvent) => void;\n  onBoxZoomEnd?: (e: MapBoxZoomEvent) => void;\n  onBoxZoomCancel?: (e: MapBoxZoomEvent) => void;\n\n  onResize?: (e: MapboxEvent) => void;\n  onLoad?: (e: MapboxEvent) => void;\n  onRender?: (e: MapboxEvent) => void;\n  onIdle?: (e: MapboxEvent) => void;\n  onError?: (e: ErrorEvent) => void;\n  onRemove?: (e: MapboxEvent) => void;\n  onData?: (e: MapStyleDataEvent | MapSourceDataEvent) => void;\n  onStyleData?: (e: MapStyleDataEvent) => void;\n  onSourceData?: (e: MapSourceDataEvent) => void;\n};\n\nconst pointerEvents = {\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseover: 'onMouseOver',\n  mousemove: 'onMouseMove',\n  click: 'onClick',\n  dblclick: 'onDblClick',\n  mouseenter: 'onMouseEnter',\n  mouseleave: 'onMouseLeave',\n  mouseout: 'onMouseOut',\n  contextmenu: 'onContextMenu',\n  touchstart: 'onTouchStart',\n  touchend: 'onTouchEnd',\n  touchmove: 'onTouchMove',\n  touchcancel: 'onTouchCancel'\n};\nconst cameraEvents = {\n  movestart: 'onMoveStart',\n  move: 'onMove',\n  moveend: 'onMoveEnd',\n  dragstart: 'onDragStart',\n  drag: 'onDrag',\n  dragend: 'onDragEnd',\n  zoomstart: 'onZoomStart',\n  zoom: 'onZoom',\n  zoomend: 'onZoomEnd',\n  rotatestart: 'onRotateStart',\n  rotate: 'onRotate',\n  rotateend: 'onRotateEnd',\n  pitchstart: 'onPitchStart',\n  pitch: 'onPitch',\n  pitchend: 'onPitchEnd'\n};\nconst otherEvents = {\n  wheel: 'onWheel',\n  boxzoomstart: 'onBoxZoomStart',\n  boxzoomend: 'onBoxZoomEnd',\n  boxzoomcancel: 'onBoxZoomCancel',\n  resize: 'onResize',\n  load: 'onLoad',\n  render: 'onRender',\n  idle: 'onIdle',\n  remove: 'onRemove',\n  data: 'onData',\n  styledata: 'onStyleData',\n  sourcedata: 'onSourceData',\n  error: 'onError'\n};\nconst settingNames: (keyof MapboxProps)[] = [\n  'minZoom',\n  'maxZoom',\n  'minPitch',\n  'maxPitch',\n  'maxBounds',\n  'projection',\n  'renderWorldCopies'\n];\nconst handlerNames: (keyof MapboxProps)[] = [\n  'scrollZoom',\n  'boxZoom',\n  'dragRotate',\n  'dragPan',\n  'keyboard',\n  'doubleClickZoom',\n  'touchZoomRotate',\n  'touchPitch'\n];\n\n/**\n * A wrapper for mapbox-gl's Map class\n */\nexport default class Mapbox {\n  private _MapClass: typeof MapboxMap;\n  // mapboxgl.Map instance. Not using type here because we are accessing\n  // private members and methods\n  private _map: any = null;\n  // User-supplied props\n  props: MapboxProps;\n\n  // Mapbox map is stateful.\n  // During method calls/user interactions, map.transform is mutated and\n  // deviate from user-supplied props.\n  // In order to control the map reactively, we shadow the transform\n  // with the one below, which reflects the view state resolved from\n  // both user-supplied props and the underlying state\n  private _renderTransform: Transform;\n\n  // Internal states\n  private _internalUpdate: boolean = false;\n  private _inRender: boolean = false;\n  private _hoveredFeatures: MapboxGeoJSONFeature[] = null;\n  private _deferredEvents: {\n    move: boolean;\n    zoom: boolean;\n    pitch: boolean;\n    rotate: boolean;\n  } = {\n    move: false,\n    zoom: false,\n    pitch: false,\n    rotate: false\n  };\n\n  static savedMaps: Mapbox[] = [];\n\n  constructor(MapClass: typeof MapboxMap, props: MapboxProps, container: HTMLDivElement) {\n    this._MapClass = MapClass;\n    this.props = props;\n    this._initialize(container);\n  }\n\n  get map(): MapboxMap {\n    return this._map as MapboxMap;\n  }\n\n  get transform(): Transform {\n    return this._renderTransform;\n  }\n\n  setProps(props: MapboxProps) {\n    const oldProps = this.props;\n    this.props = props;\n\n    const settingsChanged = this._updateSettings(props, oldProps);\n    if (settingsChanged) {\n      this._renderTransform = this._map.transform.clone();\n    }\n    const sizeChanged = this._updateSize(props);\n    const viewStateChanged = this._updateViewState(props, true);\n    this._updateStyle(props, oldProps);\n    this._updateStyleComponents(props, oldProps);\n    this._updateHandlers(props, oldProps);\n\n    // If 1) view state has changed to match props and\n    //    2) the props change is not triggered by map events,\n    // it's driven by an external state change. Redraw immediately\n    if (settingsChanged || sizeChanged || (viewStateChanged && !this._map.isMoving())) {\n      this.redraw();\n    }\n  }\n\n  static reuse(props: MapboxProps, container: HTMLDivElement) {\n    const that = Mapbox.savedMaps.pop();\n    if (!that) {\n      return null;\n    }\n\n    const map = that.map;\n    // When reusing the saved map, we need to reparent the map(canvas) and other child nodes\n    // intoto the new container from the props.\n    // Step1: reparenting child nodes from old container to new container\n    const oldContainer = map.getContainer();\n    container.className = oldContainer.className;\n    while (oldContainer.childNodes.length > 0) {\n      container.appendChild(oldContainer.childNodes[0]);\n    }\n    // Step2: replace the internal container with new container from the react component\n    // @ts-ignore\n    map._container = container;\n\n    // Step 3: apply new props\n    if (props.initialViewState) {\n      that._updateViewState(props.initialViewState, false);\n    }\n    map.resize();\n    that.setProps({...props, styleDiffing: false});\n\n    // Simulate load event\n    if (map.isStyleLoaded()) {\n      map.fire('load');\n    } else {\n      map.once('styledata', () => map.fire('load'));\n    }\n    return that;\n  }\n\n  /* eslint-disable complexity,max-statements */\n  _initialize(container: HTMLDivElement) {\n    const {props} = this;\n    const mapOptions = {\n      ...props,\n      ...props.initialViewState,\n      accessToken: props.mapboxAccessToken || getAccessTokenFromEnv() || null,\n      container,\n      style: normalizeStyle(props.mapStyle)\n    };\n\n    const viewState = mapOptions.initialViewState || mapOptions.viewState || mapOptions;\n    Object.assign(mapOptions, {\n      center: [viewState.longitude || 0, viewState.latitude || 0],\n      zoom: viewState.zoom || 0,\n      pitch: viewState.pitch || 0,\n      bearing: viewState.bearing || 0\n    });\n\n    if (props.gl) {\n      // eslint-disable-next-line\n      const getContext = HTMLCanvasElement.prototype.getContext;\n      // Hijack canvas.getContext to return our own WebGLContext\n      // This will be called inside the mapboxgl.Map constructor\n      // @ts-expect-error\n      HTMLCanvasElement.prototype.getContext = () => {\n        // Unhijack immediately\n        HTMLCanvasElement.prototype.getContext = getContext;\n        return props.gl;\n      };\n    }\n\n    const map: any = new this._MapClass(mapOptions);\n    // Props that are not part of constructor options\n    if (viewState.padding) {\n      map.setPadding(viewState.padding);\n    }\n    if (props.cursor) {\n      map.getCanvas().style.cursor = props.cursor;\n    }\n    this._renderTransform = map.transform.clone();\n\n    // Hack\n    // Insert code into map's render cycle\n    const renderMap = map._render;\n    map._render = (arg: number) => {\n      this._inRender = true;\n      renderMap.call(map, arg);\n      this._inRender = false;\n    };\n    const runRenderTaskQueue = map._renderTaskQueue.run;\n    map._renderTaskQueue.run = (arg: number) => {\n      runRenderTaskQueue.call(map._renderTaskQueue, arg);\n      this._onBeforeRepaint();\n    };\n    map.on('render', () => this._onAfterRepaint());\n    // Insert code into map's event pipeline\n    const fireEvent = map.fire;\n    map.fire = this._fireEvent.bind(this, fireEvent);\n\n    // add listeners\n    map.on('resize', () => {\n      this._renderTransform.resize(map.transform.width, map.transform.height);\n    });\n    map.on('styledata', () => this._updateStyleComponents(this.props, {}));\n    map.on('sourcedata', () => this._updateStyleComponents(this.props, {}));\n    for (const eventName in pointerEvents) {\n      map.on(eventName, this._onPointerEvent);\n    }\n    for (const eventName in cameraEvents) {\n      map.on(eventName, this._onCameraEvent);\n    }\n    for (const eventName in otherEvents) {\n      map.on(eventName, this._onEvent);\n    }\n    this._map = map;\n  }\n  /* eslint-enable complexity,max-statements */\n\n  recycle() {\n    Mapbox.savedMaps.push(this);\n  }\n\n  destroy() {\n    this._map.remove();\n  }\n\n  // Force redraw the map now. Typically resize() and jumpTo() is reflected in the next\n  // render cycle, which is managed by Mapbox's animation loop.\n  // This removes the synchronization issue caused by requestAnimationFrame.\n  redraw() {\n    const map = this._map;\n    // map._render will throw error if style does not exist\n    // https://github.com/mapbox/mapbox-gl-js/blob/fb9fc316da14e99ff4368f3e4faa3888fb43c513\n    //   /src/ui/map.js#L1834\n    if (!this._inRender && map.style) {\n      // cancel the scheduled update\n      if (map._frame) {\n        map._frame.cancel();\n        map._frame = null;\n      }\n      // the order is important - render() may schedule another update\n      map._render();\n    }\n  }\n\n  /* Trigger map resize if size is controlled\n     @param {object} nextProps\n     @returns {bool} true if size has changed\n   */\n  _updateSize(nextProps: MapboxProps): boolean {\n    // Check if size is controlled\n    const {viewState} = nextProps;\n    if (viewState) {\n      const map = this._map;\n      if (viewState.width !== map.transform.width || viewState.height !== map.transform.height) {\n        map.resize();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Adapted from map.jumpTo\n  /* Update camera to match props\n     @param {object} nextProps\n     @param {bool} triggerEvents - should fire camera events\n     @returns {bool} true if anything is changed\n   */\n  _updateViewState(nextProps: MapboxProps, triggerEvents: boolean): boolean {\n    if (this._internalUpdate) {\n      return false;\n    }\n    const map = this._map;\n\n    const tr = this._renderTransform;\n    // Take a snapshot of the transform before mutation\n    const {zoom, pitch, bearing} = tr;\n    const changed = applyViewStateToTransform(tr, {\n      ...transformToViewState(map.transform),\n      ...nextProps\n    });\n\n    if (changed && triggerEvents) {\n      const deferredEvents = this._deferredEvents;\n      // Delay DOM control updates to the next render cycle\n      deferredEvents.move = true;\n      deferredEvents.zoom ||= zoom !== tr.zoom;\n      deferredEvents.rotate ||= bearing !== tr.bearing;\n      deferredEvents.pitch ||= pitch !== tr.pitch;\n    }\n\n    // Avoid manipulating the real transform when interaction/animation is ongoing\n    // as it would interfere with Mapbox's handlers\n    if (!map.isMoving()) {\n      applyViewStateToTransform(map.transform, nextProps);\n    }\n\n    return changed;\n  }\n\n  /* Update camera constraints and projection settings to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateSettings(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    const map = this._map;\n    let changed = false;\n    for (const propName of settingNames) {\n      if (propName in nextProps && !deepEqual(nextProps[propName], currProps[propName])) {\n        changed = true;\n        map[`set${propName[0].toUpperCase()}${propName.slice(1)}`](nextProps[propName]);\n      }\n    }\n    return changed;\n  }\n\n  /* Update map style to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if style is changed\n   */\n  _updateStyle(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    if (nextProps.cursor !== currProps.cursor) {\n      this._map.getCanvas().style.cursor = nextProps.cursor;\n    }\n    if (nextProps.mapStyle !== currProps.mapStyle) {\n      const options: any = {\n        diff: nextProps.styleDiffing\n      };\n      if ('localIdeographFontFamily' in nextProps) {\n        options.localIdeographFontFamily = nextProps.localIdeographFontFamily;\n      }\n      this._map.setStyle(normalizeStyle(nextProps.mapStyle), options);\n      return true;\n    }\n    return false;\n  }\n\n  /* Update fog, light and terrain to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateStyleComponents(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    const map = this._map;\n    let changed = false;\n    if (map.style.loaded()) {\n      if ('light' in nextProps && !deepEqual(nextProps.light, currProps.light)) {\n        changed = true;\n        map.setLight(nextProps.light);\n      }\n      if ('fog' in nextProps && !deepEqual(nextProps.fog, currProps.fog)) {\n        changed = true;\n        map.setFog(nextProps.fog);\n      }\n      if ('terrain' in nextProps && !deepEqual(nextProps.terrain, currProps.terrain)) {\n        if (!nextProps.terrain || map.getSource(nextProps.terrain.source)) {\n          changed = true;\n          map.setTerrain(nextProps.terrain);\n          // Copy changes to the transform\n          // @ts-ignore\n          this._renderTransform.elevation = map.transform.elevation;\n        }\n      }\n    }\n    return changed;\n  }\n\n  /* Update interaction handlers to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateHandlers(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    const map = this._map;\n    let changed = false;\n    for (const propName of handlerNames) {\n      const newValue = nextProps[propName];\n      if (!deepEqual(newValue, currProps[propName])) {\n        changed = true;\n        if (newValue) {\n          map[propName].enable(newValue);\n        } else {\n          map[propName].disable();\n        }\n      }\n    }\n    return changed;\n  }\n\n  _onEvent = (e: MapboxEvent) => {\n    // @ts-ignore\n    const cb = this.props[otherEvents[e.type]];\n    if (cb) {\n      cb(e);\n    }\n  };\n\n  _updateHover(e: MapMouseEvent) {\n    const {props} = this;\n    const shouldTrackHoveredFeatures =\n      props.interactiveLayerIds && (props.onMouseMove || props.onMouseEnter || props.onMouseLeave);\n\n    if (shouldTrackHoveredFeatures) {\n      const eventType = e.type;\n      const wasHovering = this._hoveredFeatures?.length > 0;\n      let features;\n      if (eventType === 'mousemove') {\n        try {\n          features = this._map.queryRenderedFeatures(e.point, {\n            layers: props.interactiveLayerIds\n          });\n        } catch {\n          features = [];\n        }\n      } else {\n        features = [];\n      }\n      const isHovering = features.length > 0;\n\n      if (!isHovering && wasHovering) {\n        e.type = 'mouseleave';\n        this._onPointerEvent(e);\n      }\n      this._hoveredFeatures = features;\n      if (isHovering && !wasHovering) {\n        e.type = 'mouseenter';\n        this._onPointerEvent(e);\n      }\n      e.type = eventType;\n    } else {\n      this._hoveredFeatures = null;\n    }\n  }\n\n  _onPointerEvent = (e: MapLayerMouseEvent | MapLayerTouchEvent) => {\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      this._updateHover(e);\n    }\n\n    // @ts-ignore\n    const cb = this.props[pointerEvents[e.type]];\n    if (cb) {\n      if (this.props.interactiveLayerIds && e.type !== 'mouseover' && e.type !== 'mouseout') {\n        const features =\n          this._hoveredFeatures ||\n          this._map.queryRenderedFeatures(e.point, {\n            layers: this.props.interactiveLayerIds\n          });\n        if (!features.length) {\n          return;\n        }\n        e.features = features;\n      }\n      cb(e);\n      delete e.features;\n    }\n  };\n\n  _onCameraEvent = (e: ViewStateChangeEvent) => {\n    if (!this._internalUpdate) {\n      // @ts-ignore\n      const cb = this.props[cameraEvents[e.type]];\n      if (cb) {\n        cb(e);\n      }\n    }\n    if (e.type in this._deferredEvents) {\n      this._deferredEvents[e.type] = false;\n    }\n  };\n\n  _fireEvent(baseFire: Function, event: string | MapboxEvent, properties?: object) {\n    const map = this._map;\n    const tr = map.transform;\n\n    const eventType = typeof event === 'string' ? event : event.type;\n    if (eventType === 'move') {\n      this._updateViewState(this.props, false);\n    }\n    if (eventType in cameraEvents) {\n      if (typeof event === 'object') {\n        (event as ViewStateChangeEvent).viewState = transformToViewState(tr);\n      }\n      if (this._map.isMoving()) {\n        // Replace map.transform with ours during the callbacks\n        map.transform = this._renderTransform;\n        baseFire.call(map, event, properties);\n        map.transform = tr;\n\n        return map;\n      }\n    }\n    baseFire.call(map, event, properties);\n\n    return map;\n  }\n\n  // All camera manipulations are complete, ready to repaint\n  _onBeforeRepaint() {\n    const map = this._map;\n\n    // If there are camera changes driven by props, invoke camera events so that DOM controls are synced\n    this._internalUpdate = true;\n    for (const eventType in this._deferredEvents) {\n      if (this._deferredEvents[eventType]) {\n        map.fire(eventType);\n      }\n    }\n    this._internalUpdate = false;\n\n    const tr = this._map.transform;\n    // Make sure camera matches the current props\n    this._map.transform = this._renderTransform;\n\n    this._onAfterRepaint = () => {\n      // Restores camera state before render/load events are fired\n      this._map.transform = tr;\n    };\n  }\n\n  _onAfterRepaint: () => void;\n}\n\n/**\n * Access token can be provided via one of:\n *   mapboxAccessToken prop\n *   access_token query parameter\n *   MapboxAccessToken environment variable\n *   REACT_APP_MAPBOX_ACCESS_TOKEN environment variable\n * @returns access token\n */\nfunction getAccessTokenFromEnv(): string {\n  let accessToken = null;\n\n  /* global location, process */\n  if (typeof location !== 'undefined') {\n    const match = /access_token=([^&\\/]*)/.exec(location.search);\n    accessToken = match && match[1];\n  }\n\n  // Note: This depends on bundler plugins (e.g. webpack) importing environment correctly\n  try {\n    accessToken = accessToken || process.env.MapboxAccessToken;\n  } catch {\n    // ignore\n  }\n\n  try {\n    accessToken = accessToken || process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n  } catch {\n    // ignore\n  }\n\n  return accessToken;\n}\n"]},"metadata":{},"sourceType":"module"}