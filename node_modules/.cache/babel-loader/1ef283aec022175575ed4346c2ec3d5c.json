{"ast":null,"code":"import * as React from 'react';\nimport { forwardRef, useImperativeHandle, useRef, useEffect } from 'react';\nimport { applyReactStyle } from '../utils/apply-react-style';\nimport useControl from './use-control';\nvar GeolocateControl = forwardRef(function (props, ref) {\n  var thisRef = useRef({\n    props: props\n  });\n  var ctrl = useControl(function (_ref) {\n    var mapLib = _ref.mapLib;\n    var gc = new mapLib.GeolocateControl(props);\n    gc.on('geolocate', function (e) {\n      var _thisRef$current$prop, _thisRef$current$prop2;\n\n      (_thisRef$current$prop = (_thisRef$current$prop2 = thisRef.current.props).onGeolocate) === null || _thisRef$current$prop === void 0 ? void 0 : _thisRef$current$prop.call(_thisRef$current$prop2, e);\n    });\n    gc.on('error', function (e) {\n      var _thisRef$current$prop3, _thisRef$current$prop4;\n\n      (_thisRef$current$prop3 = (_thisRef$current$prop4 = thisRef.current.props).onError) === null || _thisRef$current$prop3 === void 0 ? void 0 : _thisRef$current$prop3.call(_thisRef$current$prop4, e);\n    });\n    gc.on('outofmaxbounds', function (e) {\n      var _thisRef$current$prop5, _thisRef$current$prop6;\n\n      (_thisRef$current$prop5 = (_thisRef$current$prop6 = thisRef.current.props).onOutOfMaxBounds) === null || _thisRef$current$prop5 === void 0 ? void 0 : _thisRef$current$prop5.call(_thisRef$current$prop6, e);\n    });\n    gc.on('trackuserlocationstart', function (e) {\n      var _thisRef$current$prop7, _thisRef$current$prop8;\n\n      (_thisRef$current$prop7 = (_thisRef$current$prop8 = thisRef.current.props).onTrackUserLocationStart) === null || _thisRef$current$prop7 === void 0 ? void 0 : _thisRef$current$prop7.call(_thisRef$current$prop8, e);\n    });\n    gc.on('trackuserlocationend', function (e) {\n      var _thisRef$current$prop9, _thisRef$current$prop10;\n\n      (_thisRef$current$prop9 = (_thisRef$current$prop10 = thisRef.current.props).onTrackUserLocationEnd) === null || _thisRef$current$prop9 === void 0 ? void 0 : _thisRef$current$prop9.call(_thisRef$current$prop10, e);\n    });\n    return gc;\n  }, {\n    position: props.position\n  });\n  thisRef.current.props = props;\n  useImperativeHandle(ref, function () {\n    return {\n      trigger: function trigger() {\n        return ctrl.trigger();\n      }\n    };\n  }, []);\n  useEffect(function () {\n    // @ts-ignore\n    applyReactStyle(ctrl._container, props.style);\n  }, [props.style]);\n  return null;\n});\nGeolocateControl.displayName = 'GeolocateControl';\nexport default React.memo(GeolocateControl);","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,UAAR,EAAoBC,mBAApB,EAAyCC,MAAzC,EAAiDC,SAAjD,QAAiE,OAAjE;AACA,SAAQC,eAAR,QAA8B,4BAA9B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAkEA,IAAMC,gBAAgB,GAAGN,UAAU,CAA6C,UAACO,KAAD,EAAQC,GAAR,EAAe;AAC7F,MAAMC,OAAO,GAAGP,MAAM,CAAC;AAACK,SAAK,EAALA;AAAD,GAAD,CAAtB;AAEA,MAAMG,IAAI,GAAGL,UAAU,CACrB,gBAAa;AAAA,QAAXM,MAAW,QAAXA,MAAW;AACX,QAAMC,EAAE,GAAG,IAAID,MAAM,CAACL,gBAAX,CAA4BC,KAA5B,CAAX;AAEAK,MAAE,CAACC,EAAH,CAAM,WAAN,EAAmB,WAAC,EAAG;AAAA;;AACrB,gEAAO,CAACC,OAAR,CAAgBP,KAAhB,EAAsBQ,WAAtB,6GAAoCC,CAApC;AACD,KAFD;AAGAJ,MAAE,CAACC,EAAH,CAAM,OAAN,EAAe,WAAC,EAAG;AAAA;;AACjB,iEAAO,CAACC,OAAR,CAAgBP,KAAhB,EAAsBU,OAAtB,+GAAgCD,CAAhC;AACD,KAFD;AAGAJ,MAAE,CAACC,EAAH,CAAM,gBAAN,EAAwB,WAAC,EAAG;AAAA;;AAC1B,iEAAO,CAACC,OAAR,CAAgBP,KAAhB,EAAsBW,gBAAtB,+GAAyCF,CAAzC;AACD,KAFD;AAGAJ,MAAE,CAACC,EAAH,CAAM,wBAAN,EAAgC,WAAC,EAAG;AAAA;;AAClC,iEAAO,CAACC,OAAR,CAAgBP,KAAhB,EAAsBY,wBAAtB,+GAAiDH,CAAjD;AACD,KAFD;AAGAJ,MAAE,CAACC,EAAH,CAAM,sBAAN,EAA8B,WAAC,EAAG;AAAA;;AAChC,kEAAO,CAACC,OAAR,CAAgBP,KAAhB,EAAsBa,sBAAtB,gHAA+CJ,CAA/C;AACD,KAFD;AAIA,WAAOJ,EAAP;AACD,GArBoB,EAsBrB;AAACS,YAAQ,EAAEd,KAAK,CAACc;AAAjB,GAtBqB,CAAvB;AAyBAZ,SAAO,CAACK,OAAR,CAAgBP,KAAhB,GAAwBA,KAAxB;AAEAN,qBAAmB,CACjBO,GADiB,EAEjB;AAAA,WAAO;AACLc,aAAO,EAAE;AAAA,eAAMZ,IAAI,CAACY,OAAL,EAAN;AAAA;AADJ,KAAP;AAAA,GAFiB,EAKjB,EALiB,CAAnB;AAQAnB,WAAS,CAAC,YAAK;AACb;AACAC,mBAAe,CAACM,IAAI,CAACa,UAAN,EAAkBhB,KAAK,CAACiB,KAAxB,CAAf;AACD,GAHQ,EAGN,CAACjB,KAAK,CAACiB,KAAP,CAHM,CAAT;AAKA,SAAO,IAAP;AACD,CA5CkC,CAAnC;AA8CAlB,gBAAgB,CAACmB,WAAjB,GAA+B,kBAA/B;AAEA,eAAe1B,KAAK,CAAC2B,IAAN,CAAWpB,gBAAX,CAAf","names":["React","forwardRef","useImperativeHandle","useRef","useEffect","applyReactStyle","useControl","GeolocateControl","props","ref","thisRef","ctrl","mapLib","gc","on","current","onGeolocate","e","onError","onOutOfMaxBounds","onTrackUserLocationStart","onTrackUserLocationEnd","position","trigger","_container","style","displayName","memo"],"sources":["C:\\Users\\bhupe\\Downloads\\Term 4\\COMP4537\\MilestoneFinal\\ISAproject\\node_modules\\react-map-gl\\src\\components\\geolocate-control.ts"],"sourcesContent":["import * as React from 'react';\nimport {forwardRef, useImperativeHandle, useRef, useEffect} from 'react';\nimport {applyReactStyle} from '../utils/apply-react-style';\nimport useControl from './use-control';\n\nimport type {\n  ControlPosition,\n  PositionOptions,\n  FitBoundsOptions,\n  MapboxGeolocateControl,\n  GeolocateEvent,\n  GeolocateResultEvent,\n  GeolocateErrorEvent\n} from '../types';\n\nexport type GeolocateControlRef = {\n  /** Triggers a geolocate event */\n  trigger: () => boolean;\n};\n\nexport type GeolocateControlProps = {\n  /**\n   * A Geolocation API PositionOptions object.\n   * @default {enableHighAccuracy:false,timeout:6000}\n   */\n  positionOptions?: PositionOptions;\n  /** A Map#fitBounds options object to use when the map is panned and zoomed to the user's location.\n   * @default {maxZoom:15}\n   */\n  fitBoundsOptions?: FitBoundsOptions;\n  /** If true the GeolocateControl becomes a toggle button and when active the map will receive\n   * updates to the user's location as it changes. Default false.\n   * @default false\n   */\n  trackUserLocation?: boolean;\n  /** Draw a transparent circle will be drawn around the user location indicating the accuracy\n   * (95% confidence level) of the user's location. Set to false to disable.\n   * This only has effect if `showUserLocation` is true.\n   * @default true\n   */\n  showAccuracyCircle?: boolean;\n  /**\n   * Show a dot on the map at the user's location. Set to false to disable.\n   * @default true\n   */\n  showUserLocation?: boolean;\n  /** If true an arrow will be drawn next to the user location dot indicating the device's heading.\n   * This only has affect when `trackUserLocation` is true. Default false.\n   * @default false\n   */\n  showUserHeading?: boolean;\n  /** Placement of the control relative to the map. */\n  position?: ControlPosition;\n  /** CSS style override, applied to the control's container */\n  style?: React.CSSProperties;\n\n  /** Called on each Geolocation API position update that returned as success. */\n  onGeolocate?: (e: GeolocateResultEvent) => void;\n  /** Called on each Geolocation API position update that returned as an error. */\n  onError?: (e: GeolocateErrorEvent) => void;\n  /** Called on each Geolocation API position update that returned as success but user position\n   * is out of map `maxBounds`. */\n  onOutOfMaxBounds?: (e: GeolocateResultEvent) => void;\n  /** Called when the GeolocateControl changes to the active lock state. */\n  onTrackUserLocationStart?: (e: GeolocateEvent) => void;\n  /** Called when the GeolocateControl changes to the background state. */\n  onTrackUserLocationEnd?: (e: GeolocateEvent) => void;\n};\n\nconst GeolocateControl = forwardRef<GeolocateControlRef, GeolocateControlProps>((props, ref) => {\n  const thisRef = useRef({props});\n\n  const ctrl = useControl<MapboxGeolocateControl>(\n    ({mapLib}) => {\n      const gc = new mapLib.GeolocateControl(props);\n\n      gc.on('geolocate', e => {\n        thisRef.current.props.onGeolocate?.(e as GeolocateResultEvent);\n      });\n      gc.on('error', e => {\n        thisRef.current.props.onError?.(e as GeolocateErrorEvent);\n      });\n      gc.on('outofmaxbounds', e => {\n        thisRef.current.props.onOutOfMaxBounds?.(e as GeolocateResultEvent);\n      });\n      gc.on('trackuserlocationstart', e => {\n        thisRef.current.props.onTrackUserLocationStart?.(e as GeolocateEvent);\n      });\n      gc.on('trackuserlocationend', e => {\n        thisRef.current.props.onTrackUserLocationEnd?.(e as GeolocateEvent);\n      });\n\n      return gc;\n    },\n    {position: props.position}\n  );\n\n  thisRef.current.props = props;\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      trigger: () => ctrl.trigger()\n    }),\n    []\n  );\n\n  useEffect(() => {\n    // @ts-ignore\n    applyReactStyle(ctrl._container, props.style);\n  }, [props.style]);\n\n  return null;\n});\n\nGeolocateControl.displayName = 'GeolocateControl';\n\nexport default React.memo(GeolocateControl);\n"]},"metadata":{},"sourceType":"module"}