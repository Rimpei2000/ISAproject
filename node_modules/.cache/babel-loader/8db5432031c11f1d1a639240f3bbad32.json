{"ast":null,"code":"import { useRef, useEffect } from 'react';\n/**\r\n * Track whether a component is current mounted. Generally less preferable than\r\n * properlly canceling effects so they don't run after a component is unmounted,\r\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\r\n *\r\n * @returns a function that returns the current isMounted state of the component\r\n *\r\n * ```ts\r\n * const [data, setData] = useState(null)\r\n * const isMounted = useMounted()\r\n *\r\n * useEffect(() => {\r\n *   fetchdata().then((newData) => {\r\n *      if (isMounted()) {\r\n *        setData(newData);\r\n *      }\r\n *   })\r\n * })\r\n * ```\r\n */\n\nexport default function useMounted() {\n  var mounted = useRef(true);\n  var isMounted = useRef(function () {\n    return mounted.current;\n  });\n  useEffect(function () {\n    return function () {\n      mounted.current = false;\n    };\n  }, []);\n  return isMounted.current;\n}","map":{"version":3,"sources":["C:/Users/bhupe/Downloads/Term 4/COMP4537/MilestoneFinal/ISAproject/node_modules/@restart/hooks/esm/useMounted.js"],"names":["useRef","useEffect","useMounted","mounted","isMounted","current"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,UAAT,GAAsB;AACnC,MAAIC,OAAO,GAAGH,MAAM,CAAC,IAAD,CAApB;AACA,MAAII,SAAS,GAAGJ,MAAM,CAAC,YAAY;AACjC,WAAOG,OAAO,CAACE,OAAf;AACD,GAFqB,CAAtB;AAGAJ,EAAAA,SAAS,CAAC,YAAY;AACpB,WAAO,YAAY;AACjBE,MAAAA,OAAO,CAACE,OAAR,GAAkB,KAAlB;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;AAKA,SAAOD,SAAS,CAACC,OAAjB;AACD","sourcesContent":["import { useRef, useEffect } from 'react';\r\n/**\r\n * Track whether a component is current mounted. Generally less preferable than\r\n * properlly canceling effects so they don't run after a component is unmounted,\r\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\r\n *\r\n * @returns a function that returns the current isMounted state of the component\r\n *\r\n * ```ts\r\n * const [data, setData] = useState(null)\r\n * const isMounted = useMounted()\r\n *\r\n * useEffect(() => {\r\n *   fetchdata().then((newData) => {\r\n *      if (isMounted()) {\r\n *        setData(newData);\r\n *      }\r\n *   })\r\n * })\r\n * ```\r\n */\r\n\r\nexport default function useMounted() {\r\n  var mounted = useRef(true);\r\n  var isMounted = useRef(function () {\r\n    return mounted.current;\r\n  });\r\n  useEffect(function () {\r\n    return function () {\r\n      mounted.current = false;\r\n    };\r\n  }, []);\r\n  return isMounted.current;\r\n}"]},"metadata":{},"sourceType":"module"}